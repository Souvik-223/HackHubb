"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@peculiar";
exports.ids = ["vendor-chunks/@peculiar"];
exports.modules = {
  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/convert.js":
    /*!*********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/convert.js ***!
  \*********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnConvert: () => (/* binding */ AsnConvert)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvtsutils */ "(rsc)/../node_modules/pvtsutils/build/index.es.js");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/parser.js");\n/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./serializer */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js");\n\n\n\n\nclass AsnConvert {\n    static serialize(obj) {\n        return _serializer__WEBPACK_IMPORTED_MODULE_3__.AsnSerializer.serialize(obj);\n    }\n    static parse(data, target) {\n        return _parser__WEBPACK_IMPORTED_MODULE_2__.AsnParser.parse(data, target);\n    }\n    static toString(data) {\n        const buf = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(data) ? pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(data) : AsnConvert.serialize(data);\n        const asn = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(buf);\n        if (asn.offset === -1) {\n            throw new Error(`Cannot decode ASN.1 data. ${asn.result.error}`);\n        }\n        return asn.result.toString();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvY29udmVydC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpQztBQUNpQjtBQUNiO0FBQ1E7QUFDdEMsTUFBTUk7SUFDVCxPQUFPQyxVQUFVQyxHQUFHLEVBQUU7UUFDbEIsT0FBT0gsc0RBQWFBLENBQUNFLFNBQVMsQ0FBQ0M7SUFDbkM7SUFDQSxPQUFPQyxNQUFNQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtRQUN2QixPQUFPUCw4Q0FBU0EsQ0FBQ0ssS0FBSyxDQUFDQyxNQUFNQztJQUNqQztJQUNBLE9BQU9DLFNBQVNGLElBQUksRUFBRTtRQUNsQixNQUFNRyxNQUFNViw0REFBcUJBLENBQUNXLGNBQWMsQ0FBQ0osUUFDM0NQLDREQUFxQkEsQ0FBQ1ksYUFBYSxDQUFDTCxRQUNwQ0osV0FBV0MsU0FBUyxDQUFDRztRQUMzQixNQUFNTSxNQUFNZCwyQ0FBYyxDQUFDVztRQUMzQixJQUFJRyxJQUFJRSxNQUFNLEtBQUssQ0FBQyxHQUFHO1lBQ25CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFSCxJQUFJSSxNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDO1FBQ25FO1FBQ0EsT0FBT0wsSUFBSUksTUFBTSxDQUFDUixRQUFRO0lBQzlCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2VzMjAxNS9jb252ZXJ0LmpzP2VmMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNuMWpzIGZyb20gXCJhc24xanNcIjtcbmltcG9ydCB7IEJ1ZmZlclNvdXJjZUNvbnZlcnRlciB9IGZyb20gXCJwdnRzdXRpbHNcIjtcbmltcG9ydCB7IEFzblBhcnNlciB9IGZyb20gXCIuL3BhcnNlclwiO1xuaW1wb3J0IHsgQXNuU2VyaWFsaXplciB9IGZyb20gXCIuL3NlcmlhbGl6ZXJcIjtcbmV4cG9ydCBjbGFzcyBBc25Db252ZXJ0IHtcbiAgICBzdGF0aWMgc2VyaWFsaXplKG9iaikge1xuICAgICAgICByZXR1cm4gQXNuU2VyaWFsaXplci5zZXJpYWxpemUob2JqKTtcbiAgICB9XG4gICAgc3RhdGljIHBhcnNlKGRhdGEsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gQXNuUGFyc2VyLnBhcnNlKGRhdGEsIHRhcmdldCk7XG4gICAgfVxuICAgIHN0YXRpYyB0b1N0cmluZyhkYXRhKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShkYXRhKVxuICAgICAgICAgICAgPyBCdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihkYXRhKVxuICAgICAgICAgICAgOiBBc25Db252ZXJ0LnNlcmlhbGl6ZShkYXRhKTtcbiAgICAgICAgY29uc3QgYXNuID0gYXNuMWpzLmZyb21CRVIoYnVmKTtcbiAgICAgICAgaWYgKGFzbi5vZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZWNvZGUgQVNOLjEgZGF0YS4gJHthc24ucmVzdWx0LmVycm9yfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc24ucmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImFzbjFqcyIsIkJ1ZmZlclNvdXJjZUNvbnZlcnRlciIsIkFzblBhcnNlciIsIkFzblNlcmlhbGl6ZXIiLCJBc25Db252ZXJ0Iiwic2VyaWFsaXplIiwib2JqIiwicGFyc2UiLCJkYXRhIiwidGFyZ2V0IiwidG9TdHJpbmciLCJidWYiLCJpc0J1ZmZlclNvdXJjZSIsInRvQXJyYXlCdWZmZXIiLCJhc24iLCJmcm9tQkVSIiwib2Zmc2V0IiwiRXJyb3IiLCJyZXN1bHQiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/convert.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js":
    /*!************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/converters.js ***!
  \************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnAnyConverter: () => (/* binding */ AsnAnyConverter),\n/* harmony export */   AsnBitStringConverter: () => (/* binding */ AsnBitStringConverter),\n/* harmony export */   AsnBmpStringConverter: () => (/* binding */ AsnBmpStringConverter),\n/* harmony export */   AsnBooleanConverter: () => (/* binding */ AsnBooleanConverter),\n/* harmony export */   AsnCharacterStringConverter: () => (/* binding */ AsnCharacterStringConverter),\n/* harmony export */   AsnConstructedOctetStringConverter: () => (/* binding */ AsnConstructedOctetStringConverter),\n/* harmony export */   AsnEnumeratedConverter: () => (/* binding */ AsnEnumeratedConverter),\n/* harmony export */   AsnGeneralStringConverter: () => (/* binding */ AsnGeneralStringConverter),\n/* harmony export */   AsnGeneralizedTimeConverter: () => (/* binding */ AsnGeneralizedTimeConverter),\n/* harmony export */   AsnGraphicStringConverter: () => (/* binding */ AsnGraphicStringConverter),\n/* harmony export */   AsnIA5StringConverter: () => (/* binding */ AsnIA5StringConverter),\n/* harmony export */   AsnIntegerArrayBufferConverter: () => (/* binding */ AsnIntegerArrayBufferConverter),\n/* harmony export */   AsnIntegerBigIntConverter: () => (/* binding */ AsnIntegerBigIntConverter),\n/* harmony export */   AsnIntegerConverter: () => (/* binding */ AsnIntegerConverter),\n/* harmony export */   AsnNullConverter: () => (/* binding */ AsnNullConverter),\n/* harmony export */   AsnNumericStringConverter: () => (/* binding */ AsnNumericStringConverter),\n/* harmony export */   AsnObjectIdentifierConverter: () => (/* binding */ AsnObjectIdentifierConverter),\n/* harmony export */   AsnOctetStringConverter: () => (/* binding */ AsnOctetStringConverter),\n/* harmony export */   AsnPrintableStringConverter: () => (/* binding */ AsnPrintableStringConverter),\n/* harmony export */   AsnTeletexStringConverter: () => (/* binding */ AsnTeletexStringConverter),\n/* harmony export */   AsnUTCTimeConverter: () => (/* binding */ AsnUTCTimeConverter),\n/* harmony export */   AsnUniversalStringConverter: () => (/* binding */ AsnUniversalStringConverter),\n/* harmony export */   AsnUtf8StringConverter: () => (/* binding */ AsnUtf8StringConverter),\n/* harmony export */   AsnVideotexStringConverter: () => (/* binding */ AsnVideotexStringConverter),\n/* harmony export */   AsnVisibleStringConverter: () => (/* binding */ AsnVisibleStringConverter),\n/* harmony export */   defaultConverter: () => (/* binding */ defaultConverter)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _types_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/index */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/index.js");\n\n\n\nconst AsnAnyConverter = {\n    fromASN: (value)=>value instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Null ? null : value.valueBeforeDecodeView,\n    toASN: (value)=>{\n        if (value === null) {\n            return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n        }\n        const schema = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(value);\n        if (schema.result.error) {\n            throw new Error(schema.result.error);\n        }\n        return schema.result;\n    }\n};\nconst AsnIntegerConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView.byteLength >= 4 ? value.valueBlock.toString() : value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n            value: +value\n        })\n};\nconst AsnEnumeratedConverter = {\n    fromASN: (value)=>value.valueBlock.valueDec,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated({\n            value\n        })\n};\nconst AsnIntegerArrayBufferConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n            valueHex: value\n        })\n};\nconst AsnIntegerBigIntConverter = {\n    fromASN: (value)=>value.toBigInt(),\n    toASN: (value)=>asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.fromBigInt(value)\n};\nconst AsnBitStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n            valueHex: value\n        })\n};\nconst AsnObjectIdentifierConverter = {\n    fromASN: (value)=>value.valueBlock.toString(),\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n            value\n        })\n};\nconst AsnBooleanConverter = {\n    fromASN: (value)=>value.valueBlock.value,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n            value\n        })\n};\nconst AsnOctetStringConverter = {\n    fromASN: (value)=>value.valueBlock.valueHexView,\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n            valueHex: value\n        })\n};\nconst AsnConstructedOctetStringConverter = {\n    fromASN: (value)=>new _types_index__WEBPACK_IMPORTED_MODULE_2__.OctetString(value.getValue()),\n    toASN: (value)=>value.toASN()\n};\nfunction createStringConverter(Asn1Type) {\n    return {\n        fromASN: (value)=>value.valueBlock.value,\n        toASN: (value)=>new Asn1Type({\n                value\n            })\n    };\n}\nconst AsnUtf8StringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String);\nconst AsnBmpStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString);\nconst AsnUniversalStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString);\nconst AsnNumericStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString);\nconst AsnPrintableStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString);\nconst AsnTeletexStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString);\nconst AsnVideotexStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.VideotexString);\nconst AsnIA5StringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.IA5String);\nconst AsnGraphicStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.GraphicString);\nconst AsnVisibleStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.VisibleString);\nconst AsnGeneralStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralString);\nconst AsnCharacterStringConverter = createStringConverter(asn1js__WEBPACK_IMPORTED_MODULE_0__.CharacterString);\nconst AsnUTCTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({\n            valueDate: value\n        })\n};\nconst AsnGeneralizedTimeConverter = {\n    fromASN: (value)=>value.toDate(),\n    toASN: (value)=>new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({\n            valueDate: value\n        })\n};\nconst AsnNullConverter = {\n    fromASN: ()=>null,\n    toASN: ()=>{\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n    }\n};\nfunction defaultConverter(type) {\n    switch(type){\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Any:\n            return AsnAnyConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BitString:\n            return AsnBitStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.BmpString:\n            return AsnBmpStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Boolean:\n            return AsnBooleanConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.CharacterString:\n            return AsnCharacterStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Enumerated:\n            return AsnEnumeratedConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.GeneralString:\n            return AsnGeneralStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.GeneralizedTime:\n            return AsnGeneralizedTimeConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.GraphicString:\n            return AsnGraphicStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.IA5String:\n            return AsnIA5StringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Integer:\n            return AsnIntegerConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Null:\n            return AsnNullConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.NumericString:\n            return AsnNumericStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.ObjectIdentifier:\n            return AsnObjectIdentifierConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.OctetString:\n            return AsnOctetStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.PrintableString:\n            return AsnPrintableStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.TeletexString:\n            return AsnTeletexStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.UTCTime:\n            return AsnUTCTimeConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.UniversalString:\n            return AsnUniversalStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.Utf8String:\n            return AsnUtf8StringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.VideotexString:\n            return AsnVideotexStringConverter;\n        case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes.VisibleString:\n            return AsnVisibleStringConverter;\n        default:\n            return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/decorators.js":
    /*!************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/decorators.js ***!
  \************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnChoiceType: () => (/* binding */ AsnChoiceType),\n/* harmony export */   AsnProp: () => (/* binding */ AsnProp),\n/* harmony export */   AsnSequenceType: () => (/* binding */ AsnSequenceType),\n/* harmony export */   AsnSetType: () => (/* binding */ AsnSetType),\n/* harmony export */   AsnType: () => (/* binding */ AsnType)\n/* harmony export */ });\n/* harmony import */ var _converters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converters */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/storage.js");\n\n\n\nconst AsnType = (options)=>(target)=>{\n        let schema;\n        if (!_storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.has(target)) {\n            schema = _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.createDefault(target);\n            _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.set(target, schema);\n        } else {\n            schema = _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.get(target);\n        }\n        Object.assign(schema, options);\n    };\nconst AsnChoiceType = ()=>AsnType({\n        type: _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice\n    });\nconst AsnSetType = (options)=>AsnType({\n        type: _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Set,\n        ...options\n    });\nconst AsnSequenceType = (options)=>AsnType({\n        type: _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Sequence,\n        ...options\n    });\nconst AsnProp = (options)=>(target, propertyKey)=>{\n        let schema;\n        if (!_storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.has(target.constructor)) {\n            schema = _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.createDefault(target.constructor);\n            _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = _storage__WEBPACK_IMPORTED_MODULE_2__.schemaStorage.get(target.constructor);\n        }\n        const copyOptions = Object.assign({}, options);\n        if (typeof copyOptions.type === "number" && !copyOptions.converter) {\n            const defaultConverter = _converters__WEBPACK_IMPORTED_MODULE_0__.defaultConverter(options.type);\n            if (!defaultConverter) {\n                throw new Error(`Cannot get default converter for property \'${propertyKey}\' of ${target.constructor.name}`);\n            }\n            copyOptions.converter = defaultConverter;\n        }\n        schema.items[propertyKey] = copyOptions;\n    };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvZGVjb3JhdG9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUEyQztBQUNKO0FBQ0c7QUFDbkMsTUFBTUcsVUFBVSxDQUFDQyxVQUFZLENBQUNDO1FBQ2pDLElBQUlDO1FBQ0osSUFBSSxDQUFDSixtREFBYUEsQ0FBQ0ssR0FBRyxDQUFDRixTQUFTO1lBQzVCQyxTQUFTSixtREFBYUEsQ0FBQ00sYUFBYSxDQUFDSDtZQUNyQ0gsbURBQWFBLENBQUNPLEdBQUcsQ0FBQ0osUUFBUUM7UUFDOUIsT0FDSztZQUNEQSxTQUFTSixtREFBYUEsQ0FBQ1EsR0FBRyxDQUFDTDtRQUMvQjtRQUNBTSxPQUFPQyxNQUFNLENBQUNOLFFBQVFGO0lBQzFCLEVBQUU7QUFDSyxNQUFNUyxnQkFBZ0IsSUFBTVYsUUFBUTtRQUFFVyxNQUFNYixnREFBWUEsQ0FBQ2MsTUFBTTtJQUFDLEdBQUc7QUFDbkUsTUFBTUMsYUFBYSxDQUFDWixVQUFZRCxRQUFRO1FBQUVXLE1BQU1iLGdEQUFZQSxDQUFDZ0IsR0FBRztRQUFFLEdBQUdiLE9BQU87SUFBQyxHQUFHO0FBQ2hGLE1BQU1jLGtCQUFrQixDQUFDZCxVQUFZRCxRQUFRO1FBQUVXLE1BQU1iLGdEQUFZQSxDQUFDa0IsUUFBUTtRQUFFLEdBQUdmLE9BQU87SUFBQyxHQUFHO0FBQzFGLE1BQU1nQixVQUFVLENBQUNoQixVQUFZLENBQUNDLFFBQVFnQjtRQUN6QyxJQUFJZjtRQUNKLElBQUksQ0FBQ0osbURBQWFBLENBQUNLLEdBQUcsQ0FBQ0YsT0FBT2lCLFdBQVcsR0FBRztZQUN4Q2hCLFNBQVNKLG1EQUFhQSxDQUFDTSxhQUFhLENBQUNILE9BQU9pQixXQUFXO1lBQ3ZEcEIsbURBQWFBLENBQUNPLEdBQUcsQ0FBQ0osT0FBT2lCLFdBQVcsRUFBRWhCO1FBQzFDLE9BQ0s7WUFDREEsU0FBU0osbURBQWFBLENBQUNRLEdBQUcsQ0FBQ0wsT0FBT2lCLFdBQVc7UUFDakQ7UUFDQSxNQUFNQyxjQUFjWixPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHUjtRQUN0QyxJQUFJLE9BQU9tQixZQUFZVCxJQUFJLEtBQUssWUFBWSxDQUFDUyxZQUFZQyxTQUFTLEVBQUU7WUFDaEUsTUFBTUMsbUJBQW1CekIseURBQTJCLENBQUNJLFFBQVFVLElBQUk7WUFDakUsSUFBSSxDQUFDVyxrQkFBa0I7Z0JBQ25CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLDJDQUEyQyxFQUFFTCxZQUFZLEtBQUssRUFBRWhCLE9BQU9pQixXQUFXLENBQUNLLElBQUksQ0FBQyxDQUFDO1lBQzlHO1lBQ0FKLFlBQVlDLFNBQVMsR0FBR0M7UUFDNUI7UUFDQW5CLE9BQU9zQixLQUFLLENBQUNQLFlBQVksR0FBR0U7SUFDaEMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2todWJiLy4uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvZXMyMDE1L2RlY29yYXRvcnMuanM/OTExYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb252ZXJ0ZXJzIGZyb20gXCIuL2NvbnZlcnRlcnNcIjtcbmltcG9ydCB7IEFzblR5cGVUeXBlcyB9IGZyb20gXCIuL2VudW1zXCI7XG5pbXBvcnQgeyBzY2hlbWFTdG9yYWdlIH0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuZXhwb3J0IGNvbnN0IEFzblR5cGUgPSAob3B0aW9ucykgPT4gKHRhcmdldCkgPT4ge1xuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKCFzY2hlbWFTdG9yYWdlLmhhcyh0YXJnZXQpKSB7XG4gICAgICAgIHNjaGVtYSA9IHNjaGVtYVN0b3JhZ2UuY3JlYXRlRGVmYXVsdCh0YXJnZXQpO1xuICAgICAgICBzY2hlbWFTdG9yYWdlLnNldCh0YXJnZXQsIHNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzY2hlbWEgPSBzY2hlbWFTdG9yYWdlLmdldCh0YXJnZXQpO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHNjaGVtYSwgb3B0aW9ucyk7XG59O1xuZXhwb3J0IGNvbnN0IEFzbkNob2ljZVR5cGUgPSAoKSA9PiBBc25UeXBlKHsgdHlwZTogQXNuVHlwZVR5cGVzLkNob2ljZSB9KTtcbmV4cG9ydCBjb25zdCBBc25TZXRUeXBlID0gKG9wdGlvbnMpID0+IEFzblR5cGUoeyB0eXBlOiBBc25UeXBlVHlwZXMuU2V0LCAuLi5vcHRpb25zIH0pO1xuZXhwb3J0IGNvbnN0IEFzblNlcXVlbmNlVHlwZSA9IChvcHRpb25zKSA9PiBBc25UeXBlKHsgdHlwZTogQXNuVHlwZVR5cGVzLlNlcXVlbmNlLCAuLi5vcHRpb25zIH0pO1xuZXhwb3J0IGNvbnN0IEFzblByb3AgPSAob3B0aW9ucykgPT4gKHRhcmdldCwgcHJvcGVydHlLZXkpID0+IHtcbiAgICBsZXQgc2NoZW1hO1xuICAgIGlmICghc2NoZW1hU3RvcmFnZS5oYXModGFyZ2V0LmNvbnN0cnVjdG9yKSkge1xuICAgICAgICBzY2hlbWEgPSBzY2hlbWFTdG9yYWdlLmNyZWF0ZURlZmF1bHQodGFyZ2V0LmNvbnN0cnVjdG9yKTtcbiAgICAgICAgc2NoZW1hU3RvcmFnZS5zZXQodGFyZ2V0LmNvbnN0cnVjdG9yLCBzY2hlbWEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2NoZW1hID0gc2NoZW1hU3RvcmFnZS5nZXQodGFyZ2V0LmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gICAgY29uc3QgY29weU9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICBpZiAodHlwZW9mIGNvcHlPcHRpb25zLnR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWNvcHlPcHRpb25zLmNvbnZlcnRlcikge1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29udmVydGVyID0gY29udmVydGVycy5kZWZhdWx0Q29udmVydGVyKG9wdGlvbnMudHlwZSk7XG4gICAgICAgIGlmICghZGVmYXVsdENvbnZlcnRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZ2V0IGRlZmF1bHQgY29udmVydGVyIGZvciBwcm9wZXJ0eSAnJHtwcm9wZXJ0eUtleX0nIG9mICR7dGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29weU9wdGlvbnMuY29udmVydGVyID0gZGVmYXVsdENvbnZlcnRlcjtcbiAgICB9XG4gICAgc2NoZW1hLml0ZW1zW3Byb3BlcnR5S2V5XSA9IGNvcHlPcHRpb25zO1xufTtcbiJdLCJuYW1lcyI6WyJjb252ZXJ0ZXJzIiwiQXNuVHlwZVR5cGVzIiwic2NoZW1hU3RvcmFnZSIsIkFzblR5cGUiLCJvcHRpb25zIiwidGFyZ2V0Iiwic2NoZW1hIiwiaGFzIiwiY3JlYXRlRGVmYXVsdCIsInNldCIsImdldCIsIk9iamVjdCIsImFzc2lnbiIsIkFzbkNob2ljZVR5cGUiLCJ0eXBlIiwiQ2hvaWNlIiwiQXNuU2V0VHlwZSIsIlNldCIsIkFzblNlcXVlbmNlVHlwZSIsIlNlcXVlbmNlIiwiQXNuUHJvcCIsInByb3BlcnR5S2V5IiwiY29uc3RydWN0b3IiLCJjb3B5T3B0aW9ucyIsImNvbnZlcnRlciIsImRlZmF1bHRDb252ZXJ0ZXIiLCJFcnJvciIsIm5hbWUiLCJpdGVtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/decorators.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js":
    /*!*******************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/enums.js ***!
  \*******************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnPropTypes: () => (/* binding */ AsnPropTypes),\n/* harmony export */   AsnTypeTypes: () => (/* binding */ AsnTypeTypes)\n/* harmony export */ });\nvar AsnTypeTypes;\n(function(AsnTypeTypes) {\n    AsnTypeTypes[AsnTypeTypes["Sequence"] = 0] = "Sequence";\n    AsnTypeTypes[AsnTypeTypes["Set"] = 1] = "Set";\n    AsnTypeTypes[AsnTypeTypes["Choice"] = 2] = "Choice";\n})(AsnTypeTypes || (AsnTypeTypes = {}));\nvar AsnPropTypes;\n(function(AsnPropTypes) {\n    AsnPropTypes[AsnPropTypes["Any"] = 1] = "Any";\n    AsnPropTypes[AsnPropTypes["Boolean"] = 2] = "Boolean";\n    AsnPropTypes[AsnPropTypes["OctetString"] = 3] = "OctetString";\n    AsnPropTypes[AsnPropTypes["BitString"] = 4] = "BitString";\n    AsnPropTypes[AsnPropTypes["Integer"] = 5] = "Integer";\n    AsnPropTypes[AsnPropTypes["Enumerated"] = 6] = "Enumerated";\n    AsnPropTypes[AsnPropTypes["ObjectIdentifier"] = 7] = "ObjectIdentifier";\n    AsnPropTypes[AsnPropTypes["Utf8String"] = 8] = "Utf8String";\n    AsnPropTypes[AsnPropTypes["BmpString"] = 9] = "BmpString";\n    AsnPropTypes[AsnPropTypes["UniversalString"] = 10] = "UniversalString";\n    AsnPropTypes[AsnPropTypes["NumericString"] = 11] = "NumericString";\n    AsnPropTypes[AsnPropTypes["PrintableString"] = 12] = "PrintableString";\n    AsnPropTypes[AsnPropTypes["TeletexString"] = 13] = "TeletexString";\n    AsnPropTypes[AsnPropTypes["VideotexString"] = 14] = "VideotexString";\n    AsnPropTypes[AsnPropTypes["IA5String"] = 15] = "IA5String";\n    AsnPropTypes[AsnPropTypes["GraphicString"] = 16] = "GraphicString";\n    AsnPropTypes[AsnPropTypes["VisibleString"] = 17] = "VisibleString";\n    AsnPropTypes[AsnPropTypes["GeneralString"] = 18] = "GeneralString";\n    AsnPropTypes[AsnPropTypes["CharacterString"] = 19] = "CharacterString";\n    AsnPropTypes[AsnPropTypes["UTCTime"] = 20] = "UTCTime";\n    AsnPropTypes[AsnPropTypes["GeneralizedTime"] = 21] = "GeneralizedTime";\n    AsnPropTypes[AsnPropTypes["DATE"] = 22] = "DATE";\n    AsnPropTypes[AsnPropTypes["TimeOfDay"] = 23] = "TimeOfDay";\n    AsnPropTypes[AsnPropTypes["DateTime"] = 24] = "DateTime";\n    AsnPropTypes[AsnPropTypes["Duration"] = 25] = "Duration";\n    AsnPropTypes[AsnPropTypes["TIME"] = 26] = "TIME";\n    AsnPropTypes[AsnPropTypes["Null"] = 27] = "Null";\n})(AsnPropTypes || (AsnPropTypes = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFJQSxhQUFhO0FBQ3ZCLFVBQVVBLFlBQVk7SUFDbkJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUc7SUFDN0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUc7SUFDeENBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7QUFDL0MsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDN0IsSUFBSUMsYUFBYTtBQUN2QixVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ3hDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzVDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0lBQ2hEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQzlDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQzVDQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQy9DQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDOUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxHQUFHO0lBQ3BEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHO0lBQy9DQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7SUFDbkRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsR0FBRztJQUNuREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxHQUFHO0lBQ25EQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLEdBQUc7SUFDckRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUc7SUFDN0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsR0FBRztJQUNyREEsWUFBWSxDQUFDQSxZQUFZLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztJQUMxQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRztJQUMvQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRztJQUM5Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRztJQUM5Q0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztJQUMxQ0EsWUFBWSxDQUFDQSxZQUFZLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRztBQUM5QyxHQUFHQSxnQkFBaUJBLENBQUFBLGVBQWUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2todWJiLy4uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvZXMyMDE1L2VudW1zLmpzPzgwY2YiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBBc25UeXBlVHlwZXM7XG4oZnVuY3Rpb24gKEFzblR5cGVUeXBlcykge1xuICAgIEFzblR5cGVUeXBlc1tBc25UeXBlVHlwZXNbXCJTZXF1ZW5jZVwiXSA9IDBdID0gXCJTZXF1ZW5jZVwiO1xuICAgIEFzblR5cGVUeXBlc1tBc25UeXBlVHlwZXNbXCJTZXRcIl0gPSAxXSA9IFwiU2V0XCI7XG4gICAgQXNuVHlwZVR5cGVzW0FzblR5cGVUeXBlc1tcIkNob2ljZVwiXSA9IDJdID0gXCJDaG9pY2VcIjtcbn0pKEFzblR5cGVUeXBlcyB8fCAoQXNuVHlwZVR5cGVzID0ge30pKTtcbmV4cG9ydCB2YXIgQXNuUHJvcFR5cGVzO1xuKGZ1bmN0aW9uIChBc25Qcm9wVHlwZXMpIHtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQW55XCJdID0gMV0gPSBcIkFueVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJCb29sZWFuXCJdID0gMl0gPSBcIkJvb2xlYW5cIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiT2N0ZXRTdHJpbmdcIl0gPSAzXSA9IFwiT2N0ZXRTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQml0U3RyaW5nXCJdID0gNF0gPSBcIkJpdFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJJbnRlZ2VyXCJdID0gNV0gPSBcIkludGVnZXJcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiRW51bWVyYXRlZFwiXSA9IDZdID0gXCJFbnVtZXJhdGVkXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIk9iamVjdElkZW50aWZpZXJcIl0gPSA3XSA9IFwiT2JqZWN0SWRlbnRpZmllclwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJVdGY4U3RyaW5nXCJdID0gOF0gPSBcIlV0ZjhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiQm1wU3RyaW5nXCJdID0gOV0gPSBcIkJtcFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJVbml2ZXJzYWxTdHJpbmdcIl0gPSAxMF0gPSBcIlVuaXZlcnNhbFN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJOdW1lcmljU3RyaW5nXCJdID0gMTFdID0gXCJOdW1lcmljU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlByaW50YWJsZVN0cmluZ1wiXSA9IDEyXSA9IFwiUHJpbnRhYmxlU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRlbGV0ZXhTdHJpbmdcIl0gPSAxM10gPSBcIlRlbGV0ZXhTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVmlkZW90ZXhTdHJpbmdcIl0gPSAxNF0gPSBcIlZpZGVvdGV4U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIklBNVN0cmluZ1wiXSA9IDE1XSA9IFwiSUE1U3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkdyYXBoaWNTdHJpbmdcIl0gPSAxNl0gPSBcIkdyYXBoaWNTdHJpbmdcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiVmlzaWJsZVN0cmluZ1wiXSA9IDE3XSA9IFwiVmlzaWJsZVN0cmluZ1wiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJHZW5lcmFsU3RyaW5nXCJdID0gMThdID0gXCJHZW5lcmFsU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIkNoYXJhY3RlclN0cmluZ1wiXSA9IDE5XSA9IFwiQ2hhcmFjdGVyU3RyaW5nXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlVUQ1RpbWVcIl0gPSAyMF0gPSBcIlVUQ1RpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiR2VuZXJhbGl6ZWRUaW1lXCJdID0gMjFdID0gXCJHZW5lcmFsaXplZFRpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiREFURVwiXSA9IDIyXSA9IFwiREFURVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJUaW1lT2ZEYXlcIl0gPSAyM10gPSBcIlRpbWVPZkRheVwiO1xuICAgIEFzblByb3BUeXBlc1tBc25Qcm9wVHlwZXNbXCJEYXRlVGltZVwiXSA9IDI0XSA9IFwiRGF0ZVRpbWVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiRHVyYXRpb25cIl0gPSAyNV0gPSBcIkR1cmF0aW9uXCI7XG4gICAgQXNuUHJvcFR5cGVzW0FzblByb3BUeXBlc1tcIlRJTUVcIl0gPSAyNl0gPSBcIlRJTUVcIjtcbiAgICBBc25Qcm9wVHlwZXNbQXNuUHJvcFR5cGVzW1wiTnVsbFwiXSA9IDI3XSA9IFwiTnVsbFwiO1xufSkoQXNuUHJvcFR5cGVzIHx8IChBc25Qcm9wVHlwZXMgPSB7fSkpO1xuIl0sIm5hbWVzIjpbIkFzblR5cGVUeXBlcyIsIkFzblByb3BUeXBlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js":
    /*!**************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js ***!
  \**************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnSchemaValidationError: () => (/* reexport safe */ _schema_validation__WEBPACK_IMPORTED_MODULE_0__.AsnSchemaValidationError)\n/* harmony export */ });\n/* harmony import */ var _schema_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema_validation */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvZXJyb3JzL2luZGV4LmpzPzU4MjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vc2NoZW1hX3ZhbGlkYXRpb25cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js":
    /*!**************************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js ***!
  \**************************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnSchemaValidationError: () => (/* binding */ AsnSchemaValidationError)\n/* harmony export */ });\nclass AsnSchemaValidationError extends Error {\n    constructor(){\n        super(...arguments);\n        this.schemas = [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvZXJyb3JzL3NjaGVtYV92YWxpZGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxpQ0FBaUNDO0lBQzFDQyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7SUFDckI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2todWJiLy4uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvZXMyMDE1L2Vycm9ycy9zY2hlbWFfdmFsaWRhdGlvbi5qcz9kMmMxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuc2NoZW1hcyA9IFtdO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJBc25TY2hlbWFWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwic2NoZW1hcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/schema_validation.js\n",
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/helper.js":
    /*!********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/helper.js ***!
  \********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isArrayEqual: () => (/* binding */ isArrayEqual),\n/* harmony export */   isConvertible: () => (/* binding */ isConvertible),\n/* harmony export */   isTypeOfArray: () => (/* binding */ isTypeOfArray)\n/* harmony export */ });\nfunction isConvertible(target) {\n    if (typeof target === "function" && target.prototype) {\n        if (target.prototype.toASN && target.prototype.fromASN) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && typeof target === "object" && "toASN" in target && "fromASN" in target);\n    }\n}\nfunction isTypeOfArray(target) {\n    var _a;\n    if (target) {\n        const proto = Object.getPrototypeOf(target);\n        if (((_a = proto === null || proto === void 0 ? void 0 : proto.prototype) === null || _a === void 0 ? void 0 : _a.constructor) === Array) {\n            return true;\n        }\n        return isTypeOfArray(proto);\n    }\n    return false;\n}\nfunction isArrayEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for(let i = 0; i < bytes1.byteLength; i++){\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvaGVscGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFPLFNBQVNBLGNBQWNDLE1BQU07SUFDaEMsSUFBSSxPQUFPQSxXQUFXLGNBQWNBLE9BQU9DLFNBQVMsRUFBRTtRQUNsRCxJQUFJRCxPQUFPQyxTQUFTLENBQUNDLEtBQUssSUFBSUYsT0FBT0MsU0FBUyxDQUFDRSxPQUFPLEVBQUU7WUFDcEQsT0FBTztRQUNYLE9BQ0s7WUFDRCxPQUFPSixjQUFjQyxPQUFPQyxTQUFTO1FBQ3pDO0lBQ0osT0FDSztRQUNELE9BQU8sQ0FBQyxDQUFFRCxDQUFBQSxVQUFVLE9BQU9BLFdBQVcsWUFBWSxXQUFXQSxVQUFVLGFBQWFBLE1BQUs7SUFDN0Y7QUFDSjtBQUNPLFNBQVNJLGNBQWNKLE1BQU07SUFDaEMsSUFBSUs7SUFDSixJQUFJTCxRQUFRO1FBQ1IsTUFBTU0sUUFBUUMsT0FBT0MsY0FBYyxDQUFDUjtRQUNwQyxJQUFJLENBQUMsQ0FBQ0ssS0FBS0MsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1MLFNBQVMsTUFBTSxRQUFRSSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdJLFdBQVcsTUFBTUMsT0FBTztZQUN0SSxPQUFPO1FBQ1g7UUFDQSxPQUFPTixjQUFjRTtJQUN6QjtJQUNBLE9BQU87QUFDWDtBQUNPLFNBQVNLLGFBQWFDLE1BQU0sRUFBRUMsTUFBTTtJQUN2QyxJQUFJLENBQUVELENBQUFBLFVBQVVDLE1BQUssR0FBSTtRQUNyQixPQUFPO0lBQ1g7SUFDQSxJQUFJRCxPQUFPRSxVQUFVLEtBQUtELE9BQU9DLFVBQVUsRUFBRTtRQUN6QyxPQUFPO0lBQ1g7SUFDQSxNQUFNQyxLQUFLLElBQUlDLFdBQVdKO0lBQzFCLE1BQU1LLEtBQUssSUFBSUQsV0FBV0g7SUFDMUIsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlOLE9BQU9FLFVBQVUsRUFBRUksSUFBSztRQUN4QyxJQUFJSCxFQUFFLENBQUNHLEVBQUUsS0FBS0QsRUFBRSxDQUFDQyxFQUFFLEVBQUU7WUFDakIsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2VzMjAxNS9oZWxwZXIuanM/M2JkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNDb252ZXJ0aWJsZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gXCJmdW5jdGlvblwiICYmIHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHRhcmdldC5wcm90b3R5cGUudG9BU04gJiYgdGFyZ2V0LnByb3RvdHlwZS5mcm9tQVNOKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0NvbnZlcnRpYmxlKHRhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gISEodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIgJiYgXCJ0b0FTTlwiIGluIHRhcmdldCAmJiBcImZyb21BU05cIiBpbiB0YXJnZXQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVPZkFycmF5KHRhcmdldCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gICAgICAgIGlmICgoKF9hID0gcHJvdG8gPT09IG51bGwgfHwgcHJvdG8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByb3RvLnByb3RvdHlwZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnN0cnVjdG9yKSA9PT0gQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1R5cGVPZkFycmF5KHByb3RvKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlFcXVhbChieXRlczEsIGJ5dGVzMikge1xuICAgIGlmICghKGJ5dGVzMSAmJiBieXRlczIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGJ5dGVzMS5ieXRlTGVuZ3RoICE9PSBieXRlczIuYnl0ZUxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGIxID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMxKTtcbiAgICBjb25zdCBiMiA9IG5ldyBVaW50OEFycmF5KGJ5dGVzMik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczEuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChiMVtpXSAhPT0gYjJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6WyJpc0NvbnZlcnRpYmxlIiwidGFyZ2V0IiwicHJvdG90eXBlIiwidG9BU04iLCJmcm9tQVNOIiwiaXNUeXBlT2ZBcnJheSIsIl9hIiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwiQXJyYXkiLCJpc0FycmF5RXF1YWwiLCJieXRlczEiLCJieXRlczIiLCJieXRlTGVuZ3RoIiwiYjEiLCJVaW50OEFycmF5IiwiYjIiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/helper.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/index.js":
    /*!*******************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/index.js ***!
  \*******************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnAnyConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnAnyConverter),\n/* harmony export */   AsnArray: () => (/* reexport safe */ _objects__WEBPACK_IMPORTED_MODULE_7__.AsnArray),\n/* harmony export */   AsnBitStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnBitStringConverter),\n/* harmony export */   AsnBmpStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnBmpStringConverter),\n/* harmony export */   AsnBooleanConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnBooleanConverter),\n/* harmony export */   AsnCharacterStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnCharacterStringConverter),\n/* harmony export */   AsnChoiceType: () => (/* reexport safe */ _decorators__WEBPACK_IMPORTED_MODULE_2__.AsnChoiceType),\n/* harmony export */   AsnConstructedOctetStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnConstructedOctetStringConverter),\n/* harmony export */   AsnConvert: () => (/* reexport safe */ _convert__WEBPACK_IMPORTED_MODULE_8__.AsnConvert),\n/* harmony export */   AsnEnumeratedConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnEnumeratedConverter),\n/* harmony export */   AsnGeneralStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnGeneralStringConverter),\n/* harmony export */   AsnGeneralizedTimeConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnGeneralizedTimeConverter),\n/* harmony export */   AsnGraphicStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnGraphicStringConverter),\n/* harmony export */   AsnIA5StringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnIA5StringConverter),\n/* harmony export */   AsnIntegerArrayBufferConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnIntegerArrayBufferConverter),\n/* harmony export */   AsnIntegerBigIntConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnIntegerBigIntConverter),\n/* harmony export */   AsnIntegerConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnIntegerConverter),\n/* harmony export */   AsnNullConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnNullConverter),\n/* harmony export */   AsnNumericStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnNumericStringConverter),\n/* harmony export */   AsnObjectIdentifierConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnObjectIdentifierConverter),\n/* harmony export */   AsnOctetStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnOctetStringConverter),\n/* harmony export */   AsnParser: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_4__.AsnParser),\n/* harmony export */   AsnPrintableStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnPrintableStringConverter),\n/* harmony export */   AsnProp: () => (/* reexport safe */ _decorators__WEBPACK_IMPORTED_MODULE_2__.AsnProp),\n/* harmony export */   AsnPropTypes: () => (/* reexport safe */ _enums__WEBPACK_IMPORTED_MODULE_3__.AsnPropTypes),\n/* harmony export */   AsnSchemaValidationError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_6__.AsnSchemaValidationError),\n/* harmony export */   AsnSequenceType: () => (/* reexport safe */ _decorators__WEBPACK_IMPORTED_MODULE_2__.AsnSequenceType),\n/* harmony export */   AsnSerializer: () => (/* reexport safe */ _serializer__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer),\n/* harmony export */   AsnSetType: () => (/* reexport safe */ _decorators__WEBPACK_IMPORTED_MODULE_2__.AsnSetType),\n/* harmony export */   AsnTeletexStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnTeletexStringConverter),\n/* harmony export */   AsnType: () => (/* reexport safe */ _decorators__WEBPACK_IMPORTED_MODULE_2__.AsnType),\n/* harmony export */   AsnTypeTypes: () => (/* reexport safe */ _enums__WEBPACK_IMPORTED_MODULE_3__.AsnTypeTypes),\n/* harmony export */   AsnUTCTimeConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnUTCTimeConverter),\n/* harmony export */   AsnUniversalStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnUniversalStringConverter),\n/* harmony export */   AsnUtf8StringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnUtf8StringConverter),\n/* harmony export */   AsnVideotexStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnVideotexStringConverter),\n/* harmony export */   AsnVisibleStringConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.AsnVisibleStringConverter),\n/* harmony export */   BitString: () => (/* reexport safe */ _types_index__WEBPACK_IMPORTED_MODULE_1__.BitString),\n/* harmony export */   OctetString: () => (/* reexport safe */ _types_index__WEBPACK_IMPORTED_MODULE_1__.OctetString),\n/* harmony export */   defaultConverter: () => (/* reexport safe */ _converters__WEBPACK_IMPORTED_MODULE_0__.defaultConverter)\n/* harmony export */ });\n/* harmony import */ var _converters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converters */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js");\n/* harmony import */ var _types_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/index */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/index.js");\n/* harmony import */ var _decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./decorators */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/decorators.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/parser.js");\n/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serializer */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js");\n/* harmony import */ var _objects__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./objects */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/objects.js");\n/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./convert */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/convert.js");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE2QjtBQUNDO0FBQzhEO0FBQ3ZDO0FBQ2hCO0FBQ1E7QUFDcEI7QUFDQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvaW5kZXguanM/NDExOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9jb252ZXJ0ZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlcy9pbmRleFwiO1xuZXhwb3J0IHsgQXNuUHJvcCwgQXNuVHlwZSwgQXNuQ2hvaWNlVHlwZSwgQXNuU2VxdWVuY2VUeXBlLCBBc25TZXRUeXBlIH0gZnJvbSBcIi4vZGVjb3JhdG9yc1wiO1xuZXhwb3J0IHsgQXNuVHlwZVR5cGVzLCBBc25Qcm9wVHlwZXMgfSBmcm9tIFwiLi9lbnVtc1wiO1xuZXhwb3J0IHsgQXNuUGFyc2VyIH0gZnJvbSBcIi4vcGFyc2VyXCI7XG5leHBvcnQgeyBBc25TZXJpYWxpemVyIH0gZnJvbSBcIi4vc2VyaWFsaXplclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXJyb3JzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9vYmplY3RzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb252ZXJ0XCI7XG4iXSwibmFtZXMiOlsiQXNuUHJvcCIsIkFzblR5cGUiLCJBc25DaG9pY2VUeXBlIiwiQXNuU2VxdWVuY2VUeXBlIiwiQXNuU2V0VHlwZSIsIkFzblR5cGVUeXBlcyIsIkFzblByb3BUeXBlcyIsIkFzblBhcnNlciIsIkFzblNlcmlhbGl6ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/index.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/objects.js":
    /*!*********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/objects.js ***!
  \*********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnArray: () => (/* binding */ AsnArray)\n/* harmony export */ });\nclass AsnArray extends Array {\n    constructor(items = []){\n        if (typeof items === "number") {\n            super(items);\n        } else {\n            super();\n            for (const item of items){\n                this.push(item);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvb2JqZWN0cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsaUJBQWlCQztJQUMxQkMsWUFBWUMsUUFBUSxFQUFFLENBQUU7UUFDcEIsSUFBSSxPQUFPQSxVQUFVLFVBQVU7WUFDM0IsS0FBSyxDQUFDQTtRQUNWLE9BQ0s7WUFDRCxLQUFLO1lBQ0wsS0FBSyxNQUFNQyxRQUFRRCxNQUFPO2dCQUN0QixJQUFJLENBQUNFLElBQUksQ0FBQ0Q7WUFDZDtRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2todWJiLy4uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvZXMyMDE1L29iamVjdHMuanM/YTEyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQXNuQXJyYXkgZXh0ZW5kcyBBcnJheSB7XG4gICAgY29uc3RydWN0b3IoaXRlbXMgPSBbXSkge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1zID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBzdXBlcihpdGVtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkFzbkFycmF5IiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIml0ZW1zIiwiaXRlbSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/objects.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/parser.js":
    /*!********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/parser.js ***!
  \********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnParser: () => (/* binding */ AsnParser)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _converters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./converters */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/errors/index.js");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helper */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/helper.js");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/storage.js");\n\n\n\n\n\n\nclass AsnParser {\n    static parse(data, target) {\n        const asn1Parsed = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(data);\n        if (asn1Parsed.result.error) {\n            throw new Error(asn1Parsed.result.error);\n        }\n        const res = this.fromASN(asn1Parsed.result, target);\n        return res;\n    }\n    static fromASN(asn1Schema, target) {\n        var _a;\n        try {\n            if ((0,_helper__WEBPACK_IMPORTED_MODULE_4__.isConvertible)(target)) {\n                const value = new target();\n                return value.fromASN(asn1Schema);\n            }\n            const schema = _storage__WEBPACK_IMPORTED_MODULE_5__.schemaStorage.get(target);\n            _storage__WEBPACK_IMPORTED_MODULE_5__.schemaStorage.cache(target);\n            let targetSchema = schema.schema;\n            if (asn1Schema.constructor === asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed && schema.type !== _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice) {\n                targetSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: asn1Schema.idBlock.tagNumber\n                    },\n                    value: schema.schema.valueBlock.value\n                });\n                for(const key in schema.items){\n                    delete asn1Schema[key];\n                }\n            }\n            const asn1ComparedSchema = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema({}, asn1Schema, targetSchema);\n            if (!asn1ComparedSchema.verified) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_3__.AsnSchemaValidationError(`Data does not match to ${target.name} ASN1 schema. ${asn1ComparedSchema.result.error}`);\n            }\n            const res = new target();\n            if ((0,_helper__WEBPACK_IMPORTED_MODULE_4__.isTypeOfArray)(target)) {\n                if (!("value" in asn1Schema.valueBlock && Array.isArray(asn1Schema.valueBlock.value))) {\n                    throw new Error(`Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.`);\n                }\n                const itemType = schema.itemType;\n                if (typeof itemType === "number") {\n                    const converter = _converters__WEBPACK_IMPORTED_MODULE_2__.defaultConverter(itemType);\n                    if (!converter) {\n                        throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                    }\n                    return target.from(asn1Schema.valueBlock.value, (element)=>converter.fromASN(element));\n                } else {\n                    return target.from(asn1Schema.valueBlock.value, (element)=>this.fromASN(element, itemType));\n                }\n            }\n            for(const key in schema.items){\n                const asn1SchemaValue = asn1ComparedSchema.result[key];\n                if (!asn1SchemaValue) {\n                    continue;\n                }\n                const schemaItem = schema.items[key];\n                const schemaItemType = schemaItem.type;\n                if (typeof schemaItemType === "number" || (0,_helper__WEBPACK_IMPORTED_MODULE_4__.isConvertible)(schemaItemType)) {\n                    const converter = (_a = schemaItem.converter) !== null && _a !== void 0 ? _a : (0,_helper__WEBPACK_IMPORTED_MODULE_4__.isConvertible)(schemaItemType) ? new schemaItemType() : null;\n                    if (!converter) {\n                        throw new Error("Converter is empty");\n                    }\n                    if (schemaItem.repeated) {\n                        if (schemaItem.implicit) {\n                            const Container = schemaItem.repeated === "sequence" ? asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence : asn1js__WEBPACK_IMPORTED_MODULE_0__.Set;\n                            const newItem = new Container();\n                            newItem.valueBlock = asn1SchemaValue.valueBlock;\n                            const newItemAsn = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(newItem.toBER(false));\n                            if (newItemAsn.offset === -1) {\n                                throw new Error(`Cannot parse the child item. ${newItemAsn.result.error}`);\n                            }\n                            if (!("value" in newItemAsn.result.valueBlock && Array.isArray(newItemAsn.result.valueBlock.value))) {\n                                throw new Error("Cannot get items from the ASN.1 parsed value. ASN.1 object is not constructed.");\n                            }\n                            const value = newItemAsn.result.valueBlock.value;\n                            res[key] = Array.from(value, (element)=>converter.fromASN(element));\n                        } else {\n                            res[key] = Array.from(asn1SchemaValue, (element)=>converter.fromASN(element));\n                        }\n                    } else {\n                        let value = asn1SchemaValue;\n                        if (schemaItem.implicit) {\n                            let newItem;\n                            if ((0,_helper__WEBPACK_IMPORTED_MODULE_4__.isConvertible)(schemaItemType)) {\n                                newItem = new schemaItemType().toSchema("");\n                            } else {\n                                const Asn1TypeName = _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes[schemaItemType];\n                                const Asn1Type = asn1js__WEBPACK_IMPORTED_MODULE_0__[Asn1TypeName];\n                                if (!Asn1Type) {\n                                    throw new Error(`Cannot get \'${Asn1TypeName}\' class from asn1js module`);\n                                }\n                                newItem = new Asn1Type();\n                            }\n                            newItem.valueBlock = value.valueBlock;\n                            value = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(newItem.toBER(false)).result;\n                        }\n                        res[key] = converter.fromASN(value);\n                    }\n                } else {\n                    if (schemaItem.repeated) {\n                        if (!Array.isArray(asn1SchemaValue)) {\n                            throw new Error("Cannot get list of items from the ASN.1 parsed value. ASN.1 value should be iterable.");\n                        }\n                        res[key] = Array.from(asn1SchemaValue, (element)=>this.fromASN(element, schemaItemType));\n                    } else {\n                        res[key] = this.fromASN(asn1SchemaValue, schemaItemType);\n                    }\n                }\n            }\n            return res;\n        } catch (error) {\n            if (error instanceof _errors__WEBPACK_IMPORTED_MODULE_3__.AsnSchemaValidationError) {\n                error.schemas.push(target.name);\n            }\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/parser.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/schema.js":
    /*!********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/schema.js ***!
  \********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnSchemaStorage: () => (/* binding */ AsnSchemaStorage)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helper */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/helper.js");\n\n\n\nclass AsnSchemaStorage {\n    constructor(){\n        this.items = new WeakMap();\n    }\n    has(target) {\n        return this.items.has(target);\n    }\n    get(target, checkSchema = false) {\n        const schema = this.items.get(target);\n        if (!schema) {\n            throw new Error(`Cannot get schema for \'${target.prototype.constructor.name}\' target`);\n        }\n        if (checkSchema && !schema.schema) {\n            throw new Error(`Schema \'${target.prototype.constructor.name}\' doesn\'t contain ASN.1 schema. Call \'AsnSchemaStorage.cache\'.`);\n        }\n        return schema;\n    }\n    cache(target) {\n        const schema = this.get(target);\n        if (!schema.schema) {\n            schema.schema = this.create(target, true);\n        }\n    }\n    createDefault(target) {\n        const schema = {\n            type: _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Sequence,\n            items: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.items = Object.assign({}, schema.items, parentSchema.items);\n        }\n        return schema;\n    }\n    create(target, useNames) {\n        const schema = this.items.get(target) || this.createDefault(target);\n        const asn1Value = [];\n        for(const key in schema.items){\n            const item = schema.items[key];\n            const name = useNames ? key : "";\n            let asn1Item;\n            if (typeof item.type === "number") {\n                const Asn1TypeName = _enums__WEBPACK_IMPORTED_MODULE_1__.AsnPropTypes[item.type];\n                const Asn1Type = asn1js__WEBPACK_IMPORTED_MODULE_0__[Asn1TypeName];\n                if (!Asn1Type) {\n                    throw new Error(`Cannot get ASN1 class by name \'${Asn1TypeName}\'`);\n                }\n                asn1Item = new Asn1Type({\n                    name\n                });\n            } else if ((0,_helper__WEBPACK_IMPORTED_MODULE_2__.isConvertible)(item.type)) {\n                const instance = new item.type();\n                asn1Item = instance.toSchema(name);\n            } else if (item.optional) {\n                const itemSchema = this.get(item.type);\n                if (itemSchema.type === _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice) {\n                    asn1Item = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                        name\n                    });\n                } else {\n                    asn1Item = this.create(item.type, false);\n                    asn1Item.name = name;\n                }\n            } else {\n                asn1Item = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                    name\n                });\n            }\n            const optional = !!item.optional || item.defaultValue !== undefined;\n            if (item.repeated) {\n                asn1Item.name = "";\n                const Container = item.repeated === "set" ? asn1js__WEBPACK_IMPORTED_MODULE_0__.Set : asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence;\n                asn1Item = new Container({\n                    name: "",\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name,\n                            value: asn1Item\n                        })\n                    ]\n                });\n            }\n            if (item.context !== null && item.context !== undefined) {\n                if (item.implicit) {\n                    if (typeof item.type === "number" || (0,_helper__WEBPACK_IMPORTED_MODULE_2__.isConvertible)(item.type)) {\n                        const Container = item.repeated ? asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed : asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive;\n                        asn1Value.push(new Container({\n                            name,\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            }\n                        }));\n                    } else {\n                        this.cache(item.type);\n                        const isRepeated = !!item.repeated;\n                        let value = !isRepeated ? this.get(item.type, true).schema : asn1Item;\n                        value = "valueBlock" in value ? value.valueBlock.value : value.value;\n                        asn1Value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: !isRepeated ? name : "",\n                            optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: item.context\n                            },\n                            value: value\n                        }));\n                    }\n                } else {\n                    asn1Value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                        optional,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: item.context\n                        },\n                        value: [\n                            asn1Item\n                        ]\n                    }));\n                }\n            } else {\n                asn1Item.optional = optional;\n                asn1Value.push(asn1Item);\n            }\n        }\n        switch(schema.type){\n            case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Sequence:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1Value,\n                    name: ""\n                });\n            case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Set:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1Value,\n                    name: ""\n                });\n            case _enums__WEBPACK_IMPORTED_MODULE_1__.AsnTypeTypes.Choice:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: asn1Value,\n                    name: ""\n                });\n            default:\n                throw new Error(`Unsupported ASN1 type in use`);\n        }\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = Object.getPrototypeOf(target);\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/schema.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js":
    /*!************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js ***!
  \************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsnSerializer: () => (/* binding */ AsnSerializer)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var _converters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./converters */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/converters.js");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enums */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/enums.js");\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helper */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/helper.js");\n/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/storage.js");\n\n\n\n\n\nclass AsnSerializer {\n    static serialize(obj) {\n        if (obj instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.BaseBlock) {\n            return obj.toBER(false);\n        }\n        return this.toASN(obj).toBER(false);\n    }\n    static toASN(obj) {\n        if (obj && typeof obj === "object" && (0,_helper__WEBPACK_IMPORTED_MODULE_3__.isConvertible)(obj)) {\n            return obj.toASN();\n        }\n        if (!(obj && typeof obj === "object")) {\n            throw new TypeError("Parameter 1 should be type of Object.");\n        }\n        const target = obj.constructor;\n        const schema = _storage__WEBPACK_IMPORTED_MODULE_4__.schemaStorage.get(target);\n        _storage__WEBPACK_IMPORTED_MODULE_4__.schemaStorage.cache(target);\n        let asn1Value = [];\n        if (schema.itemType) {\n            if (!Array.isArray(obj)) {\n                throw new TypeError("Parameter 1 should be type of Array.");\n            }\n            if (typeof schema.itemType === "number") {\n                const converter = _converters__WEBPACK_IMPORTED_MODULE_1__.defaultConverter(schema.itemType);\n                if (!converter) {\n                    throw new Error(`Cannot get default converter for array item of ${target.name} ASN1 schema`);\n                }\n                asn1Value = obj.map((o)=>converter.toASN(o));\n            } else {\n                asn1Value = obj.map((o)=>this.toAsnItem({\n                        type: schema.itemType\n                    }, "[]", target, o));\n            }\n        } else {\n            for(const key in schema.items){\n                const schemaItem = schema.items[key];\n                const objProp = obj[key];\n                if (objProp === undefined || schemaItem.defaultValue === objProp || typeof schemaItem.defaultValue === "object" && typeof objProp === "object" && (0,_helper__WEBPACK_IMPORTED_MODULE_3__.isArrayEqual)(this.serialize(schemaItem.defaultValue), this.serialize(objProp))) {\n                    continue;\n                }\n                const asn1Item = AsnSerializer.toAsnItem(schemaItem, key, target, objProp);\n                if (typeof schemaItem.context === "number") {\n                    if (schemaItem.implicit) {\n                        if (!schemaItem.repeated && (typeof schemaItem.type === "number" || (0,_helper__WEBPACK_IMPORTED_MODULE_3__.isConvertible)(schemaItem.type))) {\n                            const value = {};\n                            value.valueHex = asn1Item instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Null ? asn1Item.valueBeforeDecodeView : asn1Item.valueBlock.toBER();\n                            asn1Value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                ...value\n                            }));\n                        } else {\n                            asn1Value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                optional: schemaItem.optional,\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: schemaItem.context\n                                },\n                                value: asn1Item.valueBlock.value\n                            }));\n                        }\n                    } else {\n                        asn1Value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            optional: schemaItem.optional,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: schemaItem.context\n                            },\n                            value: [\n                                asn1Item\n                            ]\n                        }));\n                    }\n                } else if (schemaItem.repeated) {\n                    asn1Value = asn1Value.concat(asn1Item);\n                } else {\n                    asn1Value.push(asn1Item);\n                }\n            }\n        }\n        let asnSchema;\n        switch(schema.type){\n            case _enums__WEBPACK_IMPORTED_MODULE_2__.AsnTypeTypes.Sequence:\n                asnSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1Value\n                });\n                break;\n            case _enums__WEBPACK_IMPORTED_MODULE_2__.AsnTypeTypes.Set:\n                asnSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1Value\n                });\n                break;\n            case _enums__WEBPACK_IMPORTED_MODULE_2__.AsnTypeTypes.Choice:\n                if (!asn1Value[0]) {\n                    throw new Error(`Schema \'${target.name}\' has wrong data. Choice cannot be empty.`);\n                }\n                asnSchema = asn1Value[0];\n                break;\n        }\n        return asnSchema;\n    }\n    static toAsnItem(schemaItem, key, target, objProp) {\n        let asn1Item;\n        if (typeof schemaItem.type === "number") {\n            const converter = schemaItem.converter;\n            if (!converter) {\n                throw new Error(`Property \'${key}\' doesn\'t have converter for type ${_enums__WEBPACK_IMPORTED_MODULE_2__.AsnPropTypes[schemaItem.type]} in schema \'${target.name}\'`);\n            }\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError("Parameter \'objProp\' should be type of Array.");\n                }\n                const items = Array.from(objProp, (element)=>converter.toASN(element));\n                const Container = schemaItem.repeated === "sequence" ? asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence : asn1js__WEBPACK_IMPORTED_MODULE_0__.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = converter.toASN(objProp);\n            }\n        } else {\n            if (schemaItem.repeated) {\n                if (!Array.isArray(objProp)) {\n                    throw new TypeError("Parameter \'objProp\' should be type of Array.");\n                }\n                const items = Array.from(objProp, (element)=>this.toASN(element));\n                const Container = schemaItem.repeated === "sequence" ? asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence : asn1js__WEBPACK_IMPORTED_MODULE_0__.Set;\n                asn1Item = new Container({\n                    value: items\n                });\n            } else {\n                asn1Item = this.toASN(objProp);\n            }\n        }\n        return asn1Item;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/serializer.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/storage.js":
    /*!*********************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/storage.js ***!
  \*********************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   schemaStorage: () => (/* binding */ schemaStorage)\n/* harmony export */ });\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/schema.js");\n\nconst schemaStorage = new _schema__WEBPACK_IMPORTED_MODULE_0__.AsnSchemaStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvc3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUNyQyxNQUFNQyxnQkFBZ0IsSUFBSUQscURBQWdCQSxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvc3RvcmFnZS5qcz82YjFlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzblNjaGVtYVN0b3JhZ2UgfSBmcm9tIFwiLi9zY2hlbWFcIjtcbmV4cG9ydCBjb25zdCBzY2hlbWFTdG9yYWdlID0gbmV3IEFzblNjaGVtYVN0b3JhZ2UoKTtcbiJdLCJuYW1lcyI6WyJBc25TY2hlbWFTdG9yYWdlIiwic2NoZW1hU3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/storage.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js":
    /*!******************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js ***!
  \******************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitString: () => (/* binding */ BitString)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvtsutils */ "(rsc)/../node_modules/pvtsutils/build/index.es.js");\n\n\nclass BitString {\n    constructor(params, unusedBits = 0){\n        this.unusedBits = 0;\n        this.value = new ArrayBuffer(0);\n        if (params) {\n            if (typeof params === "number") {\n                this.fromNumber(params);\n            } else if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(params)) {\n                this.unusedBits = unusedBits;\n                this.value = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(params);\n            } else {\n                throw TypeError("Unsupported type of \'params\' argument for BitString");\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString)) {\n            throw new TypeError("Argument \'asn\' is not instance of ASN.1 BitString");\n        }\n        this.unusedBits = asn.valueBlock.unusedBits;\n        this.value = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n            unusedBits: this.unusedBits,\n            valueHex: this.value\n        });\n    }\n    toSchema(name) {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n            name\n        });\n    }\n    toNumber() {\n        let res = "";\n        const uintArray = new Uint8Array(this.value);\n        for (const octet of uintArray){\n            res += octet.toString(2).padStart(8, "0");\n        }\n        res = res.split("").reverse().join("");\n        if (this.unusedBits) {\n            res = res.slice(this.unusedBits).padStart(this.unusedBits, "0");\n        }\n        return parseInt(res, 2);\n    }\n    fromNumber(value) {\n        let bits = value.toString(2);\n        const octetSize = bits.length + 7 >> 3;\n        this.unusedBits = (octetSize << 3) - bits.length;\n        const octets = new Uint8Array(octetSize);\n        bits = bits.padStart(octetSize << 3, "0").split("").reverse().join("");\n        let index = 0;\n        while(index < octetSize){\n            octets[index] = parseInt(bits.slice(index << 3, (index << 3) + 8), 2);\n            index++;\n        }\n        this.value = octets.buffer;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvdHlwZXMvYml0X3N0cmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBaUM7QUFDaUI7QUFDM0MsTUFBTUU7SUFDVEMsWUFBWUMsTUFBTSxFQUFFQyxhQUFhLENBQUMsQ0FBRTtRQUNoQyxJQUFJLENBQUNBLFVBQVUsR0FBRztRQUNsQixJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJQyxZQUFZO1FBQzdCLElBQUlILFFBQVE7WUFDUixJQUFJLE9BQU9BLFdBQVcsVUFBVTtnQkFDNUIsSUFBSSxDQUFDSSxVQUFVLENBQUNKO1lBQ3BCLE9BQ0ssSUFBSUgsNERBQXFCQSxDQUFDUSxjQUFjLENBQUNMLFNBQVM7Z0JBQ25ELElBQUksQ0FBQ0MsVUFBVSxHQUFHQTtnQkFDbEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdMLDREQUFxQkEsQ0FBQ1MsYUFBYSxDQUFDTjtZQUNyRCxPQUNLO2dCQUNELE1BQU1PLFVBQVU7WUFDcEI7UUFDSjtJQUNKO0lBQ0FDLFFBQVFDLEdBQUcsRUFBRTtRQUNULElBQUksQ0FBRUEsQ0FBQUEsZUFBZWIsNkNBQWdCLEdBQUc7WUFDcEMsTUFBTSxJQUFJVyxVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDTixVQUFVLEdBQUdRLElBQUlDLFVBQVUsQ0FBQ1QsVUFBVTtRQUMzQyxJQUFJLENBQUNDLEtBQUssR0FBR08sSUFBSUMsVUFBVSxDQUFDQyxRQUFRO1FBQ3BDLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLFFBQVE7UUFDSixPQUFPLElBQUloQiw2Q0FBZ0IsQ0FBQztZQUFFSyxZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUFFVSxVQUFVLElBQUksQ0FBQ1QsS0FBSztRQUFDO0lBQ3BGO0lBQ0FXLFNBQVNDLElBQUksRUFBRTtRQUNYLE9BQU8sSUFBSWxCLDZDQUFnQixDQUFDO1lBQUVrQjtRQUFLO0lBQ3ZDO0lBQ0FDLFdBQVc7UUFDUCxJQUFJQyxNQUFNO1FBQ1YsTUFBTUMsWUFBWSxJQUFJQyxXQUFXLElBQUksQ0FBQ2hCLEtBQUs7UUFDM0MsS0FBSyxNQUFNaUIsU0FBU0YsVUFBVztZQUMzQkQsT0FBT0csTUFBTUMsUUFBUSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQ3pDO1FBQ0FMLE1BQU1BLElBQUlNLEtBQUssQ0FBQyxJQUFJQyxPQUFPLEdBQUdDLElBQUksQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQ3ZCLFVBQVUsRUFBRTtZQUNqQmUsTUFBTUEsSUFBSVMsS0FBSyxDQUFDLElBQUksQ0FBQ3hCLFVBQVUsRUFBRW9CLFFBQVEsQ0FBQyxJQUFJLENBQUNwQixVQUFVLEVBQUU7UUFDL0Q7UUFDQSxPQUFPeUIsU0FBU1YsS0FBSztJQUN6QjtJQUNBWixXQUFXRixLQUFLLEVBQUU7UUFDZCxJQUFJeUIsT0FBT3pCLE1BQU1rQixRQUFRLENBQUM7UUFDMUIsTUFBTVEsWUFBWSxLQUFNQyxNQUFNLEdBQUcsS0FBTTtRQUN2QyxJQUFJLENBQUM1QixVQUFVLEdBQUcsQ0FBQzJCLGFBQWEsS0FBS0QsS0FBS0UsTUFBTTtRQUNoRCxNQUFNQyxTQUFTLElBQUlaLFdBQVdVO1FBQzlCRCxPQUFPQSxLQUFLTixRQUFRLENBQUNPLGFBQWEsR0FBRyxLQUFLTixLQUFLLENBQUMsSUFBSUMsT0FBTyxHQUFHQyxJQUFJLENBQUM7UUFDbkUsSUFBSU8sUUFBUTtRQUNaLE1BQU9BLFFBQVFILFVBQVc7WUFDdEJFLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHTCxTQUFTQyxLQUFLRixLQUFLLENBQUNNLFNBQVMsR0FBRyxDQUFDQSxTQUFTLEtBQUssSUFBSTtZQUNuRUE7UUFDSjtRQUNBLElBQUksQ0FBQzdCLEtBQUssR0FBRzRCLE9BQU9FLE1BQU07SUFDOUI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhY2todWJiLy4uL25vZGVfbW9kdWxlcy9AcGVjdWxpYXIvYXNuMS1zY2hlbWEvYnVpbGQvZXMyMDE1L3R5cGVzL2JpdF9zdHJpbmcuanM/MGI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc24xanMgZnJvbSBcImFzbjFqc1wiO1xuaW1wb3J0IHsgQnVmZmVyU291cmNlQ29udmVydGVyIH0gZnJvbSBcInB2dHN1dGlsc1wiO1xuZXhwb3J0IGNsYXNzIEJpdFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCB1bnVzZWRCaXRzID0gMCkge1xuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSAwO1xuICAgICAgICB0aGlzLnZhbHVlID0gbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZnJvbU51bWJlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQnVmZmVyU291cmNlQ29udmVydGVyLmlzQnVmZmVyU291cmNlKHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSB1bnVzZWRCaXRzO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBCdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9BcnJheUJ1ZmZlcihwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZSBvZiAncGFyYW1zJyBhcmd1bWVudCBmb3IgQml0U3RyaW5nXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21BU04oYXNuKSB7XG4gICAgICAgIGlmICghKGFzbiBpbnN0YW5jZW9mIGFzbjFqcy5CaXRTdHJpbmcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgJ2FzbicgaXMgbm90IGluc3RhbmNlIG9mIEFTTi4xIEJpdFN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVudXNlZEJpdHMgPSBhc24udmFsdWVCbG9jay51bnVzZWRCaXRzO1xuICAgICAgICB0aGlzLnZhbHVlID0gYXNuLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b0FTTigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuQml0U3RyaW5nKHsgdW51c2VkQml0czogdGhpcy51bnVzZWRCaXRzLCB2YWx1ZUhleDogdGhpcy52YWx1ZSB9KTtcbiAgICB9XG4gICAgdG9TY2hlbWEobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IGFzbjFqcy5CaXRTdHJpbmcoeyBuYW1lIH0pO1xuICAgIH1cbiAgICB0b051bWJlcigpIHtcbiAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHVpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMudmFsdWUpO1xuICAgICAgICBmb3IgKGNvbnN0IG9jdGV0IG9mIHVpbnRBcnJheSkge1xuICAgICAgICAgICAgcmVzICs9IG9jdGV0LnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDgsIFwiMFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSByZXMuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG4gICAgICAgIGlmICh0aGlzLnVudXNlZEJpdHMpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5zbGljZSh0aGlzLnVudXNlZEJpdHMpLnBhZFN0YXJ0KHRoaXMudW51c2VkQml0cywgXCIwXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUludChyZXMsIDIpO1xuICAgIH1cbiAgICBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgICAgIGxldCBiaXRzID0gdmFsdWUudG9TdHJpbmcoMik7XG4gICAgICAgIGNvbnN0IG9jdGV0U2l6ZSA9IChiaXRzLmxlbmd0aCArIDcpID4+IDM7XG4gICAgICAgIHRoaXMudW51c2VkQml0cyA9IChvY3RldFNpemUgPDwgMykgLSBiaXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb2N0ZXRzID0gbmV3IFVpbnQ4QXJyYXkob2N0ZXRTaXplKTtcbiAgICAgICAgYml0cyA9IGJpdHMucGFkU3RhcnQob2N0ZXRTaXplIDw8IDMsIFwiMFwiKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgb2N0ZXRTaXplKSB7XG4gICAgICAgICAgICBvY3RldHNbaW5kZXhdID0gcGFyc2VJbnQoYml0cy5zbGljZShpbmRleCA8PCAzLCAoaW5kZXggPDwgMykgKyA4KSwgMik7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWUgPSBvY3RldHMuYnVmZmVyO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJhc24xanMiLCJCdWZmZXJTb3VyY2VDb252ZXJ0ZXIiLCJCaXRTdHJpbmciLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsInVudXNlZEJpdHMiLCJ2YWx1ZSIsIkFycmF5QnVmZmVyIiwiZnJvbU51bWJlciIsImlzQnVmZmVyU291cmNlIiwidG9BcnJheUJ1ZmZlciIsIlR5cGVFcnJvciIsImZyb21BU04iLCJhc24iLCJ2YWx1ZUJsb2NrIiwidmFsdWVIZXgiLCJ0b0FTTiIsInRvU2NoZW1hIiwibmFtZSIsInRvTnVtYmVyIiwicmVzIiwidWludEFycmF5IiwiVWludDhBcnJheSIsIm9jdGV0IiwidG9TdHJpbmciLCJwYWRTdGFydCIsInNwbGl0IiwicmV2ZXJzZSIsImpvaW4iLCJzbGljZSIsInBhcnNlSW50IiwiYml0cyIsIm9jdGV0U2l6ZSIsImxlbmd0aCIsIm9jdGV0cyIsImluZGV4IiwiYnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/index.js":
    /*!*************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/types/index.js ***!
  \*************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitString: () => (/* reexport safe */ _bit_string__WEBPACK_IMPORTED_MODULE_0__.BitString),\n/* harmony export */   OctetString: () => (/* reexport safe */ _octet_string__WEBPACK_IMPORTED_MODULE_1__.OctetString)\n/* harmony export */ });\n/* harmony import */ var _bit_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit_string */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/bit_string.js");\n/* harmony import */ var _octet_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./octet_string */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/octet_string.js");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvdHlwZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2QjtBQUNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvdHlwZXMvaW5kZXguanM/MzVhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9iaXRfc3RyaW5nXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9vY3RldF9zdHJpbmdcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/index.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/octet_string.js":
    /*!********************************************************************************!*\
  !*** ../node_modules/@peculiar/asn1-schema/build/es2015/types/octet_string.js ***!
  \********************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OctetString: () => (/* binding */ OctetString)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ "(rsc)/../node_modules/asn1js/build/index.es.js");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvtsutils */ "(rsc)/../node_modules/pvtsutils/build/index.es.js");\n\n\nclass OctetString {\n    get byteLength() {\n        return this.buffer.byteLength;\n    }\n    get byteOffset() {\n        return 0;\n    }\n    constructor(param){\n        if (typeof param === "number") {\n            this.buffer = new ArrayBuffer(param);\n        } else {\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(param)) {\n                this.buffer = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(param);\n            } else if (Array.isArray(param)) {\n                this.buffer = new Uint8Array(param);\n            } else {\n                this.buffer = new ArrayBuffer(0);\n            }\n        }\n    }\n    fromASN(asn) {\n        if (!(asn instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString)) {\n            throw new TypeError("Argument \'asn\' is not instance of ASN.1 OctetString");\n        }\n        this.buffer = asn.valueBlock.valueHex;\n        return this;\n    }\n    toASN() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n            valueHex: this.buffer\n        });\n    }\n    toSchema(name) {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n            name\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL0BwZWN1bGlhci9hc24xLXNjaGVtYS9idWlsZC9lczIwMTUvdHlwZXMvb2N0ZXRfc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpQztBQUNpQjtBQUMzQyxNQUFNRTtJQUNULElBQUlDLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQ0MsTUFBTSxDQUFDRCxVQUFVO0lBQ2pDO0lBQ0EsSUFBSUUsYUFBYTtRQUNiLE9BQU87SUFDWDtJQUNBQyxZQUFZQyxLQUFLLENBQUU7UUFDZixJQUFJLE9BQU9BLFVBQVUsVUFBVTtZQUMzQixJQUFJLENBQUNILE1BQU0sR0FBRyxJQUFJSSxZQUFZRDtRQUNsQyxPQUNLO1lBQ0QsSUFBSU4sNERBQXFCQSxDQUFDUSxjQUFjLENBQUNGLFFBQVE7Z0JBQzdDLElBQUksQ0FBQ0gsTUFBTSxHQUFHSCw0REFBcUJBLENBQUNTLGFBQWEsQ0FBQ0g7WUFDdEQsT0FDSyxJQUFJSSxNQUFNQyxPQUFPLENBQUNMLFFBQVE7Z0JBQzNCLElBQUksQ0FBQ0gsTUFBTSxHQUFHLElBQUlTLFdBQVdOO1lBQ2pDLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDSCxNQUFNLEdBQUcsSUFBSUksWUFBWTtZQUNsQztRQUNKO0lBQ0o7SUFDQU0sUUFBUUMsR0FBRyxFQUFFO1FBQ1QsSUFBSSxDQUFFQSxDQUFBQSxlQUFlZiwrQ0FBa0IsR0FBRztZQUN0QyxNQUFNLElBQUlnQixVQUFVO1FBQ3hCO1FBQ0EsSUFBSSxDQUFDWixNQUFNLEdBQUdXLElBQUlFLFVBQVUsQ0FBQ0MsUUFBUTtRQUNyQyxPQUFPLElBQUk7SUFDZjtJQUNBQyxRQUFRO1FBQ0osT0FBTyxJQUFJbkIsK0NBQWtCLENBQUM7WUFBRWtCLFVBQVUsSUFBSSxDQUFDZCxNQUFNO1FBQUM7SUFDMUQ7SUFDQWdCLFNBQVNDLElBQUksRUFBRTtRQUNYLE9BQU8sSUFBSXJCLCtDQUFrQixDQUFDO1lBQUVxQjtRQUFLO0lBQ3pDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvQHBlY3VsaWFyL2FzbjEtc2NoZW1hL2J1aWxkL2VzMjAxNS90eXBlcy9vY3RldF9zdHJpbmcuanM/MTEyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc24xanMgZnJvbSBcImFzbjFqc1wiO1xuaW1wb3J0IHsgQnVmZmVyU291cmNlQ29udmVydGVyIH0gZnJvbSBcInB2dHN1dGlsc1wiO1xuZXhwb3J0IGNsYXNzIE9jdGV0U3RyaW5nIHtcbiAgICBnZXQgYnl0ZUxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGdldCBieXRlT2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyYW0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIocGFyYW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKEJ1ZmZlclNvdXJjZUNvbnZlcnRlci5pc0J1ZmZlclNvdXJjZShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b0FycmF5QnVmZmVyKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheShwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tQVNOKGFzbikge1xuICAgICAgICBpZiAoIShhc24gaW5zdGFuY2VvZiBhc24xanMuT2N0ZXRTdHJpbmcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgJ2FzbicgaXMgbm90IGluc3RhbmNlIG9mIEFTTi4xIE9jdGV0U3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYXNuLnZhbHVlQmxvY2sudmFsdWVIZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB0b0FTTigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuT2N0ZXRTdHJpbmcoeyB2YWx1ZUhleDogdGhpcy5idWZmZXIgfSk7XG4gICAgfVxuICAgIHRvU2NoZW1hKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBhc24xanMuT2N0ZXRTdHJpbmcoeyBuYW1lIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJhc24xanMiLCJCdWZmZXJTb3VyY2VDb252ZXJ0ZXIiLCJPY3RldFN0cmluZyIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiY29uc3RydWN0b3IiLCJwYXJhbSIsIkFycmF5QnVmZmVyIiwiaXNCdWZmZXJTb3VyY2UiLCJ0b0FycmF5QnVmZmVyIiwiQXJyYXkiLCJpc0FycmF5IiwiVWludDhBcnJheSIsImZyb21BU04iLCJhc24iLCJUeXBlRXJyb3IiLCJ2YWx1ZUJsb2NrIiwidmFsdWVIZXgiLCJ0b0FTTiIsInRvU2NoZW1hIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/types/octet_string.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/json-schema/build/index.es.js":
    /*!***************************************************************!*\
  !*** ../node_modules/@peculiar/json-schema/build/index.es.js ***!
  \***************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonError: () => (/* binding */ JsonError),\n/* harmony export */   JsonParser: () => (/* binding */ JsonParser),\n/* harmony export */   JsonProp: () => (/* binding */ JsonProp),\n/* harmony export */   JsonPropTypes: () => (/* binding */ JsonPropTypes),\n/* harmony export */   JsonSerializer: () => (/* binding */ JsonSerializer),\n/* harmony export */   KeyError: () => (/* binding */ KeyError),\n/* harmony export */   ParserError: () => (/* binding */ ParserError),\n/* harmony export */   SerializerError: () => (/* binding */ SerializerError),\n/* harmony export */   TransformError: () => (/* binding */ TransformError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError)\n/* harmony export */ });\n/**\n * Copyright (c) 2020, Peculiar Ventures, All rights reserved.\n */ class JsonError extends Error {\n    constructor(message, innerError){\n        super(innerError ? `${message}. See the inner exception for more details.` : message);\n        this.message = message;\n        this.innerError = innerError;\n    }\n}\nclass TransformError extends JsonError {\n    constructor(schema, message, innerError){\n        super(message, innerError);\n        this.schema = schema;\n    }\n}\nclass ParserError extends TransformError {\n    constructor(schema, message, innerError){\n        super(schema, `JSON doesn\'t match to \'${schema.target.name}\' schema. ${message}`, innerError);\n    }\n}\nclass ValidationError extends JsonError {\n}\nclass SerializerError extends JsonError {\n    constructor(schemaName, message, innerError){\n        super(`Cannot serialize by \'${schemaName}\' schema. ${message}`, innerError);\n        this.schemaName = schemaName;\n    }\n}\nclass KeyError extends ParserError {\n    constructor(schema, keys, errors = {}){\n        super(schema, "Some keys doesn\'t match to schema");\n        this.keys = keys;\n        this.errors = errors;\n    }\n}\nvar JsonPropTypes;\n(function(JsonPropTypes) {\n    JsonPropTypes[JsonPropTypes["Any"] = 0] = "Any";\n    JsonPropTypes[JsonPropTypes["Boolean"] = 1] = "Boolean";\n    JsonPropTypes[JsonPropTypes["Number"] = 2] = "Number";\n    JsonPropTypes[JsonPropTypes["String"] = 3] = "String";\n})(JsonPropTypes || (JsonPropTypes = {}));\nfunction checkType(value, type) {\n    switch(type){\n        case JsonPropTypes.Boolean:\n            return typeof value === "boolean";\n        case JsonPropTypes.Number:\n            return typeof value === "number";\n        case JsonPropTypes.String:\n            return typeof value === "string";\n    }\n    return true;\n}\nfunction throwIfTypeIsWrong(value, type) {\n    if (!checkType(value, type)) {\n        throw new TypeError(`Value must be ${JsonPropTypes[type]}`);\n    }\n}\nfunction isConvertible(target) {\n    if (target && target.prototype) {\n        if (target.prototype.toJSON && target.prototype.fromJSON) {\n            return true;\n        } else {\n            return isConvertible(target.prototype);\n        }\n    } else {\n        return !!(target && target.toJSON && target.fromJSON);\n    }\n}\nclass JsonSchemaStorage {\n    constructor(){\n        this.items = new Map();\n    }\n    has(target) {\n        return this.items.has(target) || !!this.findParentSchema(target);\n    }\n    get(target) {\n        const schema = this.items.get(target) || this.findParentSchema(target);\n        if (!schema) {\n            throw new Error("Cannot get schema for current target");\n        }\n        return schema;\n    }\n    create(target) {\n        const schema = {\n            names: {}\n        };\n        const parentSchema = this.findParentSchema(target);\n        if (parentSchema) {\n            Object.assign(schema, parentSchema);\n            schema.names = {};\n            for(const name in parentSchema.names){\n                schema.names[name] = Object.assign({}, parentSchema.names[name]);\n            }\n        }\n        schema.target = target;\n        return schema;\n    }\n    set(target, schema) {\n        this.items.set(target, schema);\n        return this;\n    }\n    findParentSchema(target) {\n        const parent = target.__proto__;\n        if (parent) {\n            const schema = this.items.get(parent);\n            return schema || this.findParentSchema(parent);\n        }\n        return null;\n    }\n}\nconst DEFAULT_SCHEMA = "default";\nconst schemaStorage = new JsonSchemaStorage();\nclass PatternValidation {\n    constructor(pattern){\n        this.pattern = new RegExp(pattern);\n    }\n    validate(value) {\n        const pattern = new RegExp(this.pattern.source, this.pattern.flags);\n        if (typeof value !== "string") {\n            throw new ValidationError("Incoming value must be string");\n        }\n        if (!pattern.exec(value)) {\n            throw new ValidationError(`Value doesn\'t match to pattern \'${pattern.toString()}\'`);\n        }\n    }\n}\nclass InclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, JsonPropTypes.Number);\n        if (!(this.min <= value && value <= this.max)) {\n            const min = this.min === Number.MIN_VALUE ? "MIN" : this.min;\n            const max = this.max === Number.MAX_VALUE ? "MAX" : this.max;\n            throw new ValidationError(`Value doesn\'t match to diapason [${min},${max}]`);\n        }\n    }\n}\nclass ExclusiveValidation {\n    constructor(min = Number.MIN_VALUE, max = Number.MAX_VALUE){\n        this.min = min;\n        this.max = max;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, JsonPropTypes.Number);\n        if (!(this.min < value && value < this.max)) {\n            const min = this.min === Number.MIN_VALUE ? "MIN" : this.min;\n            const max = this.max === Number.MAX_VALUE ? "MAX" : this.max;\n            throw new ValidationError(`Value doesn\'t match to diapason (${min},${max})`);\n        }\n    }\n}\nclass LengthValidation {\n    constructor(length, minLength, maxLength){\n        this.length = length;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n    }\n    validate(value) {\n        if (this.length !== undefined) {\n            if (value.length !== this.length) {\n                throw new ValidationError(`Value length must be exactly ${this.length}.`);\n            }\n            return;\n        }\n        if (this.minLength !== undefined) {\n            if (value.length < this.minLength) {\n                throw new ValidationError(`Value length must be more than ${this.minLength}.`);\n            }\n        }\n        if (this.maxLength !== undefined) {\n            if (value.length > this.maxLength) {\n                throw new ValidationError(`Value length must be less than ${this.maxLength}.`);\n            }\n        }\n    }\n}\nclass EnumerationValidation {\n    constructor(enumeration){\n        this.enumeration = enumeration;\n    }\n    validate(value) {\n        throwIfTypeIsWrong(value, JsonPropTypes.String);\n        if (!this.enumeration.includes(value)) {\n            throw new ValidationError(`Value must be one of ${this.enumeration.map((v)=>`\'${v}\'`).join(", ")}`);\n        }\n    }\n}\nclass JsonTransform {\n    static checkValues(data, schemaItem) {\n        const values = Array.isArray(data) ? data : [\n            data\n        ];\n        for (const value of values){\n            for (const validation of schemaItem.validations){\n                if (validation instanceof LengthValidation && schemaItem.repeated) {\n                    validation.validate(data);\n                } else {\n                    validation.validate(value);\n                }\n            }\n        }\n    }\n    static checkTypes(value, schemaItem) {\n        if (schemaItem.repeated && !Array.isArray(value)) {\n            throw new TypeError("Value must be Array");\n        }\n        if (typeof schemaItem.type === "number") {\n            const values = Array.isArray(value) ? value : [\n                value\n            ];\n            for (const v of values){\n                throwIfTypeIsWrong(v, schemaItem.type);\n            }\n        }\n    }\n    static getSchemaByName(schema, name = DEFAULT_SCHEMA) {\n        return {\n            ...schema.names[DEFAULT_SCHEMA],\n            ...schema.names[name]\n        };\n    }\n}\nclass JsonSerializer extends JsonTransform {\n    static serialize(obj, options, replacer, space) {\n        const json = this.toJSON(obj, options);\n        return JSON.stringify(json, replacer, space);\n    }\n    static toJSON(obj, options = {}) {\n        let res;\n        let targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        if (isConvertible(obj)) {\n            return obj.toJSON();\n        }\n        if (Array.isArray(obj)) {\n            res = [];\n            for (const item of obj){\n                res.push(this.toJSON(item, options));\n            }\n        } else if (typeof obj === "object") {\n            if (targetSchema && !schemaStorage.has(targetSchema)) {\n                throw new JsonError("Cannot get schema for `targetSchema` param");\n            }\n            targetSchema = targetSchema || obj.constructor;\n            if (schemaStorage.has(targetSchema)) {\n                const schema = schemaStorage.get(targetSchema);\n                res = {};\n                const namedSchema = this.getSchemaByName(schema, schemaName);\n                for(const key in namedSchema){\n                    try {\n                        const item = namedSchema[key];\n                        const objItem = obj[key];\n                        let value;\n                        if (item.optional && objItem === undefined || item.defaultValue !== undefined && objItem === item.defaultValue) {\n                            continue;\n                        }\n                        if (!item.optional && objItem === undefined) {\n                            throw new SerializerError(targetSchema.name, `Property \'${key}\' is required.`);\n                        }\n                        if (typeof item.type === "number") {\n                            if (item.converter) {\n                                if (item.repeated) {\n                                    value = objItem.map((el)=>item.converter.toJSON(el, obj));\n                                } else {\n                                    value = item.converter.toJSON(objItem, obj);\n                                }\n                            } else {\n                                value = objItem;\n                            }\n                        } else {\n                            if (item.repeated) {\n                                value = objItem.map((el)=>this.toJSON(el, {\n                                        schemaName\n                                    }));\n                            } else {\n                                value = this.toJSON(objItem, {\n                                    schemaName\n                                });\n                            }\n                        }\n                        this.checkTypes(value, item);\n                        this.checkValues(value, item);\n                        res[item.name || key] = value;\n                    } catch (e) {\n                        if (e instanceof SerializerError) {\n                            throw e;\n                        } else {\n                            throw new SerializerError(schema.target.name, `Property \'${key}\' is wrong. ${e.message}`, e);\n                        }\n                    }\n                }\n            } else {\n                res = {};\n                for(const key in obj){\n                    res[key] = this.toJSON(obj[key], {\n                        schemaName\n                    });\n                }\n            }\n        } else {\n            res = obj;\n        }\n        return res;\n    }\n}\nclass JsonParser extends JsonTransform {\n    static parse(data, options) {\n        const obj = JSON.parse(data);\n        return this.fromJSON(obj, options);\n    }\n    static fromJSON(target, options) {\n        const targetSchema = options.targetSchema;\n        const schemaName = options.schemaName || DEFAULT_SCHEMA;\n        const obj = new targetSchema();\n        if (isConvertible(obj)) {\n            return obj.fromJSON(target);\n        }\n        const schema = schemaStorage.get(targetSchema);\n        const namedSchema = this.getSchemaByName(schema, schemaName);\n        const keyErrors = {};\n        if (options.strictProperty && !Array.isArray(target)) {\n            JsonParser.checkStrictProperty(target, namedSchema, schema);\n        }\n        for(const key in namedSchema){\n            try {\n                const item = namedSchema[key];\n                const name = item.name || key;\n                const value = target[name];\n                if (value === undefined && (item.optional || item.defaultValue !== undefined)) {\n                    continue;\n                }\n                if (!item.optional && value === undefined) {\n                    throw new ParserError(schema, `Property \'${name}\' is required.`);\n                }\n                this.checkTypes(value, item);\n                this.checkValues(value, item);\n                if (typeof item.type === "number") {\n                    if (item.converter) {\n                        if (item.repeated) {\n                            obj[key] = value.map((el)=>item.converter.fromJSON(el, obj));\n                        } else {\n                            obj[key] = item.converter.fromJSON(value, obj);\n                        }\n                    } else {\n                        obj[key] = value;\n                    }\n                } else {\n                    const newOptions = {\n                        ...options,\n                        targetSchema: item.type,\n                        schemaName\n                    };\n                    if (item.repeated) {\n                        obj[key] = value.map((el)=>this.fromJSON(el, newOptions));\n                    } else {\n                        obj[key] = this.fromJSON(value, newOptions);\n                    }\n                }\n            } catch (e) {\n                if (!(e instanceof ParserError)) {\n                    e = new ParserError(schema, `Property \'${key}\' is wrong. ${e.message}`, e);\n                }\n                if (options.strictAllKeys) {\n                    keyErrors[key] = e;\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const keys = Object.keys(keyErrors);\n        if (keys.length) {\n            throw new KeyError(schema, keys, keyErrors);\n        }\n        return obj;\n    }\n    static checkStrictProperty(target, namedSchema, schema) {\n        const jsonProps = Object.keys(target);\n        const schemaProps = Object.keys(namedSchema);\n        const keys = [];\n        for (const key of jsonProps){\n            if (schemaProps.indexOf(key) === -1) {\n                keys.push(key);\n            }\n        }\n        if (keys.length) {\n            throw new KeyError(schema, keys);\n        }\n    }\n}\nfunction getValidations(item) {\n    const validations = [];\n    if (item.pattern) {\n        validations.push(new PatternValidation(item.pattern));\n    }\n    if (item.type === JsonPropTypes.Number || item.type === JsonPropTypes.Any) {\n        if (item.minInclusive !== undefined || item.maxInclusive !== undefined) {\n            validations.push(new InclusiveValidation(item.minInclusive, item.maxInclusive));\n        }\n        if (item.minExclusive !== undefined || item.maxExclusive !== undefined) {\n            validations.push(new ExclusiveValidation(item.minExclusive, item.maxExclusive));\n        }\n        if (item.enumeration !== undefined) {\n            validations.push(new EnumerationValidation(item.enumeration));\n        }\n    }\n    if (item.type === JsonPropTypes.String || item.repeated || item.type === JsonPropTypes.Any) {\n        if (item.length !== undefined || item.minLength !== undefined || item.maxLength !== undefined) {\n            validations.push(new LengthValidation(item.length, item.minLength, item.maxLength));\n        }\n    }\n    return validations;\n}\nconst JsonProp = (options = {})=>(target, propertyKey)=>{\n        const errorMessage = `Cannot set type for ${propertyKey} property of ${target.constructor.name} schema`;\n        let schema;\n        if (!schemaStorage.has(target.constructor)) {\n            schema = schemaStorage.create(target.constructor);\n            schemaStorage.set(target.constructor, schema);\n        } else {\n            schema = schemaStorage.get(target.constructor);\n            if (schema.target !== target.constructor) {\n                schema = schemaStorage.create(target.constructor);\n                schemaStorage.set(target.constructor, schema);\n            }\n        }\n        const defaultSchema = {\n            type: JsonPropTypes.Any,\n            validations: []\n        };\n        const copyOptions = Object.assign(defaultSchema, options);\n        copyOptions.validations = getValidations(copyOptions);\n        if (typeof copyOptions.type !== "number") {\n            if (!schemaStorage.has(copyOptions.type) && !isConvertible(copyOptions.type)) {\n                throw new Error(`${errorMessage}. Assigning type doesn\'t have schema.`);\n            }\n        }\n        let schemaNames;\n        if (Array.isArray(options.schema)) {\n            schemaNames = options.schema;\n        } else {\n            schemaNames = [\n                options.schema || DEFAULT_SCHEMA\n            ];\n        }\n        for (const schemaName of schemaNames){\n            if (!schema.names[schemaName]) {\n                schema.names[schemaName] = {};\n            }\n            const namedSchema = schema.names[schemaName];\n            namedSchema[propertyKey] = copyOptions;\n        }\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/json-schema/build/index.es.js\n',
      );

      /***/
    },

  /***/ "(rsc)/../node_modules/@peculiar/webcrypto/build/webcrypto.es.js":
    /*!*****************************************************************!*\
  !*** ../node_modules/@peculiar/webcrypto/build/webcrypto.es.js ***!
  \*****************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Crypto: () => (/* binding */ Crypto),\n/* harmony export */   CryptoKey: () => (/* reexport safe */ webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoKey)\n/* harmony export */ });\n/* harmony import */ var webcrypto_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webcrypto-core */ "(rsc)/../node_modules/webcrypto-core/build/webcrypto-core.es.js");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ "crypto");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! process */ "process");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(process__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ "(rsc)/../node_modules/tslib/tslib.es6.mjs");\n/* harmony import */ var _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @peculiar/json-schema */ "(rsc)/../node_modules/@peculiar/json-schema/build/index.es.js");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pvtsutils */ "(rsc)/../node_modules/pvtsutils/build/index.es.js");\n/* harmony import */ var _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @peculiar/asn1-schema */ "(rsc)/../node_modules/@peculiar/asn1-schema/build/es2015/index.js");\n/*!\n Copyright (c) Peculiar Ventures, LLC\n*/ \n\n\n\n\n\n\n\n\n\nconst JsonBase64UrlConverter = {\n    fromJSON: (value)=>Buffer.from(pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.FromBase64Url(value)),\n    toJSON: (value)=>pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.ToBase64Url(value)\n};\nclass CryptoKey extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.data = Buffer.alloc(0);\n        this.algorithm = {\n            name: ""\n        };\n        this.extractable = false;\n        this.type = "secret";\n        this.usages = [];\n        this.kty = "oct";\n        this.alg = "";\n    }\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        name: "ext",\n        type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonPropTypes.Boolean,\n        optional: true\n    })\n], CryptoKey.prototype, "extractable", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        name: "key_ops",\n        type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonPropTypes.String,\n        repeated: true,\n        optional: true\n    })\n], CryptoKey.prototype, "usages", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonPropTypes.String\n    })\n], CryptoKey.prototype, "kty", void 0);\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        type: _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonPropTypes.String,\n        optional: true\n    })\n], CryptoKey.prototype, "alg", void 0);\nclass SymmetricKey extends CryptoKey {\n    constructor(){\n        super(...arguments);\n        this.kty = "oct";\n        this.type = "secret";\n    }\n}\nclass AsymmetricKey extends CryptoKey {\n}\nclass AesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case "AES-CBC":\n                return `A${this.algorithm.length}CBC`;\n            case "AES-CTR":\n                return `A${this.algorithm.length}CTR`;\n            case "AES-GCM":\n                return `A${this.algorithm.length}GCM`;\n            case "AES-KW":\n                return `A${this.algorithm.length}KW`;\n            case "AES-CMAC":\n                return `A${this.algorithm.length}CMAC`;\n            case "AES-ECB":\n                return `A${this.algorithm.length}ECB`;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AlgorithmError("Unsupported algorithm name");\n        }\n    }\n    set alg(value) {}\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        name: "k",\n        converter: JsonBase64UrlConverter\n    })\n], AesCryptoKey.prototype, "data", void 0);\nconst keyStorage = new WeakMap();\nfunction getCryptoKey(key) {\n    const res = keyStorage.get(key);\n    if (!res) {\n        throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("Cannot get CryptoKey from secure storage");\n    }\n    return res;\n}\nfunction setCryptoKey(value) {\n    const key = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoKey.create(value.algorithm, value.type, value.extractable, value.usages);\n    Object.freeze(key);\n    keyStorage.set(key, value);\n    return key;\n}\nclass AesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new AesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto__WEBPACK_IMPORTED_MODULE_1___default().randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error("key: Is not AesCryptoKey");\n        }\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key);\n            case "raw":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case "jwk":\n                key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                    targetSchema: AesCryptoKey\n                });\n                break;\n            case "raw":\n                key = new AesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n        key.algorithm = algorithm;\n        key.algorithm.length = key.data.length << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        switch(key.algorithm.length){\n            case 128:\n            case 192:\n            case 256:\n                break;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("keyData: Is wrong key length");\n        }\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "AES-CBC":\n                return this.encryptAesCBC(algorithm, key, Buffer.from(data));\n            case "AES-CTR":\n                return this.encryptAesCTR(algorithm, key, Buffer.from(data));\n            case "AES-GCM":\n                return this.encryptAesGCM(algorithm, key, Buffer.from(data));\n            case "AES-KW":\n                return this.encryptAesKW(algorithm, key, Buffer.from(data));\n            case "AES-ECB":\n                return this.encryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof AesCryptoKey)) {\n            throw new Error("key: Is not AesCryptoKey");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case "AES-CBC":\n                return this.decryptAesCBC(algorithm, key, Buffer.from(data));\n            case "AES-CTR":\n                return this.decryptAesCTR(algorithm, key, Buffer.from(data));\n            case "AES-GCM":\n                return this.decryptAesGCM(algorithm, key, Buffer.from(data));\n            case "AES-KW":\n                return this.decryptAesKW(algorithm, key, Buffer.from(data));\n            case "AES-ECB":\n                return this.decryptAesECB(algorithm, key, Buffer.from(data));\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async encryptAesCBC(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCBC(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`aes-${key.algorithm.length}-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesCTR(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`aes-${key.algorithm.length}-ctr`, key.data, Buffer.from(algorithm.counter));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesCTR(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`aes-${key.algorithm.length}-ctr`, key.data, new Uint8Array(algorithm.counter));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesGCM(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`aes-${key.algorithm.length}-gcm`, key.data, Buffer.from(algorithm.iv), {\n            authTagLength: (algorithm.tagLength || 128) >> 3\n        });\n        if (algorithm.additionalData) {\n            cipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final(),\n            cipher.getAuthTag()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesGCM(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`aes-${key.algorithm.length}-gcm`, key.data, new Uint8Array(algorithm.iv));\n        const tagLength = (algorithm.tagLength || 128) >> 3;\n        const enc = data.slice(0, data.length - tagLength);\n        const tag = data.slice(data.length - tagLength);\n        if (algorithm.additionalData) {\n            decipher.setAAD(Buffer.from(algorithm.additionalData));\n        }\n        decipher.setAuthTag(tag);\n        let dec = decipher.update(enc);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesKW(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        return new Uint8Array(enc).buffer;\n    }\n    static async decryptAesKW(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`id-aes${key.algorithm.length}-wrap`, key.data, this.AES_KW_IV);\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptAesECB(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptAesECB(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`aes-${key.algorithm.length}-ecb`, key.data, new Uint8Array(0));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nAesCrypto.AES_KW_IV = Buffer.from("A6A6A6A6A6A6A6A6", "hex");\nclass AesCbcProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesCbcProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nconst zero = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n]);\nconst rb = Buffer.from([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    135\n]);\nconst blockSize = 16;\nfunction bitShiftLeft(buffer) {\n    const shifted = Buffer.alloc(buffer.length);\n    const last = buffer.length - 1;\n    for(let index = 0; index < last; index++){\n        shifted[index] = buffer[index] << 1;\n        if (buffer[index + 1] & 0x80) {\n            shifted[index] += 0x01;\n        }\n    }\n    shifted[last] = buffer[last] << 1;\n    return shifted;\n}\nfunction xor(a, b) {\n    const length = Math.min(a.length, b.length);\n    const output = Buffer.alloc(length);\n    for(let index = 0; index < length; index++){\n        output[index] = a[index] ^ b[index];\n    }\n    return output;\n}\nfunction aes(key, message) {\n    const cipher = crypto__WEBPACK_IMPORTED_MODULE_1__.createCipheriv(`aes${key.length << 3}`, key, zero);\n    const result = cipher.update(message);\n    cipher.final();\n    return result;\n}\nfunction getMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = start + blockSize;\n    message.copy(block, 0, start, end);\n    return block;\n}\nfunction getPaddedMessageBlock(message, blockIndex) {\n    const block = Buffer.alloc(blockSize);\n    const start = blockIndex * blockSize;\n    const end = message.length;\n    block.fill(0);\n    message.copy(block, 0, start, end);\n    block[end - start] = 0x80;\n    return block;\n}\nfunction generateSubkeys(key) {\n    const l = aes(key, zero);\n    let subkey1 = bitShiftLeft(l);\n    if (l[0] & 0x80) {\n        subkey1 = xor(subkey1, rb);\n    }\n    let subkey2 = bitShiftLeft(subkey1);\n    if (subkey1[0] & 0x80) {\n        subkey2 = xor(subkey2, rb);\n    }\n    return {\n        subkey1,\n        subkey2\n    };\n}\nfunction aesCmac(key, message) {\n    const subkeys = generateSubkeys(key);\n    let blockCount = Math.ceil(message.length / blockSize);\n    let lastBlockCompleteFlag;\n    let lastBlock;\n    if (blockCount === 0) {\n        blockCount = 1;\n        lastBlockCompleteFlag = false;\n    } else {\n        lastBlockCompleteFlag = message.length % blockSize === 0;\n    }\n    const lastBlockIndex = blockCount - 1;\n    if (lastBlockCompleteFlag) {\n        lastBlock = xor(getMessageBlock(message, lastBlockIndex), subkeys.subkey1);\n    } else {\n        lastBlock = xor(getPaddedMessageBlock(message, lastBlockIndex), subkeys.subkey2);\n    }\n    let x = zero;\n    let y;\n    for(let index = 0; index < lastBlockIndex; index++){\n        y = xor(x, getMessageBlock(message, index));\n        x = aes(key, y);\n    }\n    y = xor(lastBlock, x);\n    return aes(key, y);\n}\nclass AesCmacProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesCmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const result = aesCmac(getCryptoKey(key).data, Buffer.from(data));\n        return new Uint8Array(result).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const signature2 = await this.sign(algorithm, key, data);\n        return Buffer.from(signature).compare(Buffer.from(signature2)) === 0;\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nclass AesCtrProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesCtrProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nclass AesGcmProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesGcmProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nclass AesKwProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesKwProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nclass AesEcbProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AesEcbProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await AesCrypto.generateKey({\n            name: this.name,\n            length: algorithm.length\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return AesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return AesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return AesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const res = await AesCrypto.importKey(format, keyData, {\n            name: algorithm.name\n        }, extractable, keyUsages);\n        return setCryptoKey(res);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof AesCryptoKey)) {\n            throw new TypeError("key: Is not a AesCryptoKey");\n        }\n    }\n}\nclass DesCryptoKey extends SymmetricKey {\n    get alg() {\n        switch(this.algorithm.name.toUpperCase()){\n            case "DES-CBC":\n                return `DES-CBC`;\n            case "DES-EDE3-CBC":\n                return `3DES-CBC`;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.AlgorithmError("Unsupported algorithm name");\n        }\n    }\n    set alg(value) {}\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        name: "k",\n        converter: JsonBase64UrlConverter\n    })\n], DesCryptoKey.prototype, "data", void 0);\nclass DesCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const key = new DesCryptoKey();\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto__WEBPACK_IMPORTED_MODULE_1___default().randomBytes(algorithm.length >> 3);\n        return key;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key);\n            case "raw":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case "jwk":\n                key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                    targetSchema: DesCryptoKey\n                });\n                break;\n            case "raw":\n                key = new DesCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n        key.algorithm = algorithm;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "DES-CBC":\n                return this.encryptDesCBC(algorithm, key, Buffer.from(data));\n            case "DES-EDE3-CBC":\n                return this.encryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        if (!(key instanceof DesCryptoKey)) {\n            throw new Error("key: Is not DesCryptoKey");\n        }\n        switch(algorithm.name.toUpperCase()){\n            case "DES-CBC":\n                return this.decryptDesCBC(algorithm, key, Buffer.from(data));\n            case "DES-EDE3-CBC":\n                return this.decryptDesEDE3CBC(algorithm, key, Buffer.from(data));\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async encryptDesCBC(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesCBC(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`des-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n    static async encryptDesEDE3CBC(algorithm, key, data) {\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createCipheriv(`des-ede3-cbc`, key.data, Buffer.from(algorithm.iv));\n        let enc = cipher.update(data);\n        enc = Buffer.concat([\n            enc,\n            cipher.final()\n        ]);\n        const res = new Uint8Array(enc).buffer;\n        return res;\n    }\n    static async decryptDesEDE3CBC(algorithm, key, data) {\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_1___default().createDecipheriv(`des-ede3-cbc`, key.data, new Uint8Array(algorithm.iv));\n        let dec = decipher.update(data);\n        dec = Buffer.concat([\n            dec,\n            decipher.final()\n        ]);\n        return new Uint8Array(dec).buffer;\n    }\n}\nclass DesCbcProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 64;\n        this.ivSize = 8;\n        this.name = "DES-CBC";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("keyData: Wrong key size");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError("key: Is not a DesCryptoKey");\n        }\n    }\n}\nclass DesEde3CbcProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.DesProvider {\n    constructor(){\n        super(...arguments);\n        this.keySizeBits = 192;\n        this.ivSize = 8;\n        this.name = "DES-EDE3-CBC";\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.generateKey({\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    async onEncrypt(algorithm, key, data) {\n        return DesCrypto.encrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onDecrypt(algorithm, key, data) {\n        return DesCrypto.decrypt(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return DesCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await DesCrypto.importKey(format, keyData, {\n            name: this.name,\n            length: this.keySizeBits\n        }, extractable, keyUsages);\n        if (key.data.length !== this.keySizeBits >> 3) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("keyData: Wrong key size");\n        }\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof DesCryptoKey)) {\n            throw new TypeError("key: Is not a DesCryptoKey");\n        }\n    }\n}\nfunction getJwkAlgorithm(algorithm) {\n    switch(algorithm.name.toUpperCase()){\n        case "RSA-OAEP":\n            {\n                const mdSize = /(\\d+)$/.exec(algorithm.hash.name)[1];\n                return `RSA-OAEP${mdSize !== "1" ? `-${mdSize}` : ""}`;\n            }\n        case "RSASSA-PKCS1-V1_5":\n            return `RS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case "RSA-PSS":\n            return `PS${/(\\d+)$/.exec(algorithm.hash.name)[1]}`;\n        case "RSA-PKCS1":\n            return `RS1`;\n        default:\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n    }\n}\nclass RsaPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "private";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n        return _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "RSA",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(json, {\n            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPrivateKey\n        });\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(key);\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "public";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n        return _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.publicKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPublicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "RSA",\n            alg: getJwkAlgorithm(this.algorithm),\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        const key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(json, {\n            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPublicKey\n        });\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(key);\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n    }\n}\nclass RsaCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new RsaPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new RsaPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const publicExponent = Buffer.concat([\n            Buffer.alloc(4 - algorithm.publicExponent.byteLength, 0),\n            Buffer.from(algorithm.publicExponent)\n        ]).readInt32BE(0);\n        const keys = crypto__WEBPACK_IMPORTED_MODULE_1___default().generateKeyPairSync("rsa", {\n            modulusLength: algorithm.modulusLength,\n            publicExponent,\n            publicKeyEncoding: {\n                format: "der",\n                type: "spki"\n            },\n            privateKeyEncoding: {\n                format: "der",\n                type: "pkcs8"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key);\n            case "pkcs8":\n            case "spki":\n                return new Uint8Array(key.data).buffer;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'pkcs8\' or \'spki\'");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case "spki":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n                    const asnKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.publicKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPublicKey);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case "pkcs8":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n                    const asnKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.RsaPrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'pkcs8\' or \'spki\'");\n        }\n    }\n    static async sign(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "RSA-PSS":\n            case "RSASSA-PKCS1-V1_5":\n                return this.signRsa(algorithm, key, data);\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async verify(algorithm, key, signature, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "RSA-PSS":\n            case "RSASSA-PKCS1-V1_5":\n                return this.verifySSA(algorithm, key, data, signature);\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async encrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "RSA-OAEP":\n                return this.encryptOAEP(algorithm, key, data);\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static async decrypt(algorithm, key, data) {\n        switch(algorithm.name.toUpperCase()){\n            case "RSA-OAEP":\n                return this.decryptOAEP(algorithm, key, data);\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm: Is not recognized");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";\n        keyInfo.privateKeyAlgorithm.parameters = null;\n        keyInfo.privateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(asnKey);\n        const key = new RsaPrivateKey();\n        key.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = "1.2.840.113549.1.1.1";\n        keyInfo.publicKeyAlgorithm.parameters = null;\n        keyInfo.publicKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(asnKey);\n        const key = new RsaPublicKey();\n        key.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.algorithm.publicExponent = new Uint8Array(asnKey.publicExponent);\n        key.algorithm.modulusLength = asnKey.modulus.byteLength << 3;\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getCryptoAlgorithm(alg) {\n        switch(alg.hash.name.toUpperCase()){\n            case "SHA-1":\n                return "RSA-SHA1";\n            case "SHA-256":\n                return "RSA-SHA256";\n            case "SHA-384":\n                return "RSA-SHA384";\n            case "SHA-512":\n                return "RSA-SHA512";\n            case "SHA3-256":\n                return "RSA-SHA3-256";\n            case "SHA3-384":\n                return "RSA-SHA3-384";\n            case "SHA3-512":\n                return "RSA-SHA3-512";\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("algorithm.hash: Is not recognized");\n        }\n    }\n    static signRsa(algorithm, key, data) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto__WEBPACK_IMPORTED_MODULE_1___default().createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString("base64")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === "RSA-PSS") {\n            options.padding = (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const signature = signer.sign(options);\n        return new Uint8Array(signature).buffer;\n    }\n    static verifySSA(algorithm, key, data, signature) {\n        const cryptoAlg = this.getCryptoAlgorithm(key.algorithm);\n        const signer = crypto__WEBPACK_IMPORTED_MODULE_1___default().createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString("base64")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        if (algorithm.name.toUpperCase() === "RSA-PSS") {\n            options.padding = (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_PKCS1_PSS_PADDING;\n            options.saltLength = algorithm.saltLength;\n        }\n        const ok = signer.verify(options, signature);\n        return ok;\n    }\n    static encryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PUBLIC KEY-----\\n${key.data.toString("base64")}\\n-----END PUBLIC KEY-----`,\n            padding: (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto__WEBPACK_IMPORTED_MODULE_1___default().publicEncrypt(options, data)).buffer;\n    }\n    static decryptOAEP(algorithm, key, data) {\n        const options = {\n            key: `-----BEGIN PRIVATE KEY-----\\n${key.data.toString("base64")}\\n-----END PRIVATE KEY-----`,\n            padding: (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_PKCS1_OAEP_PADDING\n        };\n        if (algorithm.label) ;\n        return new Uint8Array(crypto__WEBPACK_IMPORTED_MODULE_1___default().privateDecrypt(options, data)).buffer;\n    }\n}\nRsaCrypto.publicKeyUsages = [\n    "verify",\n    "encrypt",\n    "wrapKey"\n];\nRsaCrypto.privateKeyUsages = [\n    "sign",\n    "decrypt",\n    "unwrapKey"\n];\nclass RsaSsaProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.RsaSsaProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            "SHA-1",\n            "SHA-256",\n            "SHA-384",\n            "SHA-512",\n            "shake128",\n            "shake256",\n            "SHA3-256",\n            "SHA3-384",\n            "SHA3-512"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError("key: Is not RSA CryptoKey");\n        }\n    }\n}\nclass RsaPssProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.RsaPssProvider {\n    constructor(){\n        super(...arguments);\n        this.hashAlgorithms = [\n            "SHA-1",\n            "SHA-256",\n            "SHA-384",\n            "SHA-512",\n            "shake128",\n            "shake256",\n            "SHA3-256",\n            "SHA3-384",\n            "SHA3-512"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return RsaCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return RsaCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError("key: Is not RSA CryptoKey");\n        }\n    }\n}\nclass ShaCrypto {\n    static size(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case "SHA-1":\n                return 160;\n            case "SHA-256":\n            case "SHA3-256":\n                return 256;\n            case "SHA-384":\n            case "SHA3-384":\n                return 384;\n            case "SHA-512":\n            case "SHA3-512":\n                return 512;\n            default:\n                throw new Error("Unrecognized name");\n        }\n    }\n    static getAlgorithmName(algorithm) {\n        switch(algorithm.name.toUpperCase()){\n            case "SHA-1":\n                return "sha1";\n            case "SHA-256":\n                return "sha256";\n            case "SHA-384":\n                return "sha384";\n            case "SHA-512":\n                return "sha512";\n            case "SHA3-256":\n                return "sha3-256";\n            case "SHA3-384":\n                return "sha3-384";\n            case "SHA3-512":\n                return "sha3-512";\n            default:\n                throw new Error("Unrecognized name");\n        }\n    }\n    static digest(algorithm, data) {\n        const hashAlg = this.getAlgorithmName(algorithm);\n        const hash = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(hashAlg).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass RsaOaepProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.RsaOaepProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onEncrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const dataView = new Uint8Array(data);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = dataView.byteLength;\n        const psLength = keySize - dataLength - 2 * hashSize - 2;\n        if (dataLength > keySize - 2 * hashSize - 2) {\n            throw new Error("Data too large");\n        }\n        const message = new Uint8Array(keySize);\n        const seed = message.subarray(1, hashSize + 1);\n        const dataBlock = message.subarray(hashSize + 1);\n        dataBlock.set(dataView, hashSize + psLength + 1);\n        const labelHash = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(internalKey.algorithm.hash.name.replace("-", "")).update(webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        dataBlock.set(labelHash, 0);\n        dataBlock[hashSize + psLength] = 1;\n        crypto__WEBPACK_IMPORTED_MODULE_1___default().randomFillSync(seed);\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PUBLIC KEY-----\\n${internalKey.data.toString("base64")}\\n-----END PUBLIC KEY-----`;\n        }\n        const pkcs0 = crypto__WEBPACK_IMPORTED_MODULE_1___default().publicEncrypt({\n            key: internalKey.pem,\n            padding: (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_NO_PADDING\n        }, Buffer.from(message));\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const internalKey = getCryptoKey(key);\n        const keySize = Math.ceil(internalKey.algorithm.modulusLength >> 3);\n        const hashSize = ShaCrypto.size(internalKey.algorithm.hash) >> 3;\n        const dataLength = data.byteLength;\n        if (dataLength !== keySize) {\n            throw new Error("Bad data");\n        }\n        if (!internalKey.pem) {\n            internalKey.pem = `-----BEGIN PRIVATE KEY-----\\n${internalKey.data.toString("base64")}\\n-----END PRIVATE KEY-----`;\n        }\n        let pkcs0 = crypto__WEBPACK_IMPORTED_MODULE_1___default().privateDecrypt({\n            key: internalKey.pem,\n            padding: (crypto__WEBPACK_IMPORTED_MODULE_1___default().constants).RSA_NO_PADDING\n        }, Buffer.from(data));\n        const z = pkcs0[0];\n        const seed = pkcs0.subarray(1, hashSize + 1);\n        const dataBlock = pkcs0.subarray(hashSize + 1);\n        if (z !== 0) {\n            throw new Error("Decryption failed");\n        }\n        const seedMask = this.mgf1(internalKey.algorithm.hash, dataBlock, seed.length);\n        for(let i = 0; i < seed.length; i++){\n            seed[i] ^= seedMask[i];\n        }\n        const dataBlockMask = this.mgf1(internalKey.algorithm.hash, seed, dataBlock.length);\n        for(let i = 0; i < dataBlock.length; i++){\n            dataBlock[i] ^= dataBlockMask[i];\n        }\n        const labelHash = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(internalKey.algorithm.hash.name.replace("-", "")).update(webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(algorithm.label || new Uint8Array(0))).digest();\n        for(let i = 0; i < hashSize; i++){\n            if (labelHash[i] !== dataBlock[i]) {\n                throw new Error("Decryption failed");\n            }\n        }\n        let psEnd = hashSize;\n        for(; psEnd < dataBlock.length; psEnd++){\n            const psz = dataBlock[psEnd];\n            if (psz === 1) {\n                break;\n            }\n            if (psz !== 0) {\n                throw new Error("Decryption failed");\n            }\n        }\n        if (psEnd === dataBlock.length) {\n            throw new Error("Decryption failed");\n        }\n        pkcs0 = dataBlock.subarray(psEnd + 1);\n        return new Uint8Array(pkcs0).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError("key: Is not RSA CryptoKey");\n        }\n    }\n    mgf1(algorithm, seed, length = 0) {\n        const hashSize = ShaCrypto.size(algorithm) >> 3;\n        const mask = new Uint8Array(length);\n        const counter = new Uint8Array(4);\n        const chunks = Math.ceil(length / hashSize);\n        for(let i = 0; i < chunks; i++){\n            counter[0] = i >>> 24;\n            counter[1] = i >>> 16 & 255;\n            counter[2] = i >>> 8 & 255;\n            counter[3] = i & 255;\n            const submask = mask.subarray(i * hashSize);\n            let chunk = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(algorithm.name.replace("-", "")).update(seed).update(counter).digest();\n            if (chunk.length > submask.length) {\n                chunk = chunk.subarray(0, submask.length);\n            }\n            submask.set(chunk);\n        }\n        return mask;\n    }\n}\nclass RsaEsProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "RSAES-PKCS1-v1_5";\n        this.usages = {\n            publicKey: [\n                "encrypt",\n                "wrapKey"\n            ],\n            privateKey: [\n                "decrypt",\n                "unwrapKey"\n            ]\n        };\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await RsaCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    checkGenerateKeyParams(algorithm) {\n        this.checkRequiredProperty(algorithm, "publicExponent");\n        if (!(algorithm.publicExponent && algorithm.publicExponent instanceof Uint8Array)) {\n            throw new TypeError("publicExponent: Missing or not a Uint8Array");\n        }\n        const publicExponent = pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.ToBase64(algorithm.publicExponent);\n        if (!(publicExponent === "Aw==" || publicExponent === "AQAB")) {\n            throw new TypeError("publicExponent: Must be [3] or [1,0,1]");\n        }\n        this.checkRequiredProperty(algorithm, "modulusLength");\n        switch(algorithm.modulusLength){\n            case 1024:\n            case 2048:\n            case 4096:\n                break;\n            default:\n                throw new TypeError("modulusLength: Must be 1024, 2048, or 4096");\n        }\n    }\n    async onEncrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const enc = crypto__WEBPACK_IMPORTED_MODULE_1__.publicEncrypt(options, new Uint8Array(data));\n        return new Uint8Array(enc).buffer;\n    }\n    async onDecrypt(algorithm, key, data) {\n        const options = this.toCryptoOptions(key);\n        const dec = crypto__WEBPACK_IMPORTED_MODULE_1__.privateDecrypt(options, new Uint8Array(data));\n        return new Uint8Array(dec).buffer;\n    }\n    async onExportKey(format, key) {\n        return RsaCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await RsaCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof RsaPrivateKey || internalKey instanceof RsaPublicKey)) {\n            throw new TypeError("key: Is not RSA CryptoKey");\n        }\n    }\n    toCryptoOptions(key) {\n        const type = key.type.toUpperCase();\n        return {\n            key: `-----BEGIN ${type} KEY-----\\n${getCryptoKey(key).data.toString("base64")}\\n-----END ${type} KEY-----`,\n            padding: crypto__WEBPACK_IMPORTED_MODULE_1__.constants.RSA_PKCS1_PADDING\n        };\n    }\n}\nconst namedOIDs = {\n    "1.2.840.10045.3.1.7": "P-256",\n    "P-256": "1.2.840.10045.3.1.7",\n    "1.3.132.0.34": "P-384",\n    "P-384": "1.3.132.0.34",\n    "1.3.132.0.35": "P-521",\n    "P-521": "1.3.132.0.35",\n    "1.3.132.0.10": "K-256",\n    "K-256": "1.3.132.0.10",\n    "brainpoolP160r1": "1.3.36.3.3.2.8.1.1.1",\n    "1.3.36.3.3.2.8.1.1.1": "brainpoolP160r1",\n    "brainpoolP160t1": "1.3.36.3.3.2.8.1.1.2",\n    "1.3.36.3.3.2.8.1.1.2": "brainpoolP160t1",\n    "brainpoolP192r1": "1.3.36.3.3.2.8.1.1.3",\n    "1.3.36.3.3.2.8.1.1.3": "brainpoolP192r1",\n    "brainpoolP192t1": "1.3.36.3.3.2.8.1.1.4",\n    "1.3.36.3.3.2.8.1.1.4": "brainpoolP192t1",\n    "brainpoolP224r1": "1.3.36.3.3.2.8.1.1.5",\n    "1.3.36.3.3.2.8.1.1.5": "brainpoolP224r1",\n    "brainpoolP224t1": "1.3.36.3.3.2.8.1.1.6",\n    "1.3.36.3.3.2.8.1.1.6": "brainpoolP224t1",\n    "brainpoolP256r1": "1.3.36.3.3.2.8.1.1.7",\n    "1.3.36.3.3.2.8.1.1.7": "brainpoolP256r1",\n    "brainpoolP256t1": "1.3.36.3.3.2.8.1.1.8",\n    "1.3.36.3.3.2.8.1.1.8": "brainpoolP256t1",\n    "brainpoolP320r1": "1.3.36.3.3.2.8.1.1.9",\n    "1.3.36.3.3.2.8.1.1.9": "brainpoolP320r1",\n    "brainpoolP320t1": "1.3.36.3.3.2.8.1.1.10",\n    "1.3.36.3.3.2.8.1.1.10": "brainpoolP320t1",\n    "brainpoolP384r1": "1.3.36.3.3.2.8.1.1.11",\n    "1.3.36.3.3.2.8.1.1.11": "brainpoolP384r1",\n    "brainpoolP384t1": "1.3.36.3.3.2.8.1.1.12",\n    "1.3.36.3.3.2.8.1.1.12": "brainpoolP384t1",\n    "brainpoolP512r1": "1.3.36.3.3.2.8.1.1.13",\n    "1.3.36.3.3.2.8.1.1.13": "brainpoolP512r1",\n    "brainpoolP512t1": "1.3.36.3.3.2.8.1.1.14",\n    "1.3.36.3.3.2.8.1.1.14": "brainpoolP512t1"\n};\nfunction getOidByNamedCurve$1(namedCurve) {\n    const oid = namedOIDs[namedCurve];\n    if (!oid) {\n        throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot convert WebCrypto named curve \'${namedCurve}\' to OID`);\n    }\n    return oid;\n}\nclass EcPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "private";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n        return _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "EC",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot get named curve from JWK. Property \'crv\' is required`);\n        }\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = "1.2.840.10045.2.1";\n        keyInfo.privateKeyAlgorithm.parameters = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        const key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(json, {\n            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPrivateKey\n        });\n        keyInfo.privateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(key);\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EcPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "public";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n        return new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPublicKey(keyInfo.publicKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "EC",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot get named curve from JWK. Property \'crv\' is required`);\n        }\n        const key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(json, {\n            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPublicKey\n        });\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = "1.2.840.10045.2.1";\n        keyInfo.publicKeyAlgorithm.parameters = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.ObjectIdentifier(getOidByNamedCurve$1(json.crv)));\n        keyInfo.publicKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.toASN(key).valueHex;\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass Sha1Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA-1";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha256Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA-256";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha384Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA-384";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha512Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA-512";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3256Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA3-256";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3384Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA3-384";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass Sha3512Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.ProviderCrypto {\n    constructor(){\n        super(...arguments);\n        this.name = "SHA3-512";\n        this.usages = [];\n    }\n    async onDigest(algorithm, data) {\n        return ShaCrypto.digest(algorithm, data);\n    }\n}\nclass EcCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EcPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EcPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const keys = crypto__WEBPACK_IMPORTED_MODULE_1___default().generateKeyPairSync("ec", {\n            namedCurve: this.getOpenSSLNamedCurve(algorithm.namedCurve),\n            publicKeyEncoding: {\n                format: "der",\n                type: "spki"\n            },\n            privateKeyEncoding: {\n                format: "der",\n                type: "pkcs8"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto__WEBPACK_IMPORTED_MODULE_1___default().createSign(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString("base64")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = signer.sign(options);\n        const ecSignature = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(signature, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcDsaSignature);\n        const signatureRaw = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcUtils.encodeSignature(ecSignature, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcCurves.get(key.algorithm.namedCurve).size);\n        return signatureRaw.buffer;\n    }\n    static async verify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(algorithm.hash);\n        const signer = crypto__WEBPACK_IMPORTED_MODULE_1___default().createVerify(cryptoAlg);\n        signer.update(Buffer.from(data));\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString("base64")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ecSignature = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcDsaSignature();\n        const namedCurve = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcCurves.get(key.algorithm.namedCurve);\n        const signaturePoint = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcUtils.decodeSignature(signature, namedCurve.size);\n        ecSignature.r = pvtsutils__WEBPACK_IMPORTED_MODULE_4__.BufferSourceConverter.toArrayBuffer(signaturePoint.r);\n        ecSignature.s = pvtsutils__WEBPACK_IMPORTED_MODULE_4__.BufferSourceConverter.toArrayBuffer(signaturePoint.s);\n        const ecSignatureRaw = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(ecSignature));\n        const ok = signer.verify(options, ecSignatureRaw);\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const cryptoAlg = this.getOpenSSLNamedCurve(baseKey.algorithm.namedCurve);\n        const ecdh = crypto__WEBPACK_IMPORTED_MODULE_1___default().createECDH(cryptoAlg);\n        const asnPrivateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(baseKey.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n        const asnEcPrivateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(asnPrivateKey.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPrivateKey);\n        ecdh.setPrivateKey(Buffer.from(asnEcPrivateKey.privateKey));\n        const asnPublicKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(algorithm.public.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n        const bits = ecdh.computeSecret(Buffer.from(asnPublicKey.publicKey));\n        if (length === null) {\n            return bits;\n        }\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key);\n            case "pkcs8":\n            case "spki":\n                return new Uint8Array(key.data).buffer;\n            case "raw":\n                {\n                    const publicKeyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(key.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'raw\', pkcs8\' or \'spki\'");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        const asnKey = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPublicKey\n                        });\n                        return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                    }\n                }\n            case "raw":\n                {\n                    const asnKey = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPublicKey(keyData);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case "spki":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n                    const asnKey = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPublicKey(keyInfo.publicKey);\n                    this.assertKeyParameters(keyInfo.publicKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPublicKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            case "pkcs8":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n                    const asnKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.EcPrivateKey);\n                    this.assertKeyParameters(keyInfo.privateKeyAlgorithm.parameters, algorithm.namedCurve);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'raw\', \'pkcs8\' or \'spki\'");\n        }\n    }\n    static assertKeyParameters(parameters, namedCurve) {\n        if (!parameters) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoError("Key info doesn\'t have required parameters");\n        }\n        let namedCurveIdentifier = "";\n        try {\n            namedCurveIdentifier = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(parameters, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.ObjectIdentifier).value;\n        } catch (e) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoError("Cannot read key info parameters");\n        }\n        if (getOidByNamedCurve$1(namedCurve) !== namedCurveIdentifier) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.CryptoError("Key info parameter doesn\'t match to named curve");\n        }\n    }\n    static async importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = "1.2.840.10045.2.1";\n        keyInfo.privateKeyAlgorithm.parameters = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.ObjectIdentifier(getOidByNamedCurve$1(algorithm.namedCurve)));\n        keyInfo.privateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(asnKey);\n        const key = new EcPrivateKey();\n        key.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = "1.2.840.10045.2.1";\n        const namedCurve = getOidByNamedCurve$1(algorithm.namedCurve);\n        keyInfo.publicKeyAlgorithm.parameters = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.ObjectIdentifier(namedCurve));\n        keyInfo.publicKey = asnKey.value;\n        const key = new EcPublicKey();\n        key.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static getOpenSSLNamedCurve(curve) {\n        switch(curve.toUpperCase()){\n            case "P-256":\n                return "prime256v1";\n            case "K-256":\n                return "secp256k1";\n            case "P-384":\n                return "secp384r1";\n            case "P-521":\n                return "secp521r1";\n            default:\n                return curve;\n        }\n    }\n}\nEcCrypto.publicKeyUsages = [\n    "verify"\n];\nEcCrypto.privateKeyUsages = [\n    "sign",\n    "deriveKey",\n    "deriveBits"\n];\nclass EcdsaProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcdsaProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcCurves.names;\n        this.hashAlgorithms = [\n            "SHA-1",\n            "SHA-256",\n            "SHA-384",\n            "SHA-512",\n            "shake128",\n            "shake256",\n            "SHA3-256",\n            "SHA3-384",\n            "SHA3-512"\n        ];\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EcCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EcCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError("key: Is not EC CryptoKey");\n        }\n    }\n}\nclass EcdhProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcdhProvider {\n    constructor(){\n        super(...arguments);\n        this.namedCurves = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcCurves.names;\n    }\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EcCrypto.generateKey({\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onExportKey(format, key) {\n        return EcCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EcCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        const internalKey = getCryptoKey(key);\n        if (!(internalKey instanceof EcPrivateKey || internalKey instanceof EcPublicKey)) {\n            throw new TypeError("key: Is not EC CryptoKey");\n        }\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EcCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n}\nconst edOIDs = {\n    [webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idEd448]: "Ed448",\n    "ed448": webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idEd448,\n    [webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idX448]: "X448",\n    "x448": webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idX448,\n    [webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idEd25519]: "Ed25519",\n    "ed25519": webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idEd25519,\n    [webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idX25519]: "X25519",\n    "x25519": webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.idX25519\n};\nfunction getOidByNamedCurve(namedCurve) {\n    const oid = edOIDs[namedCurve.toLowerCase()];\n    if (!oid) {\n        throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot convert WebCrypto named curve \'${namedCurve}\' to OID`);\n    }\n    return oid;\n}\nclass EdPrivateKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "private";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n        return _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.CurvePrivateKey);\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "OKP",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key));\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot get named curve from JWK. Property \'crv\' is required`);\n        }\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo();\n        keyInfo.privateKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        const key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(json, {\n            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.CurvePrivateKey\n        });\n        keyInfo.privateKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(key);\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdPublicKey extends AsymmetricKey {\n    constructor(){\n        super(...arguments);\n        this.type = "public";\n    }\n    getKey() {\n        const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(this.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n        return keyInfo.publicKey;\n    }\n    toJSON() {\n        const key = this.getKey();\n        const json = {\n            kty: "OKP",\n            crv: this.algorithm.namedCurve,\n            key_ops: this.usages,\n            ext: this.extractable\n        };\n        return Object.assign(json, {\n            x: pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.ToBase64Url(key)\n        });\n    }\n    fromJSON(json) {\n        if (!json.crv) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot get named curve from JWK. Property \'crv\' is required`);\n        }\n        if (!json.x) {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError(`Cannot get property from JWK. Property \'x\' is required`);\n        }\n        const keyInfo = new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo();\n        keyInfo.publicKeyAlgorithm.algorithm = getOidByNamedCurve(json.crv);\n        keyInfo.publicKey = pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.FromBase64Url(json.x);\n        this.data = Buffer.from(_peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnSerializer.serialize(keyInfo));\n        return this;\n    }\n}\nclass EdCrypto {\n    static async generateKey(algorithm, extractable, keyUsages) {\n        const privateKey = new EdPrivateKey();\n        privateKey.algorithm = algorithm;\n        privateKey.extractable = extractable;\n        privateKey.usages = keyUsages.filter((usage)=>this.privateKeyUsages.indexOf(usage) !== -1);\n        const publicKey = new EdPublicKey();\n        publicKey.algorithm = algorithm;\n        publicKey.extractable = true;\n        publicKey.usages = keyUsages.filter((usage)=>this.publicKeyUsages.indexOf(usage) !== -1);\n        const type = algorithm.namedCurve.toLowerCase();\n        const keys = crypto__WEBPACK_IMPORTED_MODULE_1___default().generateKeyPairSync(type, {\n            publicKeyEncoding: {\n                format: "der",\n                type: "spki"\n            },\n            privateKeyEncoding: {\n                format: "der",\n                type: "pkcs8"\n            }\n        });\n        privateKey.data = keys.privateKey;\n        publicKey.data = keys.publicKey;\n        const res = {\n            privateKey,\n            publicKey\n        };\n        return res;\n    }\n    static async sign(algorithm, key, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PRIVATE KEY-----\\n${key.data.toString("base64")}\\n-----END PRIVATE KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const signature = crypto__WEBPACK_IMPORTED_MODULE_1___default().sign(null, Buffer.from(data), options);\n        return webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(signature);\n    }\n    static async verify(algorithm, key, signature, data) {\n        if (!key.pem) {\n            key.pem = `-----BEGIN PUBLIC KEY-----\\n${key.data.toString("base64")}\\n-----END PUBLIC KEY-----`;\n        }\n        const options = {\n            key: key.pem\n        };\n        const ok = crypto__WEBPACK_IMPORTED_MODULE_1___default().verify(null, Buffer.from(data), options, Buffer.from(signature));\n        return ok;\n    }\n    static async deriveBits(algorithm, baseKey, length) {\n        const publicKey = crypto__WEBPACK_IMPORTED_MODULE_1___default().createPublicKey({\n            key: algorithm.public.data,\n            format: "der",\n            type: "spki"\n        });\n        const privateKey = crypto__WEBPACK_IMPORTED_MODULE_1___default().createPrivateKey({\n            key: baseKey.data,\n            format: "der",\n            type: "pkcs8"\n        });\n        const bits = crypto__WEBPACK_IMPORTED_MODULE_1___default().diffieHellman({\n            publicKey,\n            privateKey\n        });\n        return new Uint8Array(bits).buffer.slice(0, length >> 3);\n    }\n    static async exportKey(format, key) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(key);\n            case "pkcs8":\n            case "spki":\n                return new Uint8Array(key.data).buffer;\n            case "raw":\n                {\n                    const publicKeyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(key.data, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n                    return publicKeyInfo.publicKey;\n                }\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'raw\', pkcs8\' or \'spki\'");\n        }\n    }\n    static async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                {\n                    const jwk = keyData;\n                    if (jwk.d) {\n                        const asnKey = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                            targetSchema: webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.CurvePrivateKey\n                        });\n                        return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                    } else {\n                        if (!jwk.x) {\n                            throw new TypeError("keyData: Cannot get required \'x\' filed");\n                        }\n                        return this.importPublicKey(pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.FromBase64Url(jwk.x), algorithm, extractable, keyUsages);\n                    }\n                }\n            case "raw":\n                {\n                    return this.importPublicKey(keyData, algorithm, extractable, keyUsages);\n                }\n            case "spki":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PublicKeyInfo);\n                    return this.importPublicKey(keyInfo.publicKey, algorithm, extractable, keyUsages);\n                }\n            case "pkcs8":\n                {\n                    const keyInfo = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(new Uint8Array(keyData), webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.PrivateKeyInfo);\n                    const asnKey = _peculiar_asn1_schema__WEBPACK_IMPORTED_MODULE_5__.AsnParser.parse(keyInfo.privateKey, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.asn1.CurvePrivateKey);\n                    return this.importPrivateKey(asnKey, algorithm, extractable, keyUsages);\n                }\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\', \'raw\', \'pkcs8\' or \'spki\'");\n        }\n    }\n    static importPrivateKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPrivateKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.ToBase64Url(asnKey.d)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n    static async importPublicKey(asnKey, algorithm, extractable, keyUsages) {\n        const key = new EdPublicKey();\n        key.fromJSON({\n            crv: algorithm.namedCurve,\n            x: pvtsutils__WEBPACK_IMPORTED_MODULE_4__.Convert.ToBase64Url(asnKey)\n        });\n        key.algorithm = Object.assign({}, algorithm);\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return key;\n    }\n}\nEdCrypto.publicKeyUsages = [\n    "verify"\n];\nEdCrypto.privateKeyUsages = [\n    "sign",\n    "deriveKey",\n    "deriveBits"\n];\nclass EdDsaProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EdDsaProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.replace(/^ed/i, "Ed")\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onSign(algorithm, key, data) {\n        return EdCrypto.sign(algorithm, getCryptoKey(key), new Uint8Array(data));\n    }\n    async onVerify(algorithm, key, signature, data) {\n        return EdCrypto.verify(algorithm, getCryptoKey(key), new Uint8Array(signature), new Uint8Array(data));\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass EcdhEsProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.EcdhEsProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const keys = await EdCrypto.generateKey({\n            name: this.name,\n            namedCurve: algorithm.namedCurve.toUpperCase()\n        }, extractable, keyUsages);\n        return {\n            privateKey: setCryptoKey(keys.privateKey),\n            publicKey: setCryptoKey(keys.publicKey)\n        };\n    }\n    async onDeriveBits(algorithm, baseKey, length) {\n        const bits = await EdCrypto.deriveBits({\n            ...algorithm,\n            public: getCryptoKey(algorithm.public)\n        }, getCryptoKey(baseKey), length);\n        return bits;\n    }\n    async onExportKey(format, key) {\n        return EdCrypto.exportKey(format, getCryptoKey(key));\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        const key = await EdCrypto.importKey(format, keyData, {\n            ...algorithm,\n            name: this.name\n        }, extractable, keyUsages);\n        return setCryptoKey(key);\n    }\n}\nclass PbkdfCryptoKey extends CryptoKey {\n}\nclass Pbkdf2Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.Pbkdf2Provider {\n    async onDeriveBits(algorithm, baseKey, length) {\n        return new Promise((resolve, reject)=>{\n            const salt = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toArrayBuffer(algorithm.salt);\n            const hash = algorithm.hash.name.replace("-", "");\n            crypto__WEBPACK_IMPORTED_MODULE_1___default().pbkdf2(getCryptoKey(baseKey).data, Buffer.from(salt), algorithm.iterations, length >> 3, hash, (err, derivedBits)=>{\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(new Uint8Array(derivedBits).buffer);\n                }\n            });\n        });\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format === "raw") {\n            const key = new PbkdfCryptoKey();\n            key.data = Buffer.from(keyData);\n            key.algorithm = {\n                name: this.name\n            };\n            key.extractable = false;\n            key.usages = keyUsages;\n            return setCryptoKey(key);\n        }\n        throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'raw\'");\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof PbkdfCryptoKey)) {\n            throw new TypeError("key: Is not PBKDF CryptoKey");\n        }\n    }\n}\nclass HmacCryptoKey extends CryptoKey {\n    get alg() {\n        const hash = this.algorithm.hash.name.toUpperCase();\n        return `HS${hash.replace("SHA-", "")}`;\n    }\n    set alg(value) {}\n}\n(0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([\n    (0,_peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonProp)({\n        name: "k",\n        converter: JsonBase64UrlConverter\n    })\n], HmacCryptoKey.prototype, "data", void 0);\nclass HmacProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.HmacProvider {\n    async onGenerateKey(algorithm, extractable, keyUsages) {\n        const length = (algorithm.length || this.getDefaultLength(algorithm.hash.name)) >> 3 << 3;\n        const key = new HmacCryptoKey();\n        key.algorithm = {\n            ...algorithm,\n            length,\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        key.data = crypto__WEBPACK_IMPORTED_MODULE_1___default().randomBytes(length >> 3);\n        return setCryptoKey(key);\n    }\n    async onSign(algorithm, key, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return new Uint8Array(hmac).buffer;\n    }\n    async onVerify(algorithm, key, signature, data) {\n        const cryptoAlg = ShaCrypto.getAlgorithmName(key.algorithm.hash);\n        const hmac = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac(cryptoAlg, getCryptoKey(key).data).update(Buffer.from(data)).digest();\n        return hmac.compare(Buffer.from(signature)) === 0;\n    }\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        let key;\n        switch(format.toLowerCase()){\n            case "jwk":\n                key = _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonParser.fromJSON(keyData, {\n                    targetSchema: HmacCryptoKey\n                });\n                break;\n            case "raw":\n                key = new HmacCryptoKey();\n                key.data = Buffer.from(keyData);\n                break;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n        key.algorithm = {\n            hash: {\n                name: algorithm.hash.name\n            },\n            name: this.name,\n            length: key.data.length << 3\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onExportKey(format, key) {\n        switch(format.toLowerCase()){\n            case "jwk":\n                return _peculiar_json_schema__WEBPACK_IMPORTED_MODULE_3__.JsonSerializer.toJSON(getCryptoKey(key));\n            case "raw":\n                return new Uint8Array(getCryptoKey(key).data).buffer;\n            default:\n                throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("format: Must be \'jwk\' or \'raw\'");\n        }\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HmacCryptoKey)) {\n            throw new TypeError("key: Is not HMAC CryptoKey");\n        }\n    }\n}\nclass HkdfCryptoKey extends CryptoKey {\n}\nclass HkdfProvider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.HkdfProvider {\n    async onImportKey(format, keyData, algorithm, extractable, keyUsages) {\n        if (format.toLowerCase() !== "raw") {\n            throw new webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.OperationError("Operation not supported");\n        }\n        const key = new HkdfCryptoKey();\n        key.data = Buffer.from(keyData);\n        key.algorithm = {\n            name: this.name\n        };\n        key.extractable = extractable;\n        key.usages = keyUsages;\n        return setCryptoKey(key);\n    }\n    async onDeriveBits(params, baseKey, length) {\n        const hash = params.hash.name.replace("-", "");\n        const hashLength = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(hash).digest().length;\n        const byteLength = length / 8;\n        const info = webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(params.info);\n        const PRK = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac(hash, webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(params.salt)).update(webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(getCryptoKey(baseKey).data)).digest();\n        const blocks = [\n            Buffer.alloc(0)\n        ];\n        const blockCount = Math.ceil(byteLength / hashLength) + 1;\n        for(let i = 1; i < blockCount; ++i){\n            blocks.push(crypto__WEBPACK_IMPORTED_MODULE_1___default().createHmac(hash, PRK).update(Buffer.concat([\n                blocks[i - 1],\n                info,\n                Buffer.from([\n                    i\n                ])\n            ])).digest());\n        }\n        return Buffer.concat(blocks).slice(0, byteLength);\n    }\n    checkCryptoKey(key, keyUsage) {\n        super.checkCryptoKey(key, keyUsage);\n        if (!(getCryptoKey(key) instanceof HkdfCryptoKey)) {\n            throw new TypeError("key: Is not HKDF CryptoKey");\n        }\n    }\n}\nclass ShakeCrypto {\n    static digest(algorithm, data) {\n        const hash = crypto__WEBPACK_IMPORTED_MODULE_1___default().createHash(algorithm.name.toLowerCase(), {\n            outputLength: algorithm.length\n        }).update(Buffer.from(data)).digest();\n        return new Uint8Array(hash).buffer;\n    }\n}\nclass Shake128Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.Shake128Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass Shake256Provider extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.Shake256Provider {\n    async onDigest(algorithm, data) {\n        return ShakeCrypto.digest(algorithm, data);\n    }\n}\nclass SubtleCrypto extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.SubtleCrypto {\n    constructor(){\n        var _a;\n        super();\n        this.providers.set(new AesCbcProvider());\n        this.providers.set(new AesCtrProvider());\n        this.providers.set(new AesGcmProvider());\n        this.providers.set(new AesCmacProvider());\n        this.providers.set(new AesKwProvider());\n        this.providers.set(new AesEcbProvider());\n        this.providers.set(new DesCbcProvider());\n        this.providers.set(new DesEde3CbcProvider());\n        this.providers.set(new RsaSsaProvider());\n        this.providers.set(new RsaPssProvider());\n        this.providers.set(new RsaOaepProvider());\n        this.providers.set(new RsaEsProvider());\n        this.providers.set(new EcdsaProvider());\n        this.providers.set(new EcdhProvider());\n        this.providers.set(new Sha1Provider());\n        this.providers.set(new Sha256Provider());\n        this.providers.set(new Sha384Provider());\n        this.providers.set(new Sha512Provider());\n        this.providers.set(new Pbkdf2Provider());\n        this.providers.set(new HmacProvider());\n        this.providers.set(new HkdfProvider());\n        const nodeMajorVersion = (_a = /^v(\\d+)/.exec(process__WEBPACK_IMPORTED_MODULE_2__.version)) === null || _a === void 0 ? void 0 : _a[1];\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 12) {\n            this.providers.set(new Shake128Provider());\n            this.providers.set(new Shake256Provider());\n        }\n        const hashes = crypto__WEBPACK_IMPORTED_MODULE_1__.getHashes();\n        if (hashes.includes("sha3-256")) {\n            this.providers.set(new Sha3256Provider());\n        }\n        if (hashes.includes("sha3-384")) {\n            this.providers.set(new Sha3384Provider());\n        }\n        if (hashes.includes("sha3-512")) {\n            this.providers.set(new Sha3512Provider());\n        }\n        if (nodeMajorVersion && parseInt(nodeMajorVersion, 10) >= 14) {\n            this.providers.set(new EdDsaProvider());\n            this.providers.set(new EcdhEsProvider());\n        }\n    }\n}\nclass Crypto extends webcrypto_core__WEBPACK_IMPORTED_MODULE_0__.Crypto {\n    constructor(){\n        super(...arguments);\n        this.subtle = new SubtleCrypto();\n    }\n    getRandomValues(array) {\n        if (!ArrayBuffer.isView(array)) {\n            throw new TypeError("Failed to execute \'getRandomValues\' on \'Crypto\': parameter 1 is not of type \'ArrayBufferView\'");\n        }\n        const buffer = Buffer.from(array.buffer, array.byteOffset, array.byteLength);\n        crypto__WEBPACK_IMPORTED_MODULE_1___default().randomFillSync(buffer);\n        return array;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/@peculiar/webcrypto/build/webcrypto.es.js\n',
      );

      /***/
    },
};
