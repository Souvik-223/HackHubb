"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit";
exports.ids = ["vendor-chunks/@livekit"];
exports.modules = {
  /***/ "(ssr)/../node_modules/@livekit/components-styles/dist/general/index.css":
    /*!*************************************************************************!*\
  !*** ../node_modules/@livekit/components-styles/dist/general/index.css ***!
  \*************************************************************************/
    /***/ (
      __unused_webpack_module,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("50acbf9d58bb");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtc3R5bGVzL2Rpc3QvZ2VuZXJhbC9pbmRleC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1zdHlsZXMvZGlzdC9nZW5lcmFsL2luZGV4LmNzcz83MzM2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNTBhY2JmOWQ1OGJiXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@livekit/components-styles/dist/general/index.css\n',
      );

      /***/
    },

  /***/ "(ssr)/../node_modules/@livekit/components-core/dist/index.mjs":
    /*!***************************************************************!*\
  !*** ../node_modules/@livekit/components-core/dist/index.mjs ***!
  \***************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTopic: () => (/* binding */ DataTopic),\n/* harmony export */   GRID_LAYOUTS: () => (/* binding */ GRID_LAYOUTS),\n/* harmony export */   PIN_DEFAULT_STATE: () => (/* binding */ PIN_DEFAULT_STATE),\n/* harmony export */   WIDGET_DEFAULT_STATE: () => (/* binding */ WIDGET_DEFAULT_STATE),\n/* harmony export */   activeSpeakerObserver: () => (/* binding */ activeSpeakerObserver),\n/* harmony export */   allParticipantEvents: () => (/* binding */ allParticipantEvents),\n/* harmony export */   allParticipantRoomEvents: () => (/* binding */ allParticipantRoomEvents),\n/* harmony export */   allRemoteParticipantEvents: () => (/* binding */ allRemoteParticipantEvents),\n/* harmony export */   allRemoteParticipantRoomEvents: () => (/* binding */ allRemoteParticipantRoomEvents),\n/* harmony export */   attachIfSubscribed: () => (/* binding */ attachIfSubscribed),\n/* harmony export */   computeMenuPosition: () => (/* binding */ computeMenuPosition),\n/* harmony export */   connectedParticipantObserver: () => (/* binding */ connectedParticipantObserver),\n/* harmony export */   connectedParticipantsObserver: () => (/* binding */ connectedParticipantsObserver),\n/* harmony export */   connectionStateObserver: () => (/* binding */ connectionStateObserver),\n/* harmony export */   createActiveDeviceObservable: () => (/* binding */ createActiveDeviceObservable),\n/* harmony export */   createConnectionQualityObserver: () => (/* binding */ createConnectionQualityObserver),\n/* harmony export */   createDataObserver: () => (/* binding */ createDataObserver),\n/* harmony export */   createDefaultGrammar: () => (/* binding */ createDefaultGrammar),\n/* harmony export */   createEmailRegExp: () => (/* reexport safe */ email_regex__WEBPACK_IMPORTED_MODULE_1__["default"]),\n/* harmony export */   createInteractingObservable: () => (/* binding */ createInteractingObservable),\n/* harmony export */   createIsSpeakingObserver: () => (/* binding */ createIsSpeakingObserver),\n/* harmony export */   createMediaDeviceObserver: () => (/* binding */ createMediaDeviceObserver),\n/* harmony export */   createTrackObserver: () => (/* binding */ createTrackObserver),\n/* harmony export */   createUrlRegExp: () => (/* binding */ createUrlRegExp),\n/* harmony export */   cssPrefix: () => (/* binding */ cssPrefix),\n/* harmony export */   encryptionStatusObservable: () => (/* binding */ encryptionStatusObservable),\n/* harmony export */   getScrollBarWidth: () => (/* binding */ getScrollBarWidth),\n/* harmony export */   getTrackByIdentifier: () => (/* binding */ getTrackByIdentifier),\n/* harmony export */   getTrackReferenceId: () => (/* binding */ getTrackReferenceId),\n/* harmony export */   getTrackReferenceSource: () => (/* binding */ getTrackReferenceSource),\n/* harmony export */   isEqualTrackRef: () => (/* binding */ isEqualTrackRef),\n/* harmony export */   isLocal: () => (/* binding */ isLocal),\n/* harmony export */   isMobileBrowser: () => (/* binding */ isMobileBrowser),\n/* harmony export */   isParticipantSourcePinned: () => (/* binding */ isParticipantSourcePinned),\n/* harmony export */   isParticipantTrackReferencePinned: () => (/* binding */ isParticipantTrackReferencePinned),\n/* harmony export */   isPlaceholderReplacement: () => (/* binding */ isPlaceholderReplacement),\n/* harmony export */   isRemote: () => (/* binding */ isRemote),\n/* harmony export */   isSourceWitOptions: () => (/* binding */ isSourceWitOptions),\n/* harmony export */   isSourcesWithOptions: () => (/* binding */ isSourcesWithOptions),\n/* harmony export */   isTrackReference: () => (/* binding */ isTrackReference),\n/* harmony export */   isTrackReferencePinned: () => (/* binding */ isTrackReferencePinned),\n/* harmony export */   isTrackReferencePlaceholder: () => (/* binding */ isTrackReferencePlaceholder),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   loadUserChoices: () => (/* binding */ loadUserChoices),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mutedObserver: () => (/* binding */ mutedObserver),\n/* harmony export */   observeParticipantEvents: () => (/* binding */ observeParticipantEvents),\n/* harmony export */   observeParticipantMedia: () => (/* binding */ observeParticipantMedia),\n/* harmony export */   observeRoomEvents: () => (/* binding */ observeRoomEvents),\n/* harmony export */   observeTrackEvents: () => (/* binding */ observeTrackEvents),\n/* harmony export */   participantEventSelector: () => (/* binding */ participantEventSelector),\n/* harmony export */   participantInfoObserver: () => (/* binding */ participantInfoObserver),\n/* harmony export */   participantPermissionObserver: () => (/* binding */ participantPermissionObserver),\n/* harmony export */   roomAudioPlaybackAllowedObservable: () => (/* binding */ roomAudioPlaybackAllowedObservable),\n/* harmony export */   roomEventSelector: () => (/* binding */ roomEventSelector),\n/* harmony export */   roomInfoObserver: () => (/* binding */ roomInfoObserver),\n/* harmony export */   roomObserver: () => (/* binding */ roomObserver),\n/* harmony export */   roomVideoPlaybackAllowedObservable: () => (/* binding */ roomVideoPlaybackAllowedObservable),\n/* harmony export */   saveUserChoices: () => (/* binding */ saveUserChoices),\n/* harmony export */   screenShareObserver: () => (/* binding */ screenShareObserver),\n/* harmony export */   selectGridLayout: () => (/* binding */ selectGridLayout),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   setDifference: () => (/* binding */ setDifference),\n/* harmony export */   setLogExtension: () => (/* binding */ setLogExtension),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setupChat: () => (/* binding */ setupChat),\n/* harmony export */   setupChatToggle: () => (/* binding */ setupChatToggle),\n/* harmony export */   setupClearPinButton: () => (/* binding */ setupClearPinButton),\n/* harmony export */   setupConnectionQualityIndicator: () => (/* binding */ setupConnectionQualityIndicator),\n/* harmony export */   setupDataMessageHandler: () => (/* binding */ setupDataMessageHandler),\n/* harmony export */   setupDeviceSelector: () => (/* binding */ setupDeviceSelector),\n/* harmony export */   setupDisconnectButton: () => (/* binding */ setupDisconnectButton),\n/* harmony export */   setupFocusToggle: () => (/* binding */ setupFocusToggle),\n/* harmony export */   setupLiveKitRoom: () => (/* binding */ setupLiveKitRoom),\n/* harmony export */   setupManualToggle: () => (/* binding */ setupManualToggle),\n/* harmony export */   setupMediaToggle: () => (/* binding */ setupMediaToggle),\n/* harmony export */   setupMediaTrack: () => (/* binding */ setupMediaTrack),\n/* harmony export */   setupParticipantName: () => (/* binding */ setupParticipantName),\n/* harmony export */   setupParticipantTile: () => (/* binding */ setupParticipantTile),\n/* harmony export */   setupStartAudio: () => (/* binding */ setupStartAudio),\n/* harmony export */   setupStartVideo: () => (/* binding */ setupStartVideo),\n/* harmony export */   setupTrackMutedIndicator: () => (/* binding */ setupTrackMutedIndicator),\n/* harmony export */   sortParticipants: () => (/* binding */ sortParticipants),\n/* harmony export */   sortTrackReferences: () => (/* binding */ sortTrackReferences),\n/* harmony export */   supportsScreenSharing: () => (/* binding */ supportsScreenSharing),\n/* harmony export */   tokenize: () => (/* binding */ tokenize),\n/* harmony export */   trackObservable: () => (/* binding */ trackObservable),\n/* harmony export */   trackReferencesObservable: () => (/* binding */ trackReferencesObservable),\n/* harmony export */   updatePages: () => (/* binding */ updatePages),\n/* harmony export */   wasClickOutside: () => (/* binding */ wasClickOutside)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ "(ssr)/../node_modules/livekit-client/dist/livekit-client.esm.mjs");\n/* harmony import */ var email_regex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! email-regex */ "(ssr)/../node_modules/email-regex/index.js");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/dom */ "(ssr)/../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/dom */ "(ssr)/../node_modules/@floating-ui/core/dist/floating-ui.core.mjs");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! loglevel */ "(ssr)/../node_modules/loglevel/lib/loglevel.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/map.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/startWith.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/Subject.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/Observable.js");\n/* harmony import */ var _barrel_optimize_names_Observable_map_startWith_switchMap_rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith,switchMap!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/switchMap.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,Subject,concat,filter,finalize,map,startWith!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/finalize.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/observable/concat.js");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,filter,map!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/filter.js");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/scan.js");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/observable/of.js");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/timeout.js");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ "(ssr)/../node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/constants.ts\nvar cssPrefix = "lk";\n// src/utils.ts\n\n// src/track-reference/track-reference.types.ts\nfunction isTrackReference(trackReference) {\n    if (typeof trackReference === "undefined") {\n        return false;\n    }\n    return isTrackReferenceSubscribed(trackReference) || isTrackReferencePublished(trackReference);\n}\nfunction isTrackReferenceSubscribed(trackReference) {\n    var _a;\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty("participant") && trackReference.hasOwnProperty("source") && trackReference.hasOwnProperty("track") && typeof ((_a = trackReference.publication) == null ? void 0 : _a.track) !== "undefined";\n}\nfunction isTrackReferencePublished(trackReference) {\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty("participant") && trackReference.hasOwnProperty("source") && trackReference.hasOwnProperty("publication") && typeof trackReference.publication !== "undefined";\n}\nfunction isTrackReferencePlaceholder(trackReference) {\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty("participant") && trackReference.hasOwnProperty("source") && typeof trackReference.publication === "undefined";\n}\n// src/track-reference/track-reference.utils.ts\nfunction getTrackReferenceId(trackReference) {\n    if (typeof trackReference === "string" || typeof trackReference === "number") {\n        return `${trackReference}`;\n    } else if (isTrackReferencePlaceholder(trackReference)) {\n        return `${trackReference.participant.identity}_${trackReference.source}_placeholder`;\n    } else if (isTrackReference(trackReference)) {\n        return `${trackReference.participant.identity}_${trackReference.publication.source}_${trackReference.publication.trackSid}`;\n    } else {\n        throw new Error(`Can\'t generate a id for the given track reference: ${trackReference}`);\n    }\n}\nfunction getTrackReferenceSource(trackReference) {\n    if (isTrackReference(trackReference)) {\n        return trackReference.publication.source;\n    } else {\n        return trackReference.source;\n    }\n}\nfunction isEqualTrackRef(a, b) {\n    if (a === void 0 || b === void 0) {\n        return false;\n    }\n    if (isTrackReference(a) && isTrackReference(b)) {\n        return a.publication.trackSid === b.publication.trackSid;\n    } else {\n        return getTrackReferenceId(a) === getTrackReferenceId(b);\n    }\n}\nfunction isTrackReferencePinned(trackReference, pinState) {\n    if (typeof pinState === "undefined") {\n        return false;\n    }\n    if (isTrackReference(trackReference)) {\n        return pinState.some((pinnedTrackReference)=>pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReference(pinnedTrackReference) && pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid);\n    } else if (isTrackReferencePlaceholder(trackReference)) {\n        return pinState.some((pinnedTrackReference)=>pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReferencePlaceholder(pinnedTrackReference) && pinnedTrackReference.source === trackReference.source);\n    } else {\n        return false;\n    }\n}\nfunction isPlaceholderReplacement(currentTrackRef, nextTrackRef) {\n    return isTrackReferencePlaceholder(currentTrackRef) && isTrackReference(nextTrackRef) && nextTrackRef.participant.identity === currentTrackRef.participant.identity && nextTrackRef.source === currentTrackRef.source;\n}\n// src/utils.ts\nfunction isLocal(p) {\n    return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction isRemote(p) {\n    return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.RemoteParticipant;\n}\nvar attachIfSubscribed = (publication, element)=>{\n    if (!publication) return;\n    const { isSubscribed, track } = publication;\n    if (element && track) {\n        if (isSubscribed) {\n            track.attach(element);\n        } else {\n            track.detach(element);\n        }\n    }\n};\nfunction isParticipantSourcePinned(participant, source, pinState) {\n    if (pinState === void 0) {\n        return false;\n    }\n    return pinState.some(({ source: pinnedSource, participant: pinnedParticipant })=>pinnedSource === source && pinnedParticipant.identity === participant.identity);\n}\nfunction isParticipantTrackReferencePinned(trackRef, pinState) {\n    if (pinState === void 0) {\n        return false;\n    }\n    return pinState.some((pinnedTrackRef)=>isEqualTrackRef(pinnedTrackRef, trackRef));\n}\nfunction getScrollBarWidth() {\n    const inner = document.createElement("p");\n    inner.style.width = "100%";\n    inner.style.height = "200px";\n    const outer = document.createElement("div");\n    outer.style.position = "absolute";\n    outer.style.top = "0px";\n    outer.style.left = "0px";\n    outer.style.visibility = "hidden";\n    outer.style.width = "200px";\n    outer.style.height = "150px";\n    outer.style.overflow = "hidden";\n    outer.appendChild(inner);\n    document.body.appendChild(outer);\n    const w1 = inner.offsetWidth;\n    outer.style.overflow = "scroll";\n    let w2 = inner.offsetWidth;\n    if (w1 === w2) {\n        w2 = outer.clientWidth;\n    }\n    document.body.removeChild(outer);\n    const scrollBarWidth = w1 - w2;\n    return scrollBarWidth;\n}\n// src/helper/detectMobileBrowser.ts\nfunction isWeb() {\n    return typeof document !== "undefined";\n}\nfunction isMobileBrowser() {\n    return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\n}\n// src/helper/url-regex.ts\nfunction createUrlRegExp(options) {\n    options = __spreadValues({}, options);\n    const protocol = `(?:(?:[a-z]+:)?//)?`;\n    const auth = "(?:\\\\S+(?::\\\\S*)?@)?";\n    const ip = new RegExp("(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}", "g").source;\n    const host = "(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)";\n    const domain = "(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*";\n    const tld = `(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?`;\n    const port = "(?::\\\\d{2,5})?";\n    const path = \'(?:[/?#][^\\\\s"]*)?\';\n    const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n    return options.exact ? new RegExp(`(?:^${regex}$)`, "i") : new RegExp(regex, "ig");\n}\n// src/helper/emailRegex.ts\n\n// src/helper/floating-menu.ts\n\nfunction computeMenuPosition(button, menu) {\n    return __async(this, null, function*() {\n        const { x, y } = yield (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition)(button, menu, {\n            placement: "top",\n            middleware: [\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.offset)(6),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.flip)(),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.shift)({\n                    padding: 5\n                })\n            ]\n        });\n        return {\n            x,\n            y\n        };\n    });\n}\nfunction wasClickOutside(insideElement, event) {\n    const isOutside = !insideElement.contains(event.target);\n    return isOutside;\n}\n// src/helper/tokenizer.ts\nvar createDefaultGrammar = ()=>{\n    return {\n        email: (0,email_regex__WEBPACK_IMPORTED_MODULE_1__["default"])(),\n        url: createUrlRegExp({})\n    };\n};\nfunction tokenize(input, grammar) {\n    const matches = Object.entries(grammar).map(([type, rx], weight)=>Array.from(input.matchAll(rx)).map(({ index, 0: content })=>({\n                type,\n                weight,\n                content,\n                index: index != null ? index : 0\n            }))).flat().sort((a, b)=>{\n        const d = a.index - b.index;\n        return d !== 0 ? d : a.weight - b.weight;\n    }).filter(({ index }, i, arr)=>{\n        if (i === 0) return true;\n        const prev = arr[i - 1];\n        return prev.index + prev.content.length <= index;\n    });\n    const tokens = [];\n    let pos = 0;\n    for (const { type, content, index } of matches){\n        if (index > pos) tokens.push(input.substring(pos, index));\n        tokens.push({\n            type,\n            content\n        });\n        pos = index + content.length;\n    }\n    if (input.length > pos) tokens.push(input.substring(pos));\n    return tokens;\n}\n// src/helper/eventGroups.ts\n\nvar allRemoteParticipantRoomEvents = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantRoomEvents = [\n    ...allRemoteParticipantRoomEvents,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n];\nvar allRemoteParticipantEvents = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantEvents = [\n    ...allRemoteParticipantEvents,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\n// src/logger.ts\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_4__.getLogger("lk-components-js");\nlog.setDefaultLevel("WARN");\nfunction setLogLevel(level, options = {}) {\n    var _a;\n    log.setLevel(level);\n    (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((_a = options.liveKitClientLogLevel) != null ? _a : level);\n}\nfunction setLogExtension(extension, options = {}) {\n    var _a;\n    const originalFactory = log.methodFactory;\n    log.methodFactory = (methodName, configLevel, loggerName)=>{\n        const rawMethod = originalFactory(methodName, configLevel, loggerName);\n        const logLevel = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[methodName];\n        const needLog = logLevel >= configLevel && logLevel < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n        return (msg, context)=>{\n            if (context) rawMethod(msg, context);\n            else rawMethod(msg);\n            if (needLog) {\n                extension(logLevel, msg, context);\n            }\n        };\n    };\n    log.setLevel(log.getLevel());\n    (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((_a = options.liveKitClientLogExtension) != null ? _a : extension);\n}\n// src/helper/grid-layouts.ts\nvar GRID_LAYOUTS = [\n    {\n        columns: 1,\n        rows: 1,\n        name: "1x1",\n        minTiles: 1,\n        maxTiles: 1,\n        minWidth: 0,\n        minHeight: 0\n    },\n    {\n        columns: 1,\n        rows: 2,\n        name: "1x2",\n        minTiles: 2,\n        maxTiles: 2,\n        minWidth: 0,\n        minHeight: 0\n    },\n    {\n        columns: 2,\n        rows: 1,\n        name: "2x1",\n        minTiles: 2,\n        maxTiles: 2,\n        minWidth: 900,\n        minHeight: 0\n    },\n    {\n        columns: 2,\n        rows: 2,\n        name: "2x2",\n        minTiles: 3,\n        maxTiles: 4,\n        minWidth: 560,\n        minHeight: 0\n    },\n    {\n        columns: 3,\n        rows: 3,\n        name: "3x3",\n        minTiles: 5,\n        maxTiles: 9,\n        minWidth: 700,\n        minHeight: 0\n    },\n    {\n        columns: 4,\n        rows: 4,\n        name: "4x4",\n        minTiles: 10,\n        maxTiles: 16,\n        minWidth: 960,\n        minHeight: 0\n    },\n    {\n        columns: 5,\n        rows: 5,\n        name: "5x5",\n        minTiles: 17,\n        maxTiles: 25,\n        minWidth: 1100,\n        minHeight: 0\n    }\n];\nfunction selectGridLayout(layouts, participantCount, width, height) {\n    let currentLayoutIndex = 0;\n    let layout = layouts.find((layout_, index, allLayouts)=>{\n        currentLayoutIndex = index;\n        const isBiggerLayoutAvailable = allLayouts.findIndex((l, i)=>{\n            const layoutIsBiggerThanCurrent = i > index;\n            const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\n            return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants;\n        }) !== -1;\n        return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\n    });\n    if (layout === void 0) {\n        layout = layouts[layouts.length - 1];\n        if (layout) {\n            log.warn(`No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout.name}).`);\n        } else {\n            throw new Error(`No layout or fallback layout found.`);\n        }\n    }\n    if (width < layout.minWidth || height < layout.minHeight) {\n        if (currentLayoutIndex > 0) {\n            const smallerLayout = layouts[currentLayoutIndex - 1];\n            layout = selectGridLayout(layouts.slice(0, currentLayoutIndex), smallerLayout.maxTiles, width, height);\n        }\n    }\n    return layout;\n}\n// src/helper/set-helper.ts\nfunction setDifference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n// src/helper/featureDetection.ts\nfunction supportsScreenSharing() {\n    return typeof navigator !== "undefined" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\n// src/types.ts\nvar PIN_DEFAULT_STATE = [];\nvar WIDGET_DEFAULT_STATE = {\n    showChat: false,\n    unreadMessages: 0\n};\nfunction isSourceWitOptions(source) {\n    return typeof source === "object";\n}\nfunction isSourcesWithOptions(sources) {\n    return Array.isArray(sources) && sources.filter(isSourceWitOptions).length > 0;\n}\n// src/sorting/sort-track-bundles.ts\n\n// src/sorting/base-sort-functions.ts\n\nfunction sortParticipantsByAudioLevel(a, b) {\n    return b.audioLevel - a.audioLevel;\n}\nfunction sortParticipantsByIsSpeaking(a, b) {\n    if (a.isSpeaking === b.isSpeaking) {\n        return 0;\n    } else {\n        return a.isSpeaking ? -1 : 1;\n    }\n}\nfunction sortParticipantsByLastSpokenAT(a, b) {\n    var _a, _b, _c, _d;\n    if (a.lastSpokeAt !== void 0 || b.lastSpokeAt !== void 0) {\n        return ((_b = (_a = b.lastSpokeAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = a.lastSpokeAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n    } else {\n        return 0;\n    }\n}\nfunction sortParticipantsByJoinedAt(a, b) {\n    var _a, _b, _c, _d;\n    return ((_b = (_a = a.joinedAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = b.joinedAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n}\nfunction sortTrackReferencesByType(a, b) {\n    if (isTrackReference(a)) {\n        if (isTrackReference(b)) {\n            return 0;\n        } else {\n            return -1;\n        }\n    } else if (isTrackReference(b)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\nfunction sortTrackRefsByIsCameraEnabled(a, b) {\n    const aVideo = a.participant.isCameraEnabled;\n    const bVideo = b.participant.isCameraEnabled;\n    if (aVideo !== bVideo) {\n        if (aVideo) {\n            return -1;\n        } else {\n            return 1;\n        }\n    } else {\n        return 0;\n    }\n}\n// src/sorting/sort-track-bundles.ts\nfunction sortTrackReferences(tracks) {\n    const localTracks = [];\n    const screenShareTracks = [];\n    const cameraTracks = [];\n    const undefinedTracks = [];\n    tracks.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal && trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n            localTracks.push(trackRef);\n        } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare) {\n            screenShareTracks.push(trackRef);\n        } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n            cameraTracks.push(trackRef);\n        } else {\n            undefinedTracks.push(trackRef);\n        }\n    });\n    const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\n    const sortedCameraTracks = sortCameraTracks(cameraTracks);\n    return [\n        ...localTracks,\n        ...sortedScreenShareTracks,\n        ...sortedCameraTracks,\n        ...undefinedTracks\n    ];\n}\nfunction sortScreenShareTracks(screenShareTracks) {\n    const localScreenShares = [];\n    const remoteScreenShares = [];\n    screenShareTracks.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal) {\n            localScreenShares.push(trackRef);\n        } else {\n            remoteScreenShares.push(trackRef);\n        }\n    });\n    localScreenShares.sort((a, b)=>sortParticipantsByJoinedAt(a.participant, b.participant));\n    remoteScreenShares.sort((a, b)=>sortParticipantsByJoinedAt(a.participant, b.participant));\n    const sortedScreenShareTrackRefs = [\n        ...remoteScreenShares,\n        ...localScreenShares\n    ];\n    return sortedScreenShareTrackRefs;\n}\nfunction sortCameraTracks(cameraTrackReferences) {\n    const localCameraTracks = [];\n    const remoteCameraTracks = [];\n    cameraTrackReferences.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal) {\n            localCameraTracks.push(trackRef);\n        } else {\n            remoteCameraTracks.push(trackRef);\n        }\n    });\n    remoteCameraTracks.sort((a, b)=>{\n        if (a.participant.isSpeaking && b.participant.isSpeaking) {\n            return sortParticipantsByAudioLevel(a.participant, b.participant);\n        }\n        if (a.participant.isSpeaking !== b.participant.isSpeaking) {\n            return sortParticipantsByIsSpeaking(a.participant, b.participant);\n        }\n        if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\n            return sortParticipantsByLastSpokenAT(a.participant, b.participant);\n        }\n        if (isTrackReference(a) !== isTrackReference(b)) {\n            return sortTrackReferencesByType(a, b);\n        }\n        if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\n            return sortTrackRefsByIsCameraEnabled(a, b);\n        }\n        return sortParticipantsByJoinedAt(a.participant, b.participant);\n    });\n    return [\n        ...localCameraTracks,\n        ...remoteCameraTracks\n    ];\n}\n// src/sorting/sort-participants.ts\n\nfunction sortParticipants(participants) {\n    const sortedParticipants = [\n        ...participants\n    ];\n    sortedParticipants.sort((a, b)=>{\n        if (a.isSpeaking && b.isSpeaking) {\n            return sortParticipantsByAudioLevel(a, b);\n        }\n        if (a.isSpeaking !== b.isSpeaking) {\n            return sortParticipantsByIsSpeaking(a, b);\n        }\n        if (a.lastSpokeAt !== b.lastSpokeAt) {\n            return sortParticipantsByLastSpokenAT(a, b);\n        }\n        const aVideo = a.videoTracks.size > 0;\n        const bVideo = b.videoTracks.size > 0;\n        if (aVideo !== bVideo) {\n            if (aVideo) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n        return sortParticipantsByJoinedAt(a, b);\n    });\n    const localParticipant = sortedParticipants.find((p)=>p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n    if (localParticipant) {\n        const localIdx = sortedParticipants.indexOf(localParticipant);\n        if (localIdx >= 0) {\n            sortedParticipants.splice(localIdx, 1);\n            if (sortedParticipants.length > 0) {\n                sortedParticipants.splice(0, 0, localParticipant);\n            } else {\n                sortedParticipants.push(localParticipant);\n            }\n        }\n    }\n    return sortedParticipants;\n}\n// src/helper/array-helper.ts\nfunction chunk(input, size) {\n    return input.reduce((arr, item, idx)=>{\n        return idx % size === 0 ? [\n            ...arr,\n            [\n                item\n            ]\n        ] : [\n            ...arr.slice(0, -1),\n            [\n                ...arr.slice(-1)[0],\n                item\n            ]\n        ];\n    }, []);\n}\nfunction zip(a1, a2) {\n    const resultLength = Math.max(a1.length, a2.length);\n    return new Array(resultLength).fill([]).map((_val, idx)=>[\n            a1[idx],\n            a2[idx]\n        ]);\n}\nfunction differenceBy(a1, a2, by) {\n    return a1.filter((c)=>!a2.map((v)=>by(v)).includes(by(c)));\n}\n// src/track-reference/test-utils.ts\n\nfunction flatTrackReferenceArray(list) {\n    return list.map((item)=>{\n        if (typeof item === "string" || typeof item === "number") {\n            return `${item}`;\n        } else {\n            return getTrackReferenceId(item);\n        }\n    });\n}\n// src/sorting/tile-array-update.ts\nfunction visualPageChange(state, next) {\n    return {\n        dropped: differenceBy(state, next, getTrackReferenceId),\n        added: differenceBy(next, state, getTrackReferenceId)\n    };\n}\nfunction listNeedsUpdating(changes) {\n    return changes.added.length !== 0 || changes.dropped.length !== 0;\n}\nfunction findIndex(trackReference, trackReferences) {\n    const indexToReplace = trackReferences.findIndex((trackReference_)=>getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference));\n    if (indexToReplace === -1) {\n        throw new Error(`Element not part of the array: ${getTrackReferenceId(trackReference)} not in ${flatTrackReferenceArray(trackReferences)}`);\n    }\n    return indexToReplace;\n}\nfunction swapItems(moveForward, moveBack, trackReferences) {\n    const indexToReplace = findIndex(moveForward, trackReferences);\n    const indexReplaceWith = findIndex(moveBack, trackReferences);\n    trackReferences.splice(indexToReplace, 1, moveBack);\n    trackReferences.splice(indexReplaceWith, 1, moveForward);\n    return trackReferences;\n}\nfunction dropItem(itemToDrop, list) {\n    const indexOfElementToDrop = findIndex(itemToDrop, list);\n    list.splice(indexOfElementToDrop, 1);\n    return list;\n}\nfunction addItem(itemToAdd, list) {\n    return [\n        ...list,\n        itemToAdd\n    ];\n}\nfunction divideIntoPages(list, maxElementsOnPage) {\n    const pages = chunk(list, maxElementsOnPage);\n    return pages;\n}\nfunction updatePages(currentList, nextList, maxItemsOnPage) {\n    let updatedList = refreshList(currentList, nextList);\n    if (updatedList.length < nextList.length) {\n        const addedItems = differenceBy(nextList, updatedList, getTrackReferenceId);\n        updatedList = [\n            ...updatedList,\n            ...addedItems\n        ];\n    }\n    const currentPages = divideIntoPages(updatedList, maxItemsOnPage);\n    const nextPages = divideIntoPages(nextList, maxItemsOnPage);\n    zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex)=>{\n        if (currentPage && nextPage) {\n            const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\n            const changes = visualPageChange(updatedPage, nextPage);\n            if (listNeedsUpdating(changes)) {\n                log.debug(`Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(currentPage)}, next: ${flatTrackReferenceArray(nextPage)}`, {\n                    changes\n                });\n                if (changes.added.length === changes.dropped.length) {\n                    zip(changes.added, changes.dropped).forEach(([added, dropped])=>{\n                        if (added && dropped) {\n                            updatedList = swapItems(added, dropped, updatedList);\n                        } else {\n                            throw new Error(`For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`);\n                        }\n                    });\n                }\n                if (changes.added.length === 0 && changes.dropped.length > 0) {\n                    changes.dropped.forEach((item)=>{\n                        updatedList = dropItem(item, updatedList);\n                    });\n                }\n                if (changes.added.length > 0 && changes.dropped.length === 0) {\n                    changes.added.forEach((item)=>{\n                        updatedList = addItem(item, updatedList);\n                    });\n                }\n            }\n        }\n    });\n    if (updatedList.length > nextList.length) {\n        const missingItems = differenceBy(updatedList, nextList, getTrackReferenceId);\n        updatedList = updatedList.filter((item)=>!missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item)));\n    }\n    return updatedList;\n}\nfunction refreshList(currentList, nextList) {\n    return currentList.map((currentItem)=>{\n        const updateForCurrentItem = nextList.find((newItem_)=>// If the IDs match or ..\n            getTrackReferenceId(currentItem) === getTrackReferenceId(newItem_) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n            typeof currentItem !== "number" && isTrackReferencePlaceholder(currentItem) && isTrackReference(newItem_) && isPlaceholderReplacement(currentItem, newItem_));\n        return updateForCurrentItem != null ? updateForCurrentItem : currentItem;\n    });\n}\n// src/components/mediaToggle.ts\n\n\n// src/observables/participant.ts\n\n\n// src/observables/room.ts\n\n\nfunction observeRoomEvents(room, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onRoomUpdate = ()=>{\n            subscribe.next(room);\n        };\n        events.forEach((evt)=>{\n            room.on(evt, onRoomUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                room.off(evt, onRoomUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room));\n    return observable;\n}\nfunction roomEventSelector(room, event) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const update = (...params)=>{\n            subscribe.next(params);\n        };\n        room.on(event, update);\n        const unsubscribe = ()=>{\n            room.off(event, update);\n        };\n        return unsubscribe;\n    });\n    return observable;\n}\nfunction roomObserver(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room));\n    return observable;\n}\nfunction connectionStateObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([connectionState])=>connectionState), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.state));\n}\nfunction screenShareObserver(room) {\n    let screenShareSubscriber;\n    const observers = [];\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber)=>{\n        screenShareSubscriber = subscriber;\n        return ()=>{\n            observers.forEach((observer)=>{\n                observer.unsubscribe();\n            });\n        };\n    });\n    const screenShareTracks = [];\n    const handleSub = (publication, participant)=>{\n        if (publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare && publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) {\n            return;\n        }\n        let trackMap = screenShareTracks.find((tr)=>tr.participant.identity === participant.identity);\n        const getScreenShareTracks = (participant2)=>{\n            return participant2.getTracks().filter((track)=>(track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare || track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) && track.track);\n        };\n        if (!trackMap) {\n            trackMap = {\n                participant,\n                tracks: getScreenShareTracks(participant)\n            };\n        } else {\n            const index = screenShareTracks.indexOf(trackMap);\n            screenShareTracks.splice(index, 1);\n            trackMap.tracks = getScreenShareTracks(participant);\n        }\n        if (trackMap.tracks.length > 0) {\n            screenShareTracks.push(trackMap);\n        }\n        screenShareSubscriber.next(screenShareTracks);\n    };\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed).subscribe(([, ...args])=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed).subscribe(([, ...args])=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished).subscribe((args)=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    setTimeout(()=>{\n        for (const p of room.participants.values()){\n            p.getTracks().forEach((track)=>{\n                handleSub(track, p);\n            });\n        }\n    }, 1);\n    return observable;\n}\nfunction roomInfoObserver(room) {\n    const observer = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((r)=>{\n        return {\n            name: r.name,\n            metadata: r.metadata\n        };\n    }));\n    return observer;\n}\nfunction activeSpeakerObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([speakers])=>speakers));\n}\nfunction createMediaDeviceObserver(kind, onError, requestPermissions = true) {\n    var _a;\n    const onDeviceChange = ()=>__async(this, null, function*() {\n            try {\n                const newDevices = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions);\n                deviceSubject.next(newDevices);\n            } catch (e) {\n                onError == null ? void 0 : onError(e);\n            }\n        });\n    const deviceSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const observable = deviceSubject.pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_9__.finalize)(()=>{\n        var _a2;\n        (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.removeEventListener("devicechange", onDeviceChange);\n    }));\n    if (false) {}\n    return (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__.concat)(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions).catch((e)=>onError == null ? void 0 : onError(e)), observable);\n}\nfunction createDataObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction roomAudioPlaybackAllowedObservable(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        return {\n            canPlayAudio: room2.canPlaybackAudio\n        };\n    }));\n    return observable;\n}\nfunction roomVideoPlaybackAllowedObservable(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        return {\n            canPlayVideo: room2.canPlaybackVideo\n        };\n    }));\n    return observable;\n}\nfunction createActiveDeviceObservable(room, kind) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([kindOfDevice])=>kindOfDevice === kind), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([kind2, deviceId])=>{\n        log.debug("activeDeviceObservable | RoomEvent.ActiveDeviceChanged", {\n            kind: kind2,\n            deviceId\n        });\n        return deviceId;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.getActiveDevice(kind)));\n}\nfunction encryptionStatusObservable(room, participant) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([, p])=>participant.identity === (p == null ? void 0 : p.identity) || !p && participant.identity === room.localParticipant.identity), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([encrypted])=>encrypted), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? participant.isE2EEEnabled : participant.isEncrypted));\n}\n// src/components/mediaTrack.ts\n\n\n// src/styles-interface/class-prefixer.ts\nfunction prefixClass(unprefixedClassName) {\n    return `${cssPrefix}-${unprefixedClassName}`;\n}\n// src/components/mediaTrack.ts\nfunction setupMediaTrack(trackIdentifier) {\n    const initialPub = getTrackByIdentifier(trackIdentifier);\n    const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>{\n        return getTrackByIdentifier(trackIdentifier);\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(initialPub));\n    const className = prefixClass(trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? "participant-media-video" : "participant-media-audio");\n    return {\n        className,\n        trackObserver\n    };\n}\nfunction getTrackByIdentifier(options) {\n    if (isTrackReference(options)) {\n        return options.publication;\n    } else {\n        const { source, name, participant } = options;\n        if (source && name) {\n            return participant.getTracks().find((pub)=>pub.source === source && pub.trackName === name);\n        } else if (name) {\n            return participant.getTrackByName(name);\n        } else if (source) {\n            return participant.getTrack(source);\n        } else {\n            throw new Error("At least one of source and name needs to be defined");\n        }\n    }\n}\n// src/observables/participant.ts\nfunction observeParticipantEvents(participant, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onParticipantUpdate = ()=>{\n            subscribe.next(participant);\n        };\n        events.forEach((evt)=>{\n            participant.on(evt, onParticipantUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                participant.off(evt, onParticipantUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant));\n    return observable;\n}\nfunction observeParticipantMedia(participant) {\n    const participantObserver = observeParticipantEvents(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged, // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((p)=>{\n        const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\n        const microphoneTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone);\n        const cameraTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n        const participantMedia = {\n            isCameraEnabled,\n            isMicrophoneEnabled,\n            isScreenShareEnabled,\n            cameraTrack,\n            microphoneTrack,\n            participant: p\n        };\n        return participantMedia;\n    }));\n    return participantObserver;\n}\nfunction createTrackObserver(participant, options) {\n    return observeParticipantMedia(participant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>{\n        return {\n            publication: getTrackByIdentifier(options)\n        };\n    }));\n}\nfunction participantInfoObserver(participant) {\n    const observer = observeParticipantEvents(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(({ name, identity, metadata })=>{\n        return {\n            name,\n            identity,\n            metadata\n        };\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)({\n        name: participant.name,\n        identity: participant.identity,\n        metadata: participant.metadata\n    }));\n    return observer;\n}\nfunction createConnectionQualityObserver(participant) {\n    const observer = participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([quality])=>quality), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant.connectionQuality));\n    return observer;\n}\nfunction participantEventSelector(participant, event) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const update = (...params)=>{\n            subscribe.next(params);\n        };\n        participant.on(event, update);\n        const unsubscribe = ()=>{\n            participant.off(event, update);\n        };\n        return unsubscribe;\n    });\n    return observable;\n}\nfunction mutedObserver(trackRef) {\n    var _a, _b, _c, _d;\n    return observeParticipantEvents(trackRef.participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((participant)=>{\n        var _a2, _b2;\n        const pub = (_a2 = trackRef.publication) != null ? _a2 : participant.getTrack(trackRef.source);\n        return (_b2 = pub == null ? void 0 : pub.isMuted) != null ? _b2 : true;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)((_d = (_c = (_a = trackRef.publication) == null ? void 0 : _a.isMuted) != null ? _c : (_b = trackRef.participant.getTrack(trackRef.source)) == null ? void 0 : _b.isMuted) != null ? _d : true));\n}\nfunction createIsSpeakingObserver(participant) {\n    return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([isSpeaking])=>isSpeaking));\n}\nfunction connectedParticipantsObserver(room, options = {}) {\n    var _a;\n    let subscriber;\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((sub)=>{\n        subscriber = sub;\n        return ()=>listener.unsubscribe();\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(Array.from(room.participants.values())));\n    const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n    const roomEvents = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        ...additionalRoomEvents\n    ]));\n    const listener = observeRoomEvents(room, ...roomEvents).subscribe((r)=>subscriber == null ? void 0 : subscriber.next(Array.from(r.participants.values())));\n    if (room.participants.size > 0) {\n        subscriber == null ? void 0 : subscriber.next(Array.from(room.participants.values()));\n    }\n    return observable;\n}\nfunction connectedParticipantObserver(room, identity, options = {}) {\n    var _a;\n    const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_map_startWith_switchMap_rxjs__WEBPACK_IMPORTED_MODULE_12__.switchMap)((r)=>{\n        const participant = r.getParticipantByIdentity(identity);\n        if (participant) {\n            return observeParticipantEvents(participant, ...additionalEvents);\n        } else {\n            return new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>subscribe.next(void 0));\n        }\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.getParticipantByIdentity(identity)));\n    return observable;\n}\nfunction participantPermissionObserver(participant) {\n    const observer = participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>participant.permissions), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant.permissions));\n    return observer;\n}\n// src/components/mediaToggle.ts\nfunction setupMediaToggle(source, room, options) {\n    const { localParticipant } = room;\n    const getSourceEnabled = (source2, localParticipant2)=>{\n        let isEnabled = false;\n        switch(source2){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                isEnabled = localParticipant2.isCameraEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                isEnabled = localParticipant2.isMicrophoneEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                isEnabled = localParticipant2.isScreenShareEnabled;\n                break;\n            default:\n                break;\n        }\n        return isEnabled;\n    };\n    const enabledObserver = observeParticipantMedia(localParticipant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((media)=>{\n        return getSourceEnabled(source, media.participant);\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(getSourceEnabled(source, localParticipant)));\n    const pendingSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const toggle = (forceState, captureOptions)=>__async(this, null, function*() {\n            try {\n                captureOptions != null ? captureOptions : captureOptions = options;\n                pendingSubject.next(true);\n                switch(source){\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                        yield localParticipant.setCameraEnabled(forceState != null ? forceState : !localParticipant.isCameraEnabled, captureOptions);\n                        break;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                        yield localParticipant.setMicrophoneEnabled(forceState != null ? forceState : !localParticipant.isMicrophoneEnabled, captureOptions);\n                        break;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                        yield localParticipant.setScreenShareEnabled(forceState != null ? forceState : !localParticipant.isScreenShareEnabled, captureOptions);\n                        break;\n                    default:\n                        break;\n                }\n            } finally{\n                pendingSubject.next(false);\n            }\n        });\n    const className = prefixClass("button");\n    return {\n        className,\n        toggle,\n        enabledObserver,\n        pendingObserver: pendingSubject.asObservable()\n    };\n}\nfunction setupManualToggle() {\n    let state = false;\n    const enabledSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const pendingSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const toggle = (forceState)=>__async(this, null, function*() {\n            pendingSubject.next(true);\n            state = forceState != null ? forceState : !state;\n            enabledSubject.next(state);\n            pendingSubject.next(false);\n        });\n    const className = prefixClass("button");\n    return {\n        className,\n        toggle,\n        enabledObserver: enabledSubject.asObservable(),\n        pendingObserver: pendingSubject.asObservable()\n    };\n}\n// src/components/mediaDeviceSelect.ts\n\n\nfunction setupDeviceSelector(kind, room, localTrack) {\n    const activeDeviceSubject = new _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(void 0);\n    const activeDeviceObservable = room ? createActiveDeviceObservable(room, kind) : activeDeviceSubject.asObservable();\n    const setActiveMediaDevice = (_0, ..._1)=>__async(this, [\n            _0,\n            ..._1\n        ], function*(id, options = {}) {\n            var _a, _b, _c;\n            if (room) {\n                log.debug(`Switching active device of kind "${kind}" with id ${id}.`);\n                yield room.switchActiveDevice(kind, id, options.exact);\n                const actualDeviceId = (_a = room.getActiveDevice(kind)) != null ? _a : id;\n                if (actualDeviceId !== id && id !== "default") {\n                    log.info(`We tried to select the device with id (${id}), but the browser decided to select the device with id (${actualDeviceId}) instead.`);\n                }\n                let targetTrack = void 0;\n                if (kind === "audioinput") targetTrack = (_b = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : _b.track;\n                else if (kind === "videoinput") {\n                    targetTrack = (_c = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : _c.track;\n                }\n                const useDefault = id === "default" && !targetTrack || id === "default" && (targetTrack == null ? void 0 : targetTrack.mediaStreamTrack.label.startsWith("Default"));\n                activeDeviceSubject.next(useDefault ? id : actualDeviceId);\n            } else if (localTrack) {\n                yield localTrack.setDeviceId(options.exact ? {\n                    exact: id\n                } : id);\n                const actualId = yield localTrack.getDeviceId();\n                activeDeviceSubject.next(id === "default" && localTrack.mediaStreamTrack.label.startsWith("Default") ? id : actualId);\n            } else if (activeDeviceSubject.value !== id) {\n                log.warn("device switch skipped, please provide either a room or a local track to switch on. ");\n                activeDeviceSubject.next(id);\n            }\n        });\n    const className = prefixClass("media-device-select");\n    return {\n        className,\n        activeDeviceObservable,\n        setActiveMediaDevice\n    };\n}\n// src/components/disconnectButton.ts\nfunction setupDisconnectButton(room) {\n    const disconnect = (stopTracks)=>{\n        room.disconnect(stopTracks);\n    };\n    const className = prefixClass("disconnect-button");\n    return {\n        className,\n        disconnect\n    };\n}\n// src/components/connectionQualityIndicator.ts\nfunction setupConnectionQualityIndicator(participant) {\n    const className = prefixClass("connection-quality");\n    const connectionQualityObserver = createConnectionQualityObserver(participant);\n    return {\n        className,\n        connectionQualityObserver\n    };\n}\n// src/components/trackMutedIndicator.ts\n\nfunction setupTrackMutedIndicator(trackRef) {\n    let classForSource = "track-muted-indicator-camera";\n    switch(trackRef.source){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n            classForSource = "track-muted-indicator-camera";\n            break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n            classForSource = "track-muted-indicator-microphone";\n            break;\n        default:\n            break;\n    }\n    const className = prefixClass(classForSource);\n    const mediaMutedObserver = mutedObserver(trackRef);\n    return {\n        className,\n        mediaMutedObserver\n    };\n}\n// src/components/participantName.ts\nfunction setupParticipantName(participant) {\n    const infoObserver = participantInfoObserver(participant);\n    return {\n        className: "lk-participant-name",\n        infoObserver\n    };\n}\n// src/components/participantTile.ts\nfunction setupParticipantTile() {\n    const className = prefixClass("participant-tile");\n    return {\n        className\n    };\n}\n// src/components/chat.ts\n\n\n// src/observables/dataChannel.ts\n\n\nvar DataTopic = {\n    CHAT: "lk-chat-topic"\n};\nfunction sendMessage(_0, _1, _2) {\n    return __async(this, arguments, function*(localParticipant, payload, topic, options = {}) {\n        const { kind, destination } = options;\n        yield localParticipant.publishData(payload, kind != null ? kind : livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE, {\n            destination,\n            topic\n        });\n    });\n}\nfunction setupDataMessageHandler(room, topic, onMessage) {\n    const messageObservable = createDataObserver(room).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([, , , messageTopic])=>topic === void 0 || messageTopic === topic), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([payload, participant, , messageTopic])=>{\n        const msg = {\n            payload,\n            topic: messageTopic,\n            from: participant\n        };\n        onMessage == null ? void 0 : onMessage(msg);\n        return msg;\n    }));\n    let isSendingSubscriber;\n    const isSendingObservable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber)=>{\n        isSendingSubscriber = subscriber;\n    });\n    const send = (_0, ..._1)=>__async(this, [\n            _0,\n            ..._1\n        ], function*(payload, options = {}) {\n            isSendingSubscriber.next(true);\n            try {\n                yield sendMessage(room.localParticipant, payload, topic, options);\n            } finally{\n                isSendingSubscriber.next(false);\n            }\n        });\n    return {\n        messageObservable,\n        isSendingObservable,\n        send\n    };\n}\n// src/components/chat.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar topicSubjectMap = /* @__PURE__ */ new Map();\nvar encode = (message)=>encoder.encode(JSON.stringify({\n        message: message.message,\n        timestamp: message.timestamp\n    }));\nvar decode = (message)=>JSON.parse(decoder.decode(message));\nfunction setupChat(room, options) {\n    var _a, _b;\n    const onDestroyObservable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const { messageDecoder, messageEncoder, channelTopic } = options != null ? options : {};\n    const topic = channelTopic != null ? channelTopic : DataTopic.CHAT;\n    let needsSetup = false;\n    if (!topicSubjectMap.has(room)) {\n        needsSetup = true;\n    }\n    const topicMap = (_a = topicSubjectMap.get(room)) != null ? _a : /* @__PURE__ */ new Map();\n    const messageSubject = (_b = topicMap.get(topic)) != null ? _b : new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    topicMap.set(topic, messageSubject);\n    topicSubjectMap.set(room, topicMap);\n    if (needsSetup) {\n        const { messageObservable } = setupDataMessageHandler(room, topic);\n        messageObservable.pipe((0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__.takeUntil)(onDestroyObservable)).subscribe(messageSubject);\n    }\n    const finalMessageDecoder = messageDecoder != null ? messageDecoder : decode;\n    const messagesObservable = messageSubject.pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((msg)=>{\n        const parsedMessage = finalMessageDecoder(msg.payload);\n        const newMessage = __spreadProps(__spreadValues({}, parsedMessage), {\n            from: msg.from\n        });\n        return newMessage;\n    }), (0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_15__.scan)((acc, value)=>[\n            ...acc,\n            value\n        ], []), (0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__.takeUntil)(onDestroyObservable));\n    const isSending$ = new _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n    const finalMessageEncoder = messageEncoder != null ? messageEncoder : encode;\n    const send = (message)=>__async(this, null, function*() {\n            const timestamp = Date.now();\n            const encodedMsg = finalMessageEncoder({\n                message,\n                timestamp\n            });\n            isSending$.next(true);\n            try {\n                yield sendMessage(room.localParticipant, encodedMsg, topic, {\n                    kind: livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE\n                });\n                messageSubject.next({\n                    payload: encodedMsg,\n                    topic,\n                    from: room.localParticipant\n                });\n            } finally{\n                isSending$.next(false);\n            }\n        });\n    function destroy() {\n        onDestroyObservable.next();\n        onDestroyObservable.complete();\n        topicSubjectMap.clear();\n    }\n    room.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, destroy);\n    return {\n        messageObservable: messagesObservable,\n        isSendingObservable: isSending$,\n        send\n    };\n}\n// src/components/startAudio.ts\nfunction setupStartAudio() {\n    const handleStartAudioPlayback = (room)=>__async(this, null, function*() {\n            log.info("Start Audio for room: ", room);\n            yield room.startAudio();\n        });\n    const className = prefixClass("start-audio-button");\n    return {\n        className,\n        roomAudioPlaybackAllowedObservable,\n        handleStartAudioPlayback\n    };\n}\n// src/components/startVideo.ts\nfunction setupStartVideo() {\n    const handleStartVideoPlayback = (room)=>__async(this, null, function*() {\n            log.info("Start Video for room: ", room);\n            yield room.startVideo();\n        });\n    const className = prefixClass("start-audio-button");\n    return {\n        className,\n        roomVideoPlaybackAllowedObservable,\n        handleStartVideoPlayback\n    };\n}\n// src/components/chatToggle.ts\nfunction setupChatToggle() {\n    const className = [\n        prefixClass("button"),\n        prefixClass("chat-toggle")\n    ].join(" ");\n    return {\n        className\n    };\n}\n// src/components/focusToggle.ts\nfunction setupFocusToggle() {\n    const className = [\n        prefixClass("button"),\n        prefixClass("focus-toggle-button")\n    ].join(" ");\n    return {\n        className\n    };\n}\n// src/components/clearPinButton.ts\nfunction setupClearPinButton() {\n    const className = "lk-clear-pin-button lk-button";\n    return {\n        className\n    };\n}\n// src/components/room.ts\nfunction setupLiveKitRoom() {\n    const className = "lk-room-container";\n    return {\n        className\n    };\n}\n// src/observables/track.ts\n\n\nfunction trackObservable(track) {\n    const trackObserver = observeTrackEvents(track, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Muted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Subscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unsubscribed);\n    return trackObserver;\n}\nfunction observeTrackEvents(track, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onTrackUpdate = ()=>{\n            subscribe.next(track);\n        };\n        events.forEach((evt)=>{\n            track.on(evt, onTrackUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                track.off(evt, onTrackUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(track));\n    return observable;\n}\nfunction getTrackReferences(room, sources, onlySubscribedTracks = true) {\n    const localParticipant = room.localParticipant;\n    const allParticipants = [\n        localParticipant,\n        ...Array.from(room.participants.values())\n    ];\n    const trackReferences = [];\n    allParticipants.forEach((participant)=>{\n        sources.forEach((source)=>{\n            const sourceReferences = Array.from(participant.tracks.values()).filter((track)=>track.source === source && // either return all or only the ones that are subscribed\n                (!onlySubscribedTracks || track.track)).map((track)=>{\n                return {\n                    participant,\n                    publication: track,\n                    source: track.source\n                };\n            });\n            trackReferences.push(...sourceReferences);\n        });\n    });\n    return {\n        trackReferences,\n        participants: allParticipants\n    };\n}\nfunction trackReferencesObservable(room, sources, options) {\n    var _a, _b;\n    const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n    const onlySubscribedTracks = (_b = options.onlySubscribed) != null ? _b : true;\n    const roomEvents = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n        ...additionalRoomEvents\n    ]).values());\n    const observable = observeRoomEvents(room, ...roomEvents).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        const data = getTrackReferences(room2, sources, onlySubscribedTracks);\n        log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\n        return data;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(getTrackReferences(room, sources, onlySubscribedTracks)));\n    return observable;\n}\n// src/observables/dom-event.ts\n\nfunction createInteractingObservable(htmlElement, inactiveAfter = 1e3) {\n    if (htmlElement === null) return (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(false);\n    const move$ = (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_17__.fromEvent)(htmlElement, "mousemove", {\n        passive: true\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>true));\n    const moveAndStop$ = move$.pipe((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_18__.timeout)({\n        each: inactiveAfter,\n        with: ()=>(0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__.concat)((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(false), moveAndStop$.pipe((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_19__.skipUntil)(move$)))\n    }), (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    return moveAndStop$;\n}\n// src/persistent-storage/local-storage-helpers.ts\nfunction saveToLocalStorage(key, value) {\n    if (typeof localStorage === "undefined") {\n        log.error("Local storage is not available.");\n        return;\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        log.error(`Error setting item to local storage: ${error}`);\n    }\n}\nfunction loadFromLocalStorage(key) {\n    if (typeof localStorage === "undefined") {\n        log.error("Local storage is not available.");\n        return void 0;\n    }\n    try {\n        const item = localStorage.getItem(key);\n        if (!item) {\n            log.warn(`Item with key ${key} does not exist in local storage.`);\n            return void 0;\n        }\n        return JSON.parse(item);\n    } catch (error) {\n        log.error(`Error getting item from local storage: ${error}`);\n        return void 0;\n    }\n}\nfunction createLocalStorageInterface(key) {\n    return {\n        load: ()=>loadFromLocalStorage(key),\n        save: (value)=>saveToLocalStorage(key, value)\n    };\n}\n// src/persistent-storage/user-choices.ts\nvar USER_CHOICES_KEY = `${cssPrefix}-user-choices`;\nvar defaultUserChoices = {\n    videoEnabled: true,\n    audioEnabled: true,\n    videoDeviceId: "",\n    audioDeviceId: "",\n    username: "",\n    e2ee: false,\n    sharedPassphrase: ""\n};\nvar { load, save } = createLocalStorageInterface(USER_CHOICES_KEY);\nfunction saveUserChoices(userChoices, preventSave = false) {\n    if (preventSave === true) {\n        return;\n    }\n    const _a = userChoices, { e2ee, sharedPassphrase } = _a, toSave = __objRest(_a, [\n        "e2ee",\n        "sharedPassphrase"\n    ]);\n    save(toSave);\n}\nfunction loadUserChoices(defaults, preventLoad = false) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const fallback = {\n        videoEnabled: (_a = defaults == null ? void 0 : defaults.videoEnabled) != null ? _a : defaultUserChoices.videoEnabled,\n        audioEnabled: (_b = defaults == null ? void 0 : defaults.audioEnabled) != null ? _b : defaultUserChoices.audioEnabled,\n        videoDeviceId: (_c = defaults == null ? void 0 : defaults.videoDeviceId) != null ? _c : defaultUserChoices.videoDeviceId,\n        audioDeviceId: (_d = defaults == null ? void 0 : defaults.audioDeviceId) != null ? _d : defaultUserChoices.audioDeviceId,\n        username: (_e = defaults == null ? void 0 : defaults.username) != null ? _e : defaultUserChoices.username,\n        e2ee: (_f = defaults == null ? void 0 : defaults.e2ee) != null ? _f : defaultUserChoices.e2ee,\n        sharedPassphrase: (_g = defaults == null ? void 0 : defaults.sharedPassphrase) != null ? _g : defaultUserChoices.sharedPassphrase\n    };\n    if (preventLoad) {\n        return fallback;\n    } else {\n        const maybeLoadedObject = load();\n        const result = __spreadValues(__spreadValues({}, fallback), maybeLoadedObject != null ? maybeLoadedObject : {});\n        return result;\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@livekit/components-core/dist/index.mjs\n',
      );

      /***/
    },

  /***/ "(ssr)/../node_modules/@livekit/components-react/dist/index.mjs":
    /*!****************************************************************!*\
  !*** ../node_modules/@livekit/components-react/dist/index.mjs ***!
  \****************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: () => (/* binding */ AudioConference),\n/* harmony export */   AudioTrack: () => (/* binding */ AudioTrack),\n/* harmony export */   AudioVisualizer: () => (/* binding */ AudioVisualizer),\n/* harmony export */   CameraDisabledIcon: () => (/* binding */ CameraDisabledIcon_default),\n/* harmony export */   CameraIcon: () => (/* binding */ CameraIcon_default),\n/* harmony export */   CarouselLayout: () => (/* binding */ CarouselLayout),\n/* harmony export */   CarouselView: () => (/* binding */ CarouselView),\n/* harmony export */   Chat: () => (/* binding */ Chat),\n/* harmony export */   ChatCloseIcon: () => (/* binding */ ChatCloseIcon_default),\n/* harmony export */   ChatEntry: () => (/* binding */ ChatEntry),\n/* harmony export */   ChatIcon: () => (/* binding */ ChatIcon_default),\n/* harmony export */   ChatToggle: () => (/* binding */ ChatToggle),\n/* harmony export */   Chevron: () => (/* binding */ Chevron_default),\n/* harmony export */   ClearPinButton: () => (/* binding */ ClearPinButton),\n/* harmony export */   ConnectionQualityIndicator: () => (/* binding */ ConnectionQualityIndicator),\n/* harmony export */   ConnectionState: () => (/* binding */ ConnectionState3),\n/* harmony export */   ConnectionStateToast: () => (/* binding */ ConnectionStateToast),\n/* harmony export */   ControlBar: () => (/* binding */ ControlBar),\n/* harmony export */   DisconnectButton: () => (/* binding */ DisconnectButton),\n/* harmony export */   FocusLayout: () => (/* binding */ FocusLayout),\n/* harmony export */   FocusLayoutContainer: () => (/* binding */ FocusLayoutContainer),\n/* harmony export */   FocusToggle: () => (/* binding */ FocusToggle),\n/* harmony export */   FocusToggleIcon: () => (/* binding */ FocusToggleIcon_default),\n/* harmony export */   GearIcon: () => (/* binding */ GearIcon_default),\n/* harmony export */   GridLayout: () => (/* binding */ GridLayout),\n/* harmony export */   LKFeatureContext: () => (/* binding */ LKFeatureContext),\n/* harmony export */   LayoutContext: () => (/* binding */ LayoutContext),\n/* harmony export */   LayoutContextProvider: () => (/* binding */ LayoutContextProvider),\n/* harmony export */   LeaveIcon: () => (/* binding */ LeaveIcon_default),\n/* harmony export */   LiveKitRoom: () => (/* binding */ LiveKitRoom),\n/* harmony export */   LockLockedIcon: () => (/* binding */ LockLockedIcon_default),\n/* harmony export */   MediaDeviceMenu: () => (/* binding */ MediaDeviceMenu),\n/* harmony export */   MediaDeviceSelect: () => (/* binding */ MediaDeviceSelect),\n/* harmony export */   MicDisabledIcon: () => (/* binding */ MicDisabledIcon_default),\n/* harmony export */   MicIcon: () => (/* binding */ MicIcon_default),\n/* harmony export */   ParticipantAudioTile: () => (/* binding */ ParticipantAudioTile),\n/* harmony export */   ParticipantContext: () => (/* binding */ ParticipantContext),\n/* harmony export */   ParticipantContextIfNeeded: () => (/* binding */ ParticipantContextIfNeeded),\n/* harmony export */   ParticipantLoop: () => (/* binding */ ParticipantLoop),\n/* harmony export */   ParticipantName: () => (/* binding */ ParticipantName),\n/* harmony export */   ParticipantPlaceholder: () => (/* binding */ ParticipantPlaceholder_default),\n/* harmony export */   ParticipantTile: () => (/* binding */ ParticipantTile),\n/* harmony export */   PreJoin: () => (/* binding */ PreJoin),\n/* harmony export */   QualityExcellentIcon: () => (/* binding */ QualityExcellentIcon_default),\n/* harmony export */   QualityGoodIcon: () => (/* binding */ QualityGoodIcon_default),\n/* harmony export */   QualityPoorIcon: () => (/* binding */ QualityPoorIcon_default),\n/* harmony export */   QualityUnknownIcon: () => (/* binding */ QualityUnknownIcon_default),\n/* harmony export */   RoomAudioRenderer: () => (/* binding */ RoomAudioRenderer),\n/* harmony export */   RoomContext: () => (/* binding */ RoomContext),\n/* harmony export */   RoomName: () => (/* binding */ RoomName),\n/* harmony export */   ScreenShareIcon: () => (/* binding */ ScreenShareIcon_default),\n/* harmony export */   ScreenShareStopIcon: () => (/* binding */ ScreenShareStopIcon_default),\n/* harmony export */   SpinnerIcon: () => (/* binding */ SpinnerIcon_default),\n/* harmony export */   StartAudio: () => (/* binding */ StartAudio),\n/* harmony export */   Toast: () => (/* binding */ Toast),\n/* harmony export */   TrackContext: () => (/* binding */ TrackContext),\n/* harmony export */   TrackLoop: () => (/* binding */ TrackLoop),\n/* harmony export */   TrackMutedIndicator: () => (/* binding */ TrackMutedIndicator),\n/* harmony export */   TrackRefContext: () => (/* binding */ TrackRefContext),\n/* harmony export */   TrackToggle: () => (/* binding */ TrackToggle),\n/* harmony export */   UnfocusToggleIcon: () => (/* binding */ UnfocusToggleIcon_default),\n/* harmony export */   VideoConference: () => (/* binding */ VideoConference),\n/* harmony export */   VideoTrack: () => (/* binding */ VideoTrack),\n/* harmony export */   formatChatMessageLinks: () => (/* binding */ formatChatMessageLinks),\n/* harmony export */   isTrackReference: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference),\n/* harmony export */   setLogExtension: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setLogExtension),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setLogLevel),\n/* harmony export */   useAudioPlayback: () => (/* binding */ useAudioPlayback),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useChatToggle: () => (/* binding */ useChatToggle),\n/* harmony export */   useClearPinButton: () => (/* binding */ useClearPinButton),\n/* harmony export */   useConnectionQualityIndicator: () => (/* binding */ useConnectionQualityIndicator),\n/* harmony export */   useConnectionState: () => (/* binding */ useConnectionState),\n/* harmony export */   useCreateLayoutContext: () => (/* binding */ useCreateLayoutContext),\n/* harmony export */   useDataChannel: () => (/* binding */ useDataChannel),\n/* harmony export */   useDisconnectButton: () => (/* binding */ useDisconnectButton),\n/* harmony export */   useEnsureCreateLayoutContext: () => (/* binding */ useEnsureCreateLayoutContext),\n/* harmony export */   useEnsureLayoutContext: () => (/* binding */ useEnsureLayoutContext),\n/* harmony export */   useEnsureParticipant: () => (/* binding */ useEnsureParticipant),\n/* harmony export */   useEnsureRoom: () => (/* binding */ useEnsureRoom),\n/* harmony export */   useEnsureTrackRef: () => (/* binding */ useEnsureTrackRef),\n/* harmony export */   useEnsureTrackReference: () => (/* binding */ useEnsureTrackReference),\n/* harmony export */   useFacingMode: () => (/* binding */ useFacingMode),\n/* harmony export */   useFeatureContext: () => (/* binding */ useFeatureContext),\n/* harmony export */   useFocusToggle: () => (/* binding */ useFocusToggle),\n/* harmony export */   useGridLayout: () => (/* binding */ useGridLayout),\n/* harmony export */   useIsEncrypted: () => (/* binding */ useIsEncrypted),\n/* harmony export */   useIsMuted: () => (/* binding */ useIsMuted),\n/* harmony export */   useIsSpeaking: () => (/* binding */ useIsSpeaking),\n/* harmony export */   useLayoutContext: () => (/* binding */ useLayoutContext),\n/* harmony export */   useLiveKitRoom: () => (/* binding */ useLiveKitRoom),\n/* harmony export */   useLocalParticipant: () => (/* binding */ useLocalParticipant),\n/* harmony export */   useLocalParticipantPermissions: () => (/* binding */ useLocalParticipantPermissions),\n/* harmony export */   useMaybeLayoutContext: () => (/* binding */ useMaybeLayoutContext),\n/* harmony export */   useMaybeParticipantContext: () => (/* binding */ useMaybeParticipantContext),\n/* harmony export */   useMaybeRoomContext: () => (/* binding */ useMaybeRoomContext),\n/* harmony export */   useMaybeTrackContext: () => (/* binding */ useMaybeTrackContext),\n/* harmony export */   useMaybeTrackRefContext: () => (/* binding */ useMaybeTrackRefContext),\n/* harmony export */   useMediaDeviceSelect: () => (/* binding */ useMediaDeviceSelect),\n/* harmony export */   useMediaDevices: () => (/* binding */ useMediaDevices),\n/* harmony export */   useMediaTrack: () => (/* binding */ useMediaTrack),\n/* harmony export */   useMediaTrackByName: () => (/* binding */ useMediaTrackByName),\n/* harmony export */   useMultibandTrackVolume: () => (/* binding */ useMultibandTrackVolume),\n/* harmony export */   usePagination: () => (/* binding */ usePagination),\n/* harmony export */   useParticipantContext: () => (/* binding */ useParticipantContext),\n/* harmony export */   useParticipantInfo: () => (/* binding */ useParticipantInfo),\n/* harmony export */   useParticipantPermissions: () => (/* binding */ useParticipantPermissions),\n/* harmony export */   useParticipantTile: () => (/* binding */ useParticipantTile),\n/* harmony export */   useParticipants: () => (/* binding */ useParticipants),\n/* harmony export */   usePersistentUserChoices: () => (/* binding */ usePersistentUserChoices),\n/* harmony export */   usePinnedTracks: () => (/* binding */ usePinnedTracks),\n/* harmony export */   usePreviewDevice: () => (/* binding */ usePreviewDevice),\n/* harmony export */   usePreviewTracks: () => (/* binding */ usePreviewTracks),\n/* harmony export */   useRemoteParticipant: () => (/* binding */ useRemoteParticipant),\n/* harmony export */   useRemoteParticipants: () => (/* binding */ useRemoteParticipants),\n/* harmony export */   useRoomContext: () => (/* binding */ useRoomContext),\n/* harmony export */   useRoomInfo: () => (/* binding */ useRoomInfo),\n/* harmony export */   useSortedParticipants: () => (/* binding */ useSortedParticipants),\n/* harmony export */   useSpeakingParticipants: () => (/* binding */ useSpeakingParticipants),\n/* harmony export */   useStartAudio: () => (/* binding */ useStartAudio),\n/* harmony export */   useStartVideo: () => (/* binding */ useStartVideo),\n/* harmony export */   useSwipe: () => (/* binding */ useSwipe),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTrack: () => (/* binding */ useTrack),\n/* harmony export */   useTrackByName: () => (/* binding */ useTrackByName),\n/* harmony export */   useTrackContext: () => (/* binding */ useTrackContext),\n/* harmony export */   useTrackMutedIndicator: () => (/* binding */ useTrackMutedIndicator),\n/* harmony export */   useTrackRefContext: () => (/* binding */ useTrackRefContext),\n/* harmony export */   useTrackToggle: () => (/* binding */ useTrackToggle),\n/* harmony export */   useTrackVolume: () => (/* binding */ useTrackVolume),\n/* harmony export */   useTracks: () => (/* binding */ useTracks),\n/* harmony export */   useVisualStableUpdate: () => (/* binding */ useVisualStableUpdate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "(ssr)/../node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js");\n/* harmony import */ var _react_hook_latest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-hook/latest */ "(ssr)/../node_modules/@react-hook/latest/dist/esm/index.mjs");\n/* harmony import */ var _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livekit/components-core */ "(ssr)/../node_modules/@livekit/components-core/dist/index.mjs");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! clsx */ "(ssr)/../node_modules/clsx/dist/clsx.mjs");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! livekit-client */ "(ssr)/../node_modules/livekit-client/dist/livekit-client.esm.mjs");\n/* harmony import */ var usehooks_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! usehooks-ts */ "(ssr)/../node_modules/usehooks-ts/dist/esm/index.js");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/components/controls/ClearPinButton.tsx\n\n// src/hooks/useAudioPlayback.ts\n\n// src/hooks/internal/useResizeObserver.ts\n\n\nfunction useResizeObserver(target, callback) {\n    const resizeObserver = getResizeObserver();\n    const storedCallback = (0,_react_hook_latest__WEBPACK_IMPORTED_MODULE_1__["default"])(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        let didUnsubscribe = false;\n        const targetEl = target.current;\n        if (!targetEl) return;\n        function cb(entry, observer) {\n            if (didUnsubscribe) return;\n            storedCallback.current(entry, observer);\n        }\n        resizeObserver == null ? void 0 : resizeObserver.subscribe(targetEl, cb);\n        return ()=>{\n            didUnsubscribe = true;\n            resizeObserver == null ? void 0 : resizeObserver.unsubscribe(targetEl, cb);\n        };\n    }, [\n        target.current,\n        resizeObserver,\n        storedCallback\n    ]);\n    return resizeObserver == null ? void 0 : resizeObserver.observer;\n}\nfunction createResizeObserver() {\n    let ticking = false;\n    let allEntries = [];\n    const callbacks = /* @__PURE__ */ new Map();\n    if (true) {\n        return;\n    }\n    const observer = new ResizeObserver((entries, obs)=>{\n        allEntries = allEntries.concat(entries);\n        if (!ticking) {\n            window.requestAnimationFrame(()=>{\n                const triggered = /* @__PURE__ */ new Set();\n                for(let i = 0; i < allEntries.length; i++){\n                    if (triggered.has(allEntries[i].target)) continue;\n                    triggered.add(allEntries[i].target);\n                    const cbs = callbacks.get(allEntries[i].target);\n                    cbs == null ? void 0 : cbs.forEach((cb)=>cb(allEntries[i], obs));\n                }\n                allEntries = [];\n                ticking = false;\n            });\n        }\n        ticking = true;\n    });\n    return {\n        observer,\n        subscribe (target, callback) {\n            var _a;\n            observer.observe(target);\n            const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n            cbs.push(callback);\n            callbacks.set(target, cbs);\n        },\n        unsubscribe (target, callback) {\n            var _a;\n            const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n            if (cbs.length === 1) {\n                observer.unobserve(target);\n                callbacks.delete(target);\n                return;\n            }\n            const cbIndex = cbs.indexOf(callback);\n            if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n            callbacks.set(target, cbs);\n        }\n    };\n}\nvar _resizeObserver;\nvar getResizeObserver = ()=>!_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\nvar useSize = (target)=>{\n    const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        width: 0,\n        height: 0\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (target.current) {\n            const { width, height } = target.current.getBoundingClientRect();\n            setSize({\n                width,\n                height\n            });\n        }\n    }, [\n        target.current\n    ]);\n    const resizeCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((entry)=>setSize(entry.contentRect), []);\n    useResizeObserver(target, resizeCallback);\n    return size;\n};\n// src/hooks/internal/useObservableState.ts\n\nfunction useObservableState(observable, startWith) {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(startWith);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (true) return;\n        const subscription = observable.subscribe(setState);\n        return ()=>subscription.unsubscribe();\n    }, [\n        observable\n    ]);\n    return state;\n}\n// src/hooks/internal/useMediaQuery.ts\n\nfunction useMediaQuery(query) {\n    const getMatches = (query2)=>{\n        if (false) {}\n        return false;\n    };\n    const [matches, setMatches] = react__WEBPACK_IMPORTED_MODULE_0__.useState(getMatches(query));\n    function handleChange() {\n        setMatches(getMatches(query));\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const matchMedia = window.matchMedia(query);\n        handleChange();\n        if (matchMedia.addListener) {\n            matchMedia.addListener(handleChange);\n        } else {\n            matchMedia.addEventListener("change", handleChange);\n        }\n        return ()=>{\n            if (matchMedia.removeListener) {\n                matchMedia.removeListener(handleChange);\n            } else {\n                matchMedia.removeEventListener("change", handleChange);\n            }\n        };\n    }, [\n        query\n    ]);\n    return matches;\n}\n// src/hooks/useAudioPlayback.ts\n\n// src/context/layout-context.ts\n\n\n// src/context/chat-context.ts\nfunction chatReducer(state, action) {\n    if (action.msg === "show_chat") {\n        return __spreadProps(__spreadValues({}, state), {\n            showChat: true,\n            unreadMessages: 0\n        });\n    } else if (action.msg === "hide_chat") {\n        return __spreadProps(__spreadValues({}, state), {\n            showChat: false\n        });\n    } else if (action.msg === "toggle_chat") {\n        const newState = __spreadProps(__spreadValues({}, state), {\n            showChat: !state.showChat\n        });\n        if (newState.showChat === true) {\n            newState.unreadMessages = 0;\n        }\n        return newState;\n    } else if (action.msg === "unread_msg") {\n        return __spreadProps(__spreadValues({}, state), {\n            unreadMessages: action.count\n        });\n    } else {\n        return __spreadValues({}, state);\n    }\n}\n// src/context/pin-context.ts\nfunction pinReducer(state, action) {\n    if (action.msg === "set_pin") {\n        return [\n            action.trackReference\n        ];\n    } else if (action.msg === "clear_pin") {\n        return [];\n    } else {\n        return __spreadValues({}, state);\n    }\n}\n// src/context/layout-context.ts\nvar LayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useLayoutContext() {\n    const layoutContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n    if (!layoutContext) {\n        throw Error("Tried to access LayoutContext context outside a LayoutContextProvider provider.");\n    }\n    return layoutContext;\n}\nfunction useEnsureLayoutContext(layoutContext) {\n    const layout = useMaybeLayoutContext();\n    layoutContext != null ? layoutContext : layoutContext = layout;\n    if (!layoutContext) {\n        throw Error("Tried to access LayoutContext context outside a LayoutContextProvider provider.");\n    }\n    return layoutContext;\n}\nfunction useCreateLayoutContext() {\n    const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n    const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n    return {\n        pin: {\n            dispatch: pinDispatch,\n            state: pinState\n        },\n        widget: {\n            dispatch: widgetDispatch,\n            state: widgetState\n        }\n    };\n}\nfunction useEnsureCreateLayoutContext(layoutContext) {\n    const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n    const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n    return layoutContext != null ? layoutContext : {\n        pin: {\n            dispatch: pinDispatch,\n            state: pinState\n        },\n        widget: {\n            dispatch: widgetDispatch,\n            state: widgetState\n        }\n    };\n}\nfunction useMaybeLayoutContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n}\n// src/context/participant-context.ts\n\n// src/context/track-reference-context.ts\n\nvar TrackRefContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nvar TrackContext = TrackRefContext;\nfunction useTrackContext() {\n    return useTrackRefContext();\n}\nfunction useTrackRefContext() {\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n    if (!trackReference) {\n        throw Error("tried to access track context outside of track context provider");\n    }\n    return trackReference;\n}\nfunction useMaybeTrackContext() {\n    return useMaybeTrackRefContext();\n}\nfunction useMaybeTrackRefContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n}\nfunction useEnsureTrackReference(track) {\n    return useEnsureTrackRef(track);\n}\nfunction useEnsureTrackRef(trackRef) {\n    const context = useMaybeTrackRefContext();\n    const ref = trackRef != null ? trackRef : context;\n    if (!ref) {\n        throw new Error("No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly");\n    }\n    return ref;\n}\n// src/context/participant-context.ts\nvar ParticipantContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useParticipantContext() {\n    const participant = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n    if (!participant) {\n        throw Error("tried to access participant context outside of participant context provider");\n    }\n    return participant;\n}\nfunction useMaybeParticipantContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n}\nfunction useEnsureParticipant(participant) {\n    var _a;\n    const context = useMaybeParticipantContext();\n    const trackContext = useMaybeTrackRefContext();\n    const p = (_a = participant != null ? participant : context) != null ? _a : trackContext == null ? void 0 : trackContext.participant;\n    if (!p) {\n        throw new Error("No participant provided, make sure you are inside a participant context or pass the participant explicitly");\n    }\n    return p;\n}\n// src/context/room-context.ts\n\nvar RoomContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useRoomContext() {\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n    if (!ctx) {\n        throw Error("tried to access room context outside of livekit room component");\n    }\n    return ctx;\n}\nfunction useMaybeRoomContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n}\nfunction useEnsureRoom(room) {\n    const context = useMaybeRoomContext();\n    const r = room != null ? room : context;\n    if (!r) {\n        throw new Error("No room provided, make sure you are inside a Room context or pass the room explicitly");\n    }\n    return r;\n}\n// src/context/feature-context.ts\n\nvar LKFeatureContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useFeatureContext(require2) {\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LKFeatureContext);\n    if (require2 === true) {\n        if (ctx) {\n            return ctx;\n        } else {\n            throw Error("tried to access feature context, but none is present");\n        }\n    }\n    return ctx;\n}\n// src/hooks/useAudioPlayback.ts\nfunction useAudioPlayback(room) {\n    const roomEnsured = useEnsureRoom(room);\n    const startAudio = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>__async(this, null, function*() {\n            yield roomEnsured.startAudio();\n        }), [\n        roomEnsured\n    ]);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomAudioPlaybackAllowedObservable)(roomEnsured), [\n        roomEnsured\n    ]);\n    const { canPlayAudio } = useObservableState(observable, {\n        canPlayAudio: roomEnsured.canPlaybackAudio\n    });\n    return {\n        canPlayAudio,\n        startAudio\n    };\n}\n// src/hooks/useClearPinButton.ts\n\n\n// src/mergeProps.ts\n\nfunction chain(...callbacks) {\n    return (...args)=>{\n        for (const callback of callbacks){\n            if (typeof callback === "function") {\n                callback(...args);\n            }\n        }\n    };\n}\nfunction mergeProps(...args) {\n    const result = __spreadValues({}, args[0]);\n    for(let i = 1; i < args.length; i++){\n        const props = args[i];\n        for(const key in props){\n            const a = result[key];\n            const b = props[key];\n            if (typeof a === "function" && typeof b === "function" && // This is a lot faster than a regex.\n            key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* \'A\' */ 65 && key.charCodeAt(2) <= /* \'Z\' */ 90) {\n                result[key] = chain(a, b);\n            } else if ((key === "className" || key === "UNSAFE_className") && typeof a === "string" && typeof b === "string") {\n                result[key] = (0,clsx__WEBPACK_IMPORTED_MODULE_3__["default"])(a, b);\n            } else {\n                result[key] = b !== void 0 ? b : a;\n            }\n        }\n    }\n    return result;\n}\n// src/hooks/useClearPinButton.ts\nfunction useClearPinButton(props) {\n    const { state, dispatch } = useLayoutContext().pin;\n    const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupClearPinButton)();\n        const mergedProps = mergeProps(props, {\n            className,\n            disabled: !(state == null ? void 0 : state.length),\n            onClick: ()=>{\n                if (dispatch) dispatch({\n                    msg: "clear_pin"\n                });\n            }\n        });\n        return mergedProps;\n    }, [\n        props,\n        dispatch,\n        state\n    ]);\n    return {\n        buttonProps\n    };\n}\n// src/hooks/useConnectionQualityIndicator.ts\n\n\n\nfunction useConnectionQualityIndicator(options = {}) {\n    const p = useEnsureParticipant(options.participant);\n    const { className, connectionQualityObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupConnectionQualityIndicator)(p), [\n        p\n    ]);\n    const quality = useObservableState(connectionQualityObserver, livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Unknown);\n    return {\n        className,\n        quality\n    };\n}\n// src/hooks/useConnectionStatus.ts\n\n\nfunction useConnectionState(room) {\n    const r = useEnsureRoom(room);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectionStateObserver)(r), [\n        r\n    ]);\n    const connectionState = useObservableState(observable, r.state);\n    return connectionState;\n}\n// src/hooks/useDataChannel.ts\n\n\nfunction useDataChannel(topicOrCallback, callback) {\n    const onMessage = typeof topicOrCallback === "function" ? topicOrCallback : callback;\n    const topic = typeof topicOrCallback === "string" ? topicOrCallback : void 0;\n    const room = useRoomContext();\n    const { send, messageObservable, isSendingObservable } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDataMessageHandler)(room, topic, onMessage), [\n        room,\n        topic,\n        onMessage\n    ]);\n    const message = useObservableState(messageObservable, void 0);\n    const isSending = useObservableState(isSendingObservable, false);\n    return {\n        message,\n        send,\n        isSending\n    };\n}\n// src/hooks/useDisconnectButton.ts\n\n\n\nfunction useDisconnectButton(props) {\n    const room = useRoomContext();\n    const connectionState = useConnectionState(room);\n    const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className, disconnect } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDisconnectButton)(room);\n        const mergedProps = mergeProps(props, {\n            className,\n            onClick: ()=>{\n                var _a;\n                return disconnect((_a = props.stopTracks) != null ? _a : true);\n            },\n            disabled: connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected\n        });\n        return mergedProps;\n    }, [\n        room,\n        props,\n        connectionState\n    ]);\n    return {\n        buttonProps\n    };\n}\n// src/hooks/useFacingMode.ts\n\nfunction useFacingMode(trackReference) {\n    if (trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalTrackPublication) {\n        const localTrack = trackReference.publication.track;\n        if (localTrack) {\n            const { facingMode } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(localTrack);\n            return facingMode;\n        }\n    }\n    return "undefined";\n}\n// src/hooks/useFocusToggle.ts\n\n\nfunction useFocusToggle({ trackRef, trackSource, participant, props }) {\n    const p = useEnsureParticipant(participant);\n    if (!trackRef && !trackSource) {\n        throw new Error("trackRef or trackSource must be defined.");\n    }\n    const layoutContext = useMaybeLayoutContext();\n    const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupFocusToggle)(), []);\n    const inFocus = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (trackRef) {\n            return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackRef, layoutContext == null ? void 0 : layoutContext.pin.state);\n        } else if (trackSource) {\n            const track = p.getTrack(trackSource);\n            if ((layoutContext == null ? void 0 : layoutContext.pin.state) && track) {\n                return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)({\n                    participant: p,\n                    source: trackSource,\n                    publication: track\n                }, layoutContext.pin.state);\n            } else {\n                return false;\n            }\n        } else {\n            throw new Error("trackRef or trackSource and participant must be defined.");\n        }\n    }, [\n        trackRef,\n        layoutContext == null ? void 0 : layoutContext.pin.state,\n        p,\n        trackSource\n    ]);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: (event)=>{\n                var _a, _b, _c, _d, _e;\n                (_a = props.onClick) == null ? void 0 : _a.call(props, event);\n                if (trackRef) {\n                    if (inFocus) {\n                        (_c = layoutContext == null ? void 0 : (_b = layoutContext.pin).dispatch) == null ? void 0 : _c.call(_b, {\n                            msg: "clear_pin"\n                        });\n                    } else {\n                        (_e = layoutContext == null ? void 0 : (_d = layoutContext.pin).dispatch) == null ? void 0 : _e.call(_d, {\n                            msg: "set_pin",\n                            trackReference: trackRef\n                        });\n                    }\n                } else if (trackSource) {\n                    const track = p.getTrack(trackSource);\n                    if ((layoutContext == null ? void 0 : layoutContext.pin.dispatch) && track) {\n                        if (inFocus) {\n                            layoutContext.pin.dispatch({\n                                msg: "clear_pin"\n                            });\n                        } else {\n                            layoutContext.pin.dispatch({\n                                msg: "set_pin",\n                                trackReference: {\n                                    participant: p,\n                                    publication: track,\n                                    source: track.source\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }), [\n        props,\n        className,\n        trackRef,\n        trackSource,\n        inFocus,\n        layoutContext == null ? void 0 : layoutContext.pin,\n        p\n    ]);\n    return {\n        mergedProps,\n        inFocus\n    };\n}\n// src/hooks/useGridLayout.ts\n\n\nfunction useGridLayout(gridElement, trackCount) {\n    const { width, height } = useSize(gridElement);\n    const layout = width > 0 && height > 0 ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.selectGridLayout)(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS, trackCount, width, height) : _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS[0];\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (gridElement.current && layout) {\n            gridElement.current.style.setProperty("--lk-col-count", layout == null ? void 0 : layout.columns.toString());\n            gridElement.current.style.setProperty("--lk-row-count", layout == null ? void 0 : layout.rows.toString());\n        }\n    }, [\n        gridElement,\n        layout\n    ]);\n    return {\n        layout\n    };\n}\n// src/hooks/useIsMuted.ts\n\n\nfunction useIsMuted(sourceOrTrackRef, options = {}) {\n    var _a, _b;\n    const passedParticipant = typeof sourceOrTrackRef === "string" ? options.participant : sourceOrTrackRef.participant;\n    const p = useEnsureParticipant(passedParticipant);\n    const ref = typeof sourceOrTrackRef === "string" ? {\n        participant: p,\n        source: sourceOrTrackRef\n    } : sourceOrTrackRef;\n    const [isMuted, setIsMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!!(((_a = ref.publication) == null ? void 0 : _a.isMuted) || ((_b = p.getTrack(ref.source)) == null ? void 0 : _b.isMuted)));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.mutedObserver)(ref).subscribe(setIsMuted);\n        return ()=>listener.unsubscribe();\n    }, [\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)\n    ]);\n    return isMuted;\n}\n// src/hooks/useIsSpeaking.ts\n\n\nfunction useIsSpeaking(participant) {\n    const p = useEnsureParticipant(participant);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createIsSpeakingObserver)(p), [\n        p\n    ]);\n    const isSpeaking = useObservableState(observable, p.isSpeaking);\n    return isSpeaking;\n}\n// src/hooks/useLiveKitRoom.ts\n\n\n\nvar defaultRoomProps = {\n    connect: true,\n    audio: false,\n    video: false\n};\nfunction useLiveKitRoom(props) {\n    const _a = __spreadValues(__spreadValues({}, defaultRoomProps), props), { token, serverUrl, options, room: passedRoom, connectOptions, connect, audio, video, screen, onConnected, onDisconnected, onError, onMediaDeviceFailure, onEncryptionError, simulateParticipants } = _a, rest = __objRest(_a, [\n        "token",\n        "serverUrl",\n        "options",\n        "room",\n        "connectOptions",\n        "connect",\n        "audio",\n        "video",\n        "screen",\n        "onConnected",\n        "onDisconnected",\n        "onError",\n        "onMediaDeviceFailure",\n        "onEncryptionError",\n        "simulateParticipants"\n    ]);\n    if (options && passedRoom) {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn("when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.");\n    }\n    const [room, setRoom] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setRoom(passedRoom != null ? passedRoom : new livekit_client__WEBPACK_IMPORTED_MODULE_4__.Room(options));\n    }, [\n        passedRoom\n    ]);\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupLiveKitRoom)();\n        return mergeProps(rest, {\n            className\n        });\n    }, [\n        rest\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        const onSignalConnected = ()=>{\n            const localP = room.localParticipant;\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("trying to publish local tracks");\n            Promise.all([\n                localP.setMicrophoneEnabled(!!audio, typeof audio !== "boolean" ? audio : void 0),\n                localP.setCameraEnabled(!!video, typeof video !== "boolean" ? video : void 0),\n                localP.setScreenShareEnabled(!!screen, typeof screen !== "boolean" ? screen : void 0)\n            ]).catch((e)=>{\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n                onError == null ? void 0 : onError(e);\n            });\n        };\n        const handleMediaDeviceError = (e)=>{\n            const mediaDeviceFailure = livekit_client__WEBPACK_IMPORTED_MODULE_4__.MediaDeviceFailure.getFailure(e);\n            onMediaDeviceFailure == null ? void 0 : onMediaDeviceFailure(mediaDeviceFailure);\n        };\n        const handleEncryptionError = (e)=>{\n            onEncryptionError == null ? void 0 : onEncryptionError(e);\n        };\n        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected).on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, handleMediaDeviceError).on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.EncryptionError, handleEncryptionError);\n        return ()=>{\n            room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected).off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, handleMediaDeviceError).off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.EncryptionError, handleEncryptionError);\n        };\n    }, [\n        room,\n        audio,\n        video,\n        screen,\n        onError,\n        onEncryptionError,\n        onMediaDeviceFailure\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        if (simulateParticipants) {\n            room.simulateParticipants({\n                participants: {\n                    count: simulateParticipants\n                },\n                publish: {\n                    audio: true,\n                    useRealTracks: true\n                }\n            });\n            return;\n        }\n        if (!token) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("no token yet");\n            return;\n        }\n        if (!serverUrl) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn("no livekit url provided");\n            onError == null ? void 0 : onError(Error("no livekit url provided"));\n            return;\n        }\n        if (connect) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("connecting");\n            room.connect(serverUrl, token, connectOptions).catch((e)=>{\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n                onError == null ? void 0 : onError(e);\n            });\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("disconnecting because connect is false");\n            room.disconnect();\n        }\n    }, [\n        connect,\n        token,\n        JSON.stringify(connectOptions),\n        room,\n        onError,\n        serverUrl,\n        simulateParticipants\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        const connectionStateChangeListener = (state)=>{\n            switch(state){\n                case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n                    if (onDisconnected) onDisconnected();\n                    break;\n                case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connected:\n                    if (onConnected) onConnected();\n                    break;\n                default:\n                    break;\n            }\n        };\n        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n        return ()=>{\n            room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n        };\n    }, [\n        token,\n        onConnected,\n        onDisconnected,\n        room\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        return ()=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info("disconnecting on onmount");\n            room.disconnect();\n        };\n    }, [\n        room\n    ]);\n    return {\n        room,\n        htmlProps\n    };\n}\n// src/hooks/useLocalParticipant.ts\n\n\nfunction useLocalParticipant(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [localParticipant, setLocalParticipant] = react__WEBPACK_IMPORTED_MODULE_0__.useState(room.localParticipant);\n    const [isMicrophoneEnabled, setIsMicrophoneEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [isCameraEnabled, setIsCameraEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [lastMicrophoneError, setLastMicrophoneError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastMicrophoneError);\n    const [lastCameraError, setLastCameraError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastCameraError);\n    const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [microphoneTrack, setMicrophoneTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const [cameraTrack, setCameraTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const handleUpdate = (media)=>{\n        setIsCameraEnabled(media.isCameraEnabled);\n        setIsMicrophoneEnabled(media.isMicrophoneEnabled);\n        setIsScreenShareEnabled(media.isScreenShareEnabled);\n        setCameraTrack(media.cameraTrack);\n        setMicrophoneTrack(media.microphoneTrack);\n        setLastMicrophoneError(media.participant.lastMicrophoneError);\n        setLastCameraError(media.participant.lastCameraError);\n        setLocalParticipant(media.participant);\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.observeParticipantMedia)(room.localParticipant).subscribe(handleUpdate);\n        return ()=>listener.unsubscribe();\n    }, [\n        room\n    ]);\n    return {\n        isMicrophoneEnabled,\n        isScreenShareEnabled,\n        isCameraEnabled,\n        microphoneTrack,\n        cameraTrack,\n        lastMicrophoneError,\n        lastCameraError,\n        localParticipant\n    };\n}\n// src/hooks/useLocalParticipantPermissions.ts\n\n\nfunction useLocalParticipantPermissions() {\n    const room = useRoomContext();\n    const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(room.localParticipant), [\n        room\n    ]);\n    const permissions = useObservableState(permissionObserver, room.localParticipant.permissions);\n    return permissions;\n}\n// src/hooks/useMediaDeviceSelect.ts\n\n\nfunction useMediaDeviceSelect({ kind, room, track, requestPermissions, onError }) {\n    const roomContext = useMaybeRoomContext();\n    const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind, onError, requestPermissions), [\n        kind,\n        requestPermissions,\n        onError\n    ]);\n    const devices = useObservableState(deviceObserver, []);\n    const [currentDeviceId, setCurrentDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState("");\n    const { className, activeDeviceObservable, setActiveMediaDevice } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDeviceSelector)(kind, room != null ? room : roomContext, track), [\n        kind,\n        room,\n        roomContext,\n        track\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = activeDeviceObservable.subscribe((deviceId)=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info("setCurrentDeviceId", deviceId);\n            if (deviceId) setCurrentDeviceId(deviceId);\n        });\n        return ()=>{\n            listener == null ? void 0 : listener.unsubscribe();\n        };\n    }, [\n        activeDeviceObservable\n    ]);\n    return {\n        devices,\n        className,\n        activeDeviceId: currentDeviceId,\n        setActiveMediaDevice\n    };\n}\n// src/hooks/useMediaDevices.ts\n\n\nfunction useMediaDevices({ kind }) {\n    const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind), [\n        kind\n    ]);\n    const devices = useObservableState(deviceObserver, []);\n    return devices;\n}\n// src/hooks/useMediaTrackBySourceOrName.ts\n\n\n\n// src/utils.ts\n\n\nfunction isProp(prop) {\n    return prop !== void 0;\n}\nfunction mergeProps2(...props) {\n    return mergeProps(...props.filter(isProp));\n}\nfunction cloneSingleChild(children, props, key) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child)=>{\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children)) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, __spreadProps(__spreadValues({}, props), {\n                key\n            }));\n        }\n        return child;\n    });\n}\nfunction warnAboutMissingStyles(el) {\n    var _a, _b;\n    if (// eslint-disable-next-line turbo/no-undeclared-env-vars\n    (((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.NODE_ENV) === "dev" || ((_b = process == null ? void 0 : process.env) == null ? void 0 : _b.NODE_ENV) === "development") && "undefined" !== "undefined") {}\n}\n// src/hooks/useMediaTrackBySourceOrName.ts\nfunction useMediaTrackBySourceOrName(observerOptions, options = {}) {\n    var _a;\n    const [publication, setPublication] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackByIdentifier)(observerOptions));\n    const [isMuted, setMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isMuted);\n    const [isSubscribed, setSubscribed] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isSubscribed);\n    const [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.track);\n    const [orientation, setOrientation] = react__WEBPACK_IMPORTED_MODULE_0__.useState("landscape");\n    const previousElement = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const { className, trackObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaTrack)(observerOptions);\n    }, [\n        (_a = observerOptions.participant.sid) != null ? _a : observerOptions.participant.identity,\n        observerOptions.source,\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(observerOptions) && observerOptions.publication.trackSid\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const subscription = trackObserver.subscribe((publication2)=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("update track", publication2);\n            setPublication(publication2);\n            setMuted(publication2 == null ? void 0 : publication2.isMuted);\n            setSubscribed(publication2 == null ? void 0 : publication2.isSubscribed);\n            setTrack(publication2 == null ? void 0 : publication2.track);\n        });\n        return ()=>subscription == null ? void 0 : subscription.unsubscribe();\n    }, [\n        trackObserver\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b;\n        if (track) {\n            if (previousElement.current) {\n                track.detach(previousElement.current);\n            }\n            if (((_a2 = options.element) == null ? void 0 : _a2.current) && !((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(observerOptions.participant) && (track == null ? void 0 : track.kind) === "audio")) {\n                track.attach(options.element.current);\n            }\n        }\n        previousElement.current = (_b = options.element) == null ? void 0 : _b.current;\n        return ()=>{\n            if (previousElement.current) {\n                track == null ? void 0 : track.detach(previousElement.current);\n            }\n        };\n    }, [\n        track,\n        options.element\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b;\n        if (typeof ((_a2 = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _a2.width) === "number" && typeof ((_b = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _b.height) === "number") {\n            const orientation_ = publication.dimensions.width > publication.dimensions.height ? "landscape" : "portrait";\n            setOrientation(orientation_);\n        }\n    }, [\n        publication\n    ]);\n    return {\n        publication,\n        isMuted,\n        isSubscribed,\n        track,\n        elementProps: mergeProps2(options.props, __spreadValues({\n            className,\n            "data-lk-local-participant": observerOptions.participant.isLocal,\n            "data-lk-source": publication == null ? void 0 : publication.source\n        }, (publication == null ? void 0 : publication.kind) === "video" && {\n            "data-lk-orientation": orientation\n        }))\n    };\n}\n// src/hooks/useMediaTrack.ts\nfunction useMediaTrack(source, participant, options = {}) {\n    const p = useEnsureParticipant(participant);\n    return useMediaTrackBySourceOrName({\n        source,\n        participant: p\n    }, options);\n}\n// src/hooks/useMediaTrackByName.ts\nfunction useMediaTrackByName(name, participant, options = {}) {\n    const p = useEnsureParticipant(participant);\n    return useMediaTrackBySourceOrName({\n        name,\n        participant: p\n    }, options);\n}\n// src/hooks/usePagination.ts\n\n// src/hooks/useVisualStableUpdate.ts\n\n\nfunction useVisualStableUpdate(trackReferences, maxItemsOnPage, options = {}) {\n    const lastTrackRefs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n    const lastMaxItemsOnPage = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const layoutChanged = maxItemsOnPage !== lastMaxItemsOnPage.current;\n    const sortedTrackRefs = typeof options.customSortFunction === "function" ? options.customSortFunction(trackReferences) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortTrackReferences)(trackReferences);\n    let updatedTrackRefs = [\n        ...sortedTrackRefs\n    ];\n    if (layoutChanged === false) {\n        try {\n            updatedTrackRefs = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.updatePages)(lastTrackRefs.current, sortedTrackRefs, maxItemsOnPage);\n        } catch (error) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.error("Error while running updatePages(): ", error);\n        }\n    }\n    if (layoutChanged) {\n        lastTrackRefs.current = sortedTrackRefs;\n    } else {\n        lastTrackRefs.current = updatedTrackRefs;\n    }\n    lastMaxItemsOnPage.current = maxItemsOnPage;\n    return updatedTrackRefs;\n}\n// src/hooks/usePagination.ts\nfunction usePagination(itemPerPage, trackReferences) {\n    const [currentPage, setCurrentPage] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1);\n    const totalPageCount = Math.max(Math.ceil(trackReferences.length / itemPerPage), 1);\n    if (currentPage > totalPageCount) {\n        setCurrentPage(totalPageCount);\n    }\n    const lastItemIndex = currentPage * itemPerPage;\n    const firstItemIndex = lastItemIndex - itemPerPage;\n    const changePage = (direction)=>{\n        setCurrentPage((state)=>{\n            if (direction === "next") {\n                if (state === totalPageCount) {\n                    return state;\n                }\n                return state + 1;\n            } else {\n                if (state === 1) {\n                    return state;\n                }\n                return state - 1;\n            }\n        });\n    };\n    const goToPage = (num)=>{\n        if (num > totalPageCount) {\n            setCurrentPage(totalPageCount);\n        } else if (num < 1) {\n            setCurrentPage(1);\n        } else {\n            setCurrentPage(num);\n        }\n    };\n    const updatedTrackReferences = useVisualStableUpdate(trackReferences, itemPerPage);\n    const tracksOnPage = updatedTrackReferences.slice(firstItemIndex, lastItemIndex);\n    return {\n        totalPageCount,\n        nextPage: ()=>changePage("next"),\n        prevPage: ()=>changePage("previous"),\n        setPage: goToPage,\n        firstItemIndex,\n        lastItemIndex,\n        tracks: tracksOnPage,\n        currentPage\n    };\n}\n// src/hooks/useParticipantInfo.ts\n\n\nfunction useParticipantInfo(props = {}) {\n    const p = useEnsureParticipant(props.participant);\n    const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantInfoObserver)(p), [\n        p\n    ]);\n    const { identity, name, metadata } = useObservableState(infoObserver, {\n        name: p.name,\n        identity: p.identity,\n        metadata: p.metadata\n    });\n    return {\n        identity,\n        name,\n        metadata\n    };\n}\n// src/hooks/useParticipantPermissions.ts\n\n\nfunction useParticipantPermissions(options = {}) {\n    const p = useEnsureParticipant(options.participant);\n    const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(p), [\n        p\n    ]);\n    const permissions = useObservableState(permissionObserver, p.permissions);\n    return permissions;\n}\n// src/hooks/useParticipantTile.ts\n\n\n\nfunction useParticipantTile({ trackRef, participant, source, publication, onParticipantClick, disableSpeakingIndicator, htmlProps }) {\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const p = useEnsureParticipant(participant);\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _a, _b, _c, _d, _e, _f;\n        const _source = (_b = (_a = trackRef == null ? void 0 : trackRef.source) != null ? _a : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _b : source;\n        if (_source === void 0) {\n            throw new Error("Missing track `source`, provided it via `trackRef`, `source` property or via `TrackRefContext`.");\n        }\n        return {\n            participant: (_d = (_c = trackRef == null ? void 0 : trackRef.participant) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _d : p,\n            publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication,\n            source: _source\n        };\n    }, [\n        trackRef == null ? void 0 : trackRef.participant,\n        trackRef == null ? void 0 : trackRef.source,\n        trackRef == null ? void 0 : trackRef.publication,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.participant,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.source,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.publication,\n        p,\n        source,\n        publication\n    ]);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantTile)();\n        return mergeProps(htmlProps, {\n            className,\n            onClick: (event)=>{\n                var _a, _b;\n                (_a = htmlProps.onClick) == null ? void 0 : _a.call(htmlProps, event);\n                if (typeof onParticipantClick === "function") {\n                    const track = (_b = trackReference.publication) != null ? _b : trackReference.participant.getTrack(trackReference.source);\n                    onParticipantClick({\n                        participant: trackReference.participant,\n                        track\n                    });\n                }\n            }\n        });\n    }, [\n        htmlProps,\n        onParticipantClick,\n        trackReference.publication,\n        trackReference.source,\n        trackReference.participant\n    ]);\n    const isVideoMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, {\n        participant: trackReference.participant\n    });\n    const isAudioMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone, {\n        participant: trackReference.participant\n    });\n    const isSpeaking = useIsSpeaking(trackReference.participant);\n    const facingMode = useFacingMode(trackReference);\n    return {\n        elementProps: __spreadValues({\n            "data-lk-audio-muted": isAudioMuted,\n            "data-lk-video-muted": isVideoMuted,\n            "data-lk-speaking": disableSpeakingIndicator === true ? false : isSpeaking,\n            "data-lk-local-participant": trackReference.participant.isLocal,\n            "data-lk-source": trackReference.source,\n            "data-lk-facing-mode": facingMode\n        }, mergedProps)\n    };\n}\n// src/hooks/useRemoteParticipants.ts\n\n\nfunction useRemoteParticipants(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantsObserver)(room, {\n            additionalRoomEvents: options.updateOnlyOn\n        }).subscribe(setParticipants);\n        return ()=>listener.unsubscribe();\n    }, [\n        room,\n        JSON.stringify(options.updateOnlyOn)\n    ]);\n    return participants;\n}\n// src/hooks/useParticipants.ts\nfunction useParticipants(options = {}) {\n    const remoteParticipants = useRemoteParticipants(options);\n    const { localParticipant } = useLocalParticipant(options);\n    return [\n        localParticipant,\n        ...remoteParticipants\n    ];\n}\n// src/hooks/usePinnedTracks.ts\n\nfunction usePinnedTracks(layoutContext) {\n    layoutContext = useEnsureLayoutContext(layoutContext);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if ((layoutContext == null ? void 0 : layoutContext.pin.state) !== void 0 && layoutContext.pin.state.length >= 1) {\n            return layoutContext.pin.state;\n        }\n        return [];\n    }, [\n        layoutContext.pin.state\n    ]);\n}\n// src/hooks/useRemoteParticipant.ts\n\n\nfunction useRemoteParticipant(identity, options = {}) {\n    const room = useRoomContext();\n    const [updateOnlyOn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(options.updateOnlyOn);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantObserver)(room, identity, {\n            additionalEvents: updateOnlyOn\n        }), [\n        room,\n        identity,\n        updateOnlyOn\n    ]);\n    const participant = useObservableState(observable, room.getParticipantByIdentity(identity));\n    return participant;\n}\n// src/hooks/useRoomInfo.ts\n\n\nfunction useRoomInfo(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomInfoObserver)(room), [\n        room\n    ]);\n    const { name, metadata } = useObservableState(infoObserver, {\n        name: room.name,\n        metadata: room.metadata\n    });\n    return {\n        name,\n        metadata\n    };\n}\n// src/hooks/useSortedParticipants.ts\n\n\n// src/hooks/useSpeakingParticipants.ts\n\n\nfunction useSpeakingParticipants() {\n    const room = useRoomContext();\n    const speakerObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.activeSpeakerObserver)(room), [\n        room\n    ]);\n    const activeSpeakers = useObservableState(speakerObserver, room.activeSpeakers);\n    return activeSpeakers;\n}\n// src/hooks/useSortedParticipants.ts\nfunction useSortedParticipants(participants) {\n    const [sortedParticipants, setSortedParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants));\n    const activeSpeakers = useSpeakingParticipants();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setSortedParticipants((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants));\n    }, [\n        activeSpeakers,\n        participants\n    ]);\n    return sortedParticipants;\n}\n// src/hooks/useStartAudio.ts\n\n\nfunction useStartAudio({ room, props }) {\n    const roomEnsured = useEnsureRoom(room);\n    const { className, roomAudioPlaybackAllowedObservable: roomAudioPlaybackAllowedObservable2, handleStartAudioPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupStartAudio)(), []);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>roomAudioPlaybackAllowedObservable2(roomEnsured), [\n        roomEnsured,\n        roomAudioPlaybackAllowedObservable2\n    ]);\n    const { canPlayAudio } = useObservableState(observable, {\n        canPlayAudio: roomEnsured.canPlaybackAudio\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: ()=>{\n                handleStartAudioPlayback(roomEnsured);\n            },\n            style: {\n                display: canPlayAudio ? "none" : "block"\n            }\n        }), [\n        props,\n        className,\n        canPlayAudio,\n        handleStartAudioPlayback,\n        roomEnsured\n    ]);\n    return {\n        mergedProps,\n        canPlayAudio\n    };\n}\n// src/hooks/useStartVideo.ts\n\n\nfunction useStartVideo({ room, props }) {\n    const roomEnsured = useEnsureRoom(room);\n    const { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupStartVideo)(), []);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>roomVideoPlaybackAllowedObservable(roomEnsured), [\n        roomEnsured,\n        roomVideoPlaybackAllowedObservable\n    ]);\n    const { canPlayVideo } = useObservableState(observable, {\n        canPlayVideo: roomEnsured.canPlaybackVideo\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: ()=>{\n                handleStartVideoPlayback(roomEnsured);\n            },\n            style: {\n                display: canPlayVideo ? "none" : "block"\n            }\n        }), [\n        props,\n        className,\n        canPlayVideo,\n        handleStartVideoPlayback,\n        roomEnsured\n    ]);\n    return {\n        mergedProps,\n        canPlayVideo\n    };\n}\n// src/hooks/useSwipe.ts\n\nfunction useSwipe(element, options = {}) {\n    var _a;\n    const touchStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const touchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const minSwipeDistance = (_a = options.minSwipeDistance) != null ? _a : 50;\n    const onTouchStart = (event)=>{\n        touchEnd.current = null;\n        touchStart.current = event.targetTouches[0].clientX;\n    };\n    const onTouchMove = (event)=>{\n        touchEnd.current = event.targetTouches[0].clientX;\n    };\n    const onTouchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (!touchStart.current || !touchEnd.current) {\n            return;\n        }\n        const distance = touchStart.current - touchEnd.current;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe && options.onLeftSwipe) options.onLeftSwipe();\n        if (isRightSwipe && options.onRightSwipe) options.onRightSwipe();\n    }, [\n        minSwipeDistance,\n        options\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const elementCopy = element.current;\n        if (elementCopy) {\n            elementCopy.addEventListener("touchstart", onTouchStart, {\n                passive: true\n            });\n            elementCopy.addEventListener("touchmove", onTouchMove, {\n                passive: true\n            });\n            elementCopy.addEventListener("touchend", onTouchEnd, {\n                passive: true\n            });\n        }\n        return ()=>{\n            if (elementCopy) {\n                elementCopy.removeEventListener("touchstart", onTouchStart);\n                elementCopy.removeEventListener("touchmove", onTouchMove);\n                elementCopy.removeEventListener("touchend", onTouchEnd);\n            }\n        };\n    }, [\n        element,\n        onTouchEnd\n    ]);\n}\n// src/hooks/useChatToggle.ts\n\n\nfunction useChatToggle({ props }) {\n    const { dispatch, state } = useLayoutContext().widget;\n    const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChatToggle)(), []);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return mergeProps(props, {\n            className,\n            onClick: ()=>{\n                if (dispatch) dispatch({\n                    msg: "toggle_chat"\n                });\n            },\n            "aria-pressed": (state == null ? void 0 : state.showChat) ? "true" : "false",\n            "data-lk-unread-msgs": state ? state.unreadMessages < 10 ? state.unreadMessages.toFixed(0) : "9+" : "0"\n        });\n    }, [\n        props,\n        className,\n        dispatch,\n        state\n    ]);\n    return {\n        mergedProps\n    };\n}\n// src/hooks/useToken.ts\n\n\nfunction useToken(tokenEndpoint, roomName, options = {}) {\n    const [token, setToken] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a;\n        if (tokenEndpoint === void 0) {\n            throw Error("token endpoint needs to be defined");\n        }\n        if (((_a = options.userInfo) == null ? void 0 : _a.identity) === void 0) {\n            return;\n        }\n        const tokenFetcher = ()=>__async(this, null, function*() {\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("fetching token");\n                const params = new URLSearchParams(__spreadProps(__spreadValues({}, options.userInfo), {\n                    roomName\n                }));\n                const res = yield fetch(`${tokenEndpoint}?${params.toString()}`);\n                if (!res.ok) {\n                    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.error(`Could not fetch token. Server responded with status ${res.status}: ${res.statusText}`);\n                    return;\n                }\n                const { accessToken } = yield res.json();\n                setToken(accessToken);\n            });\n        tokenFetcher();\n    }, [\n        tokenEndpoint,\n        roomName,\n        JSON.stringify(options)\n    ]);\n    return token;\n}\n// src/hooks/useTrackMutedIndicator.ts\n\n\nfunction useTrackMutedIndicator(trackRefOrSource, options = {}) {\n    var _a, _b, _c, _d;\n    let ref = useMaybeTrackRefContext();\n    const p = (_b = (_a = useMaybeParticipantContext()) != null ? _a : options.participant) != null ? _b : ref == null ? void 0 : ref.participant;\n    if (typeof trackRefOrSource === "string") {\n        if (!p) {\n            throw Error(`Participant missing, either provide it via context or pass it in directly`);\n        }\n        ref = {\n            participant: p,\n            source: trackRefOrSource\n        };\n    } else if (trackRefOrSource) {\n        ref = trackRefOrSource;\n    } else {\n        throw Error(`No track reference found, either provide it via context or pass it in directly`);\n    }\n    const { className, mediaMutedObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupTrackMutedIndicator)(ref), [\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)\n    ]);\n    const isMuted = useObservableState(mediaMutedObserver, !!(((_c = ref.publication) == null ? void 0 : _c.isMuted) || ((_d = ref.participant.getTrack(ref.source)) == null ? void 0 : _d.isMuted)));\n    return {\n        isMuted,\n        className\n    };\n}\n// src/hooks/useTrackToggle.ts\n\n\nfunction useTrackToggle(_a) {\n    var _b = _a, { source, onChange, initialState, captureOptions } = _b, rest = __objRest(_b, [\n        "source",\n        "onChange",\n        "initialState",\n        "captureOptions"\n    ]);\n    var _a2;\n    const room = useMaybeRoomContext();\n    const track = (_a2 = room == null ? void 0 : room.localParticipant) == null ? void 0 : _a2.getTrack(source);\n    const userInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const { toggle, className, pendingObserver, enabledObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>room ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaToggle)(source, room, captureOptions) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupManualToggle)(), [\n        room,\n        source,\n        JSON.stringify(captureOptions)\n    ]);\n    const pending = useObservableState(pendingObserver, false);\n    const enabled = useObservableState(enabledObserver, initialState != null ? initialState : !!(track == null ? void 0 : track.isEnabled));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onChange == null ? void 0 : onChange(enabled, userInteractionRef.current);\n        userInteractionRef.current = false;\n    }, [\n        enabled,\n        onChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (initialState !== void 0) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("forcing initial toggle state", source, initialState);\n            toggle(initialState);\n        }\n    }, []);\n    const newProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(rest, {\n            className\n        }), [\n        rest,\n        className\n    ]);\n    const clickHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((evt)=>{\n        var _a3;\n        userInteractionRef.current = true;\n        toggle().finally(()=>userInteractionRef.current = false);\n        (_a3 = rest.onClick) == null ? void 0 : _a3.call(rest, evt);\n    }, [\n        rest,\n        toggle\n    ]);\n    return {\n        toggle,\n        enabled,\n        pending,\n        track,\n        buttonProps: __spreadProps(__spreadValues({}, newProps), {\n            "aria-pressed": enabled,\n            "data-lk-source": source,\n            "data-lk-enabled": enabled,\n            disabled: pending,\n            onClick: clickHandler\n        })\n    };\n}\n// src/hooks/useTracks.ts\n\n\n\nfunction useTracks(sources = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown\n], options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [trackReferences, setTrackReferences] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const sources_ = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return sources.map((s)=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourceWitOptions)(s) ? s.source : s);\n    }, [\n        JSON.stringify(sources)\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.trackReferencesObservable)(room, sources_, {\n            additionalRoomEvents: options.updateOnlyOn,\n            onlySubscribed: options.onlySubscribed\n        }).subscribe(({ trackReferences: trackReferences2, participants: participants2 })=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("setting track bundles", trackReferences2, participants2);\n            setTrackReferences(trackReferences2);\n            setParticipants(participants2);\n        });\n        return ()=>subscription.unsubscribe();\n    }, [\n        room,\n        JSON.stringify(options.updateOnlyOn),\n        JSON.stringify(sources)\n    ]);\n    const maybeTrackReferences = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n            const requirePlaceholder = requiredPlaceholders(sources, participants);\n            const trackReferencesWithPlaceholders = Array.from(trackReferences);\n            participants.forEach((participant)=>{\n                var _a;\n                if (requirePlaceholder.has(participant.identity)) {\n                    const sourcesToAddPlaceholder = (_a = requirePlaceholder.get(participant.identity)) != null ? _a : [];\n                    sourcesToAddPlaceholder.forEach((placeholderSource)=>{\n                        if (trackReferences.find(({ participant: p, publication })=>participant.identity === p.identity && publication.source === placeholderSource)) {\n                            return;\n                        }\n                        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`Add ${placeholderSource} placeholder for participant ${participant.identity}.`);\n                        const placeholder = {\n                            participant,\n                            source: placeholderSource\n                        };\n                        trackReferencesWithPlaceholders.push(placeholder);\n                    });\n                }\n            });\n            return trackReferencesWithPlaceholders;\n        } else {\n            return trackReferences;\n        }\n    }, [\n        trackReferences,\n        participants,\n        sources\n    ]);\n    return maybeTrackReferences;\n}\nfunction difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\nfunction requiredPlaceholders(sources, participants) {\n    const placeholderMap = /* @__PURE__ */ new Map();\n    if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n        const sourcesThatNeedPlaceholder = sources.filter((sourceWithOption)=>sourceWithOption.withPlaceholder).map((sourceWithOption)=>sourceWithOption.source);\n        participants.forEach((participant)=>{\n            const sourcesOfSubscribedTracks = participant.getTracks().map((pub)=>{\n                var _a;\n                return (_a = pub.track) == null ? void 0 : _a.source;\n            }).filter((trackSource)=>trackSource !== void 0);\n            const placeholderNeededForThisParticipant = Array.from(difference(new Set(sourcesThatNeedPlaceholder), new Set(sourcesOfSubscribedTracks)));\n            if (placeholderNeededForThisParticipant.length > 0) {\n                placeholderMap.set(participant.identity, placeholderNeededForThisParticipant);\n            }\n        });\n    }\n    return placeholderMap;\n}\n// src/hooks/useTrack.ts\nfunction useTrack(trackRef, options = {}) {\n    return useMediaTrackBySourceOrName(trackRef, options);\n}\n// src/hooks/useTrackByName.ts\nfunction useTrackByName(trackRef, options = {}) {\n    const ref = useEnsureTrackRef(trackRef);\n    return useMediaTrackBySourceOrName(ref, options);\n}\n// src/hooks/useChat.ts\n\n\nfunction useChat(options) {\n    const room = useRoomContext();\n    const [setup, setSetup] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const isSending = useObservableState(setup == null ? void 0 : setup.isSendingObservable, false);\n    const chatMessages = useObservableState(setup == null ? void 0 : setup.messageObservable, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const setupChatReturn = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChat)(room, options);\n        setSetup(setupChatReturn);\n    }, [\n        room,\n        options\n    ]);\n    return {\n        send: setup == null ? void 0 : setup.send,\n        update: setup == null ? void 0 : setup.update,\n        chatMessages,\n        isSending\n    };\n}\n// src/hooks/usePersistentUserChoices.ts\n\n\nfunction usePersistentUserChoices(options = {}) {\n    var _a;\n    const [userChoices, setSettings] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.loadUserChoices)(options.defaults, (_a = options.preventLoad) != null ? _a : false));\n    const saveAudioInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                audioEnabled: isEnabled\n            }));\n    }, []);\n    const saveVideoInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                videoEnabled: isEnabled\n            }));\n    }, []);\n    const saveAudioInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                audioDeviceId: deviceId\n            }));\n    }, []);\n    const saveVideoInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                videoDeviceId: deviceId\n            }));\n    }, []);\n    const saveUsername = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((username)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                username\n            }));\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2;\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.saveUserChoices)(userChoices, (_a2 = options.preventSave) != null ? _a2 : false);\n    }, [\n        userChoices,\n        options.preventSave\n    ]);\n    return {\n        userChoices,\n        saveAudioInputEnabled,\n        saveVideoInputEnabled,\n        saveAudioInputDeviceId,\n        saveVideoInputDeviceId,\n        saveUsername\n    };\n}\n// src/hooks/useIsEncrypted.ts\n\n\n\nfunction useIsEncrypted(participant) {\n    const p = useEnsureParticipant(participant);\n    const room = useEnsureRoom();\n    const observer = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.encryptionStatusObservable)(room, p), [\n        room,\n        p\n    ]);\n    const isEncrypted = useObservableState(observer, p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalParticipant ? p.isE2EEEnabled : p.isEncrypted);\n    return isEncrypted;\n}\n// src/hooks/useTrackVolume.ts\n\n\n\nvar useTrackVolume = (trackOrTrackReference, options = {\n    fftSize: 32,\n    smoothingTimeConstant: 0\n})=>{\n    const track = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackOrTrackReference) ? trackOrTrackReference.publication.track : trackOrTrackReference;\n    const [volume, setVolume] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track || !track.mediaStream) {\n            return;\n        }\n        const { cleanup, analyser } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createAudioAnalyser)(track, options);\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        const updateVolume = ()=>{\n            analyser.getByteFrequencyData(dataArray);\n            let sum = 0;\n            for(let i = 0; i < dataArray.length; i++){\n                const a = dataArray[i];\n                sum += a * a;\n            }\n            setVolume(Math.sqrt(sum / dataArray.length) / 255);\n        };\n        const interval = setInterval(updateVolume, 1e3 / 30);\n        return ()=>{\n            cleanup();\n            clearInterval(interval);\n        };\n    }, [\n        track,\n        track == null ? void 0 : track.mediaStream,\n        JSON.stringify(options)\n    ]);\n    return volume;\n};\nvar normalizeFrequencies = (frequencies)=>{\n    const normalizeDb = (value)=>{\n        const minDb = -100;\n        const maxDb = -10;\n        let db = 1 - Math.max(minDb, Math.min(maxDb, value)) * -1 / 100;\n        db = Math.sqrt(db);\n        return db;\n    };\n    return frequencies.map((value)=>{\n        if (value === -Infinity) {\n            return 0;\n        }\n        return normalizeDb(value);\n    });\n};\nvar multibandDefaults = {\n    bands: 5,\n    loPass: 100,\n    hiPass: 600,\n    updateInterval: 10,\n    analyserOptions: {\n        fftSize: 2048\n    }\n};\nvar useMultibandTrackVolume = (trackOrTrackReference, options = {})=>{\n    var _a;\n    const track = trackOrTrackReference instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track ? trackOrTrackReference : (_a = trackOrTrackReference == null ? void 0 : trackOrTrackReference.publication) == null ? void 0 : _a.track;\n    const [frequencyBands, setFrequencyBands] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const opts = __spreadValues(__spreadValues({}, multibandDefaults), options);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track || !(track == null ? void 0 : track.mediaStream)) {\n            return;\n        }\n        const { analyser, cleanup } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createAudioAnalyser)(track, opts.analyserOptions);\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Float32Array(bufferLength);\n        const updateVolume = ()=>{\n            analyser.getFloatFrequencyData(dataArray);\n            let frequencies = new Float32Array(dataArray.length);\n            for(let i = 0; i < dataArray.length; i++){\n                frequencies[i] = dataArray[i];\n            }\n            frequencies = frequencies.slice(options.loPass, options.hiPass);\n            const normalizedFrequencies = normalizeFrequencies(frequencies);\n            const chunkSize = Math.ceil(normalizedFrequencies.length / opts.bands);\n            const chunks = [];\n            for(let i = 0; i < opts.bands; i++){\n                const summedVolumes = normalizedFrequencies.slice(i * chunkSize, (i + 1) * chunkSize).reduce((acc, val)=>acc += val, 0);\n                chunks.push(summedVolumes / chunkSize);\n            }\n            setFrequencyBands(chunks);\n        };\n        const interval = setInterval(updateVolume, opts.updateInterval);\n        return ()=>{\n            cleanup();\n            clearInterval(interval);\n        };\n    }, [\n        track,\n        track == null ? void 0 : track.mediaStream,\n        JSON.stringify(options)\n    ]);\n    return frequencyBands;\n};\n// src/components/controls/ClearPinButton.tsx\nfunction ClearPinButton(props) {\n    const { buttonProps } = useClearPinButton(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, buttonProps), props.children);\n}\n// src/components/ConnectionState.tsx\n\nfunction ConnectionState3(_a) {\n    var _b = _a, { room } = _b, props = __objRest(_b, [\n        "room"\n    ]);\n    const connectionState = useConnectionState(room);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, props), connectionState);\n}\n// src/components/controls/ChatToggle.tsx\n\nfunction ChatToggle(props) {\n    const { mergedProps } = useChatToggle({\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, mergedProps), props.children);\n}\n// src/components/controls/DisconnectButton.tsx\n\nfunction DisconnectButton(props) {\n    const { buttonProps } = useDisconnectButton(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, buttonProps), props.children);\n}\n// src/components/controls/FocusToggle.tsx\n\n// src/assets/icons/CameraDisabledIcon.tsx\n\nvar SvgCameraDisabledIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentColor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z"\n    }));\nvar CameraDisabledIcon_default = SvgCameraDisabledIcon;\n// src/assets/icons/CameraIcon.tsx\n\nvar SvgCameraIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentColor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z"\n    }));\nvar CameraIcon_default = SvgCameraIcon;\n// src/assets/icons/ChatCloseIcon.tsx\n\nvar SvgChatCloseIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        viewBox: "0 0 24 24"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "#FFF",\n        d: "M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z"\n    }));\nvar ChatCloseIcon_default = SvgChatCloseIcon;\n// src/assets/icons/ChatIcon.tsx\n\nvar SvgChatIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 18,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z",\n        clipRule: "evenodd"\n    }));\nvar ChatIcon_default = SvgChatIcon;\n// src/assets/icons/Chevron.tsx\n\nvar SvgChevron = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentcolor",\n        fillRule: "evenodd",\n        d: "M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z",\n        clipRule: "evenodd"\n    }));\nvar Chevron_default = SvgChevron;\n// src/assets/icons/FocusToggleIcon.tsx\n\nvar SvgFocusToggleIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        stroke: "currentColor",\n        strokeLinecap: "round",\n        strokeLinejoin: "round",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9"\n    })));\nvar FocusToggleIcon_default = SvgFocusToggleIcon;\n// src/assets/icons/GearIcon.tsx\n\nvar SvgGearIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z",\n        clipRule: "evenodd"\n    }));\nvar GearIcon_default = SvgGearIcon;\n// src/assets/icons/LeaveIcon.tsx\n\nvar SvgLeaveIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z",\n        clipRule: "evenodd"\n    }));\nvar LeaveIcon_default = SvgLeaveIcon;\n// src/assets/icons/LockLockedIcon.tsx\n\nvar SvgLockLockedIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentcolor",\n        fillRule: "evenodd",\n        d: "M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z",\n        clipRule: "evenodd"\n    }));\nvar LockLockedIcon_default = SvgLockLockedIcon;\n// src/assets/icons/MicDisabledIcon.tsx\n\nvar SvgMicDisabledIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentColor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z"\n    }));\nvar MicDisabledIcon_default = SvgMicDisabledIcon;\n// src/assets/icons/MicIcon.tsx\n\nvar SvgMicIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentColor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fillRule: "evenodd",\n        d: "M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z"\n    }));\nvar MicIcon_default = SvgMicIcon;\n// src/assets/icons/QualityExcellentIcon.tsx\n\nvar SvgQualityExcellentIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentcolor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }));\nvar QualityExcellentIcon_default = SvgQualityExcellentIcon;\n// src/assets/icons/QualityGoodIcon.tsx\n\nvar SvgQualityGoodIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentcolor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    })));\nvar QualityGoodIcon_default = SvgQualityGoodIcon;\n// src/assets/icons/QualityPoorIcon.tsx\n\nvar SvgQualityPoorIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentcolor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z"\n    })));\nvar QualityPoorIcon_default = SvgQualityPoorIcon;\n// src/assets/icons/QualityUnknownIcon.tsx\n\nvar SvgQualityUnknownIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "currentColor"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z"\n    })));\nvar QualityUnknownIcon_default = SvgQualityUnknownIcon;\n// src/assets/icons/ScreenShareIcon.tsx\n\nvar SvgScreenShareIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 20,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z",\n        clipRule: "evenodd"\n    }));\nvar ScreenShareIcon_default = SvgScreenShareIcon;\n// src/assets/icons/ScreenShareStopIcon.tsx\n\nvar SvgScreenShareStopIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 20,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        fill: "currentColor"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fillRule: "evenodd",\n        d: "M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z",\n        clipRule: "evenodd"\n    })));\nvar ScreenShareStopIcon_default = SvgScreenShareStopIcon;\n// src/assets/icons/SpinnerIcon.tsx\n\nvar SvgSpinnerIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z",\n        clipRule: "evenodd",\n        opacity: 0.7\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z",\n        clipRule: "evenodd",\n        opacity: 0.6\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z",\n        clipRule: "evenodd",\n        opacity: 0.5\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z",\n        clipRule: "evenodd"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z",\n        clipRule: "evenodd",\n        opacity: 0.4\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z",\n        clipRule: "evenodd",\n        opacity: 0.9\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z",\n        clipRule: "evenodd",\n        opacity: 0.3\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z",\n        clipRule: "evenodd",\n        opacity: 0.8\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        fill: "currentColor",\n        fillRule: "evenodd",\n        d: "M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z",\n        clipRule: "evenodd",\n        opacity: 0.2\n    }));\nvar SpinnerIcon_default = SvgSpinnerIcon;\n// src/assets/icons/UnfocusToggleIcon.tsx\n\nvar SvgUnfocusToggleIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        xmlns: "http://www.w3.org/2000/svg",\n        width: 16,\n        height: 16,\n        fill: "none"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        stroke: "currentColor",\n        strokeLinecap: "round",\n        strokeLinejoin: "round",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25"\n    })));\nvar UnfocusToggleIcon_default = SvgUnfocusToggleIcon;\n// src/components/controls/FocusToggle.tsx\nfunction FocusToggle(_a) {\n    var _b = _a, { trackRef, trackSource, participant } = _b, props = __objRest(_b, [\n        "trackRef",\n        "trackSource",\n        "participant"\n    ]);\n    const trackRefFromContext = useMaybeTrackRefContext();\n    const { mergedProps, inFocus } = useFocusToggle({\n        trackRef: trackRef != null ? trackRef : trackRefFromContext,\n        trackSource,\n        participant,\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Consumer, null, (layoutContext)=>layoutContext !== void 0 && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, mergedProps), props.children ? props.children : inFocus ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UnfocusToggleIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggleIcon_default, null)));\n}\n// src/components/controls/MediaDeviceSelect.tsx\n\n\nfunction MediaDeviceSelect(_a) {\n    var _b = _a, { kind, initialSelection, onActiveDeviceChange, onDeviceListChange, onDeviceSelectError, exactMatch, track, requestPermissions, onError } = _b, props = __objRest(_b, [\n        "kind",\n        "initialSelection",\n        "onActiveDeviceChange",\n        "onDeviceListChange",\n        "onDeviceSelectError",\n        "exactMatch",\n        "track",\n        "requestPermissions",\n        "onError"\n    ]);\n    const room = useMaybeRoomContext();\n    const handleError = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((e)=>{\n        if (room) {\n            room.emit(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, e);\n        }\n        onError == null ? void 0 : onError(e);\n    }, [\n        room,\n        onError\n    ]);\n    const { devices, activeDeviceId, setActiveMediaDevice, className } = useMediaDeviceSelect({\n        kind,\n        room,\n        track,\n        requestPermissions,\n        onError: handleError\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (initialSelection !== void 0) {\n            setActiveMediaDevice(initialSelection);\n        }\n    }, [\n        setActiveMediaDevice\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (typeof onDeviceListChange === "function") {\n            onDeviceListChange(devices);\n        }\n    }, [\n        onDeviceListChange,\n        devices\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (activeDeviceId && activeDeviceId !== "") {\n            onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(activeDeviceId);\n        }\n    }, [\n        activeDeviceId\n    ]);\n    const handleActiveDeviceChange = (deviceId)=>__async(this, null, function*() {\n            try {\n                yield setActiveMediaDevice(deviceId, {\n                    exact: exactMatch\n                });\n            } catch (e) {\n                if (e instanceof Error) {\n                    onDeviceSelectError == null ? void 0 : onDeviceSelectError(e);\n                } else {\n                    throw e;\n                }\n            }\n        });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className\n        }, {\n            className: "lk-list"\n        }), [\n        className,\n        props\n    ]);\n    function isActive(deviceId, activeDeviceId2, index) {\n        return deviceId === activeDeviceId2 || index === 0 && activeDeviceId2 === "default";\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", __spreadValues({}, mergedProps), devices.map((device, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", {\n            key: device.deviceId,\n            id: device.deviceId,\n            "data-lk-active": isActive(device.deviceId, activeDeviceId, index),\n            "aria-selected": isActive(device.deviceId, activeDeviceId, index),\n            role: "option"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", {\n            className: "lk-button",\n            onClick: ()=>handleActiveDeviceChange(device.deviceId)\n        }, device.label))));\n}\n// src/components/controls/StartAudio.tsx\n\nfunction StartAudio(_a) {\n    var _b = _a, { label = "Allow Audio" } = _b, props = __objRest(_b, [\n        "label"\n    ]);\n    const room = useRoomContext();\n    const { mergedProps } = useStartAudio({\n        room,\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, mergedProps), label);\n}\n// src/components/controls/TrackToggle.tsx\n\n// src/assets/icons/util.tsx\n\n\nfunction getSourceIcon(source, enabled) {\n    switch(source){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicDisabledIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraDisabledIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareStopIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, null);\n        default:\n            return void 0;\n    }\n}\nfunction getConnectionQualityIcon(quality) {\n    switch(quality){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Excellent:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityExcellentIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Good:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityGoodIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Poor:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityPoorIcon_default, null);\n        default:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityUnknownIcon_default, null);\n    }\n}\n// src/components/controls/TrackToggle.tsx\nfunction TrackToggle(_a) {\n    var _b = _a, { showIcon } = _b, props = __objRest(_b, [\n        "showIcon"\n    ]);\n    const { buttonProps, enabled } = useTrackToggle(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({}, buttonProps), (showIcon != null ? showIcon : true) && getSourceIcon(props.source, enabled), props.children);\n}\n// src/components/layout/FocusLayout.tsx\n\n// src/components/participant/ParticipantTile.tsx\n\n\n\n// src/components/participant/ConnectionQualityIndicator.tsx\n\nfunction ConnectionQualityIndicator(props) {\n    var _a;\n    const { className, quality } = useConnectionQualityIndicator(props);\n    const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return __spreadProps(__spreadValues({}, mergeProps2(props, {\n            className\n        })), {\n            "data-lk-quality": quality\n        });\n    }, [\n        quality,\n        props,\n        className\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, elementProps), (_a = props.children) != null ? _a : getConnectionQualityIcon(quality));\n}\n// src/components/participant/ParticipantName.tsx\n\n\nfunction ParticipantName(_a) {\n    var _b = _a, { participant } = _b, props = __objRest(_b, [\n        "participant"\n    ]);\n    const p = useEnsureParticipant(participant);\n    const { className, infoObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantName)(p);\n    }, [\n        p\n    ]);\n    const { identity, name } = useObservableState(infoObserver, {\n        name: p.name,\n        identity: p.identity,\n        metadata: p.metadata\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return mergeProps2(props, {\n            className,\n            "data-lk-participant-name": name\n        });\n    }, [\n        props,\n        className,\n        name\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", __spreadValues({}, mergedProps), name !== "" ? name : identity, props.children);\n}\n// src/components/participant/TrackMutedIndicator.tsx\n\nfunction TrackMutedIndicator(_a) {\n    var _b = _a, { source, participant, trackRef, show = "always" } = _b, props = __objRest(_b, [\n        "source",\n        "participant",\n        "trackRef",\n        "show"\n    ]);\n    var _a2, _b2;\n    const { className, isMuted } = useTrackMutedIndicator(trackRef != null ? trackRef : source, {\n        participant\n    });\n    const showIndicator = show === "always" || show === "muted" && isMuted || show === "unmuted" && !isMuted;\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className\n        }), [\n        className,\n        props\n    ]);\n    if (!showIndicator) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadProps(__spreadValues({}, htmlProps), {\n        "data-lk-muted": isMuted\n    }), (_b2 = props.children) != null ? _b2 : getSourceIcon((_a2 = trackRef == null ? void 0 : trackRef.source) != null ? _a2 : source, !isMuted));\n}\n// src/assets/images/ParticipantPlaceholder.tsx\n\nvar SvgParticipantPlaceholder = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadValues({\n        width: 320,\n        height: 320,\n        viewBox: "0 0 320 320",\n        preserveAspectRatio: "xMidYMid meet",\n        fill: "none",\n        xmlns: "http://www.w3.org/2000/svg"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z",\n        fill: "white",\n        fillOpacity: 0.25\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n        d: "M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z",\n        fill: "white",\n        fillOpacity: 0.25\n    }));\nvar ParticipantPlaceholder_default = SvgParticipantPlaceholder;\n// src/components/participant/VideoTrack.tsx\n\n\n\nfunction VideoTrack(_a) {\n    var _b = _a, { onTrackClick, onClick, onSubscriptionStatusChanged, trackRef, name, publication, source, participant: p, manageSubscription } = _b, props = __objRest(_b, [\n        "onTrackClick",\n        "onClick",\n        "onSubscriptionStatusChanged",\n        "trackRef",\n        "name",\n        "publication",\n        "source",\n        "participant",\n        "manageSubscription"\n    ]);\n    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n    const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n    const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n    const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n    if (_source === void 0) {\n        throw new Error("VideoTrack: You must provide a trackRef or source property.");\n    }\n    const participant = useEnsureParticipant(_participant);\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const intersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useIntersectionObserver(mediaEl, {});\n    const debouncedIntersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useDebounce(intersectionEntry, 3e3);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (debouncedIntersectionEntry == null ? void 0 : debouncedIntersectionEntry.isIntersecting) === false && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === false) {\n            _publication.setSubscribed(false);\n        }\n    }, [\n        debouncedIntersectionEntry,\n        _publication,\n        manageSubscription\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === true) {\n            _publication.setSubscribed(true);\n        }\n    }, [\n        intersectionEntry,\n        _publication,\n        manageSubscription\n    ]);\n    const { elementProps, publication: pub, isSubscribed } = useMediaTrackBySourceOrName({\n        participant,\n        name: _name,\n        source: _source,\n        publication: _publication\n    }, {\n        element: mediaEl,\n        props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [\n        isSubscribed,\n        onSubscriptionStatusChanged\n    ]);\n    const clickHandler = (evt)=>{\n        onClick == null ? void 0 : onClick(evt);\n        onTrackClick == null ? void 0 : onTrackClick({\n            participant,\n            track: pub\n        });\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("video", __spreadProps(__spreadValues({\n        ref: mediaEl\n    }, elementProps), {\n        muted: true,\n        onClick: clickHandler\n    }));\n}\n// src/components/participant/AudioTrack.tsx\n\n\n\nfunction AudioTrack(_a) {\n    var _b = _a, { trackRef, onSubscriptionStatusChanged, volume, source, name, publication, participant: p } = _b, props = __objRest(_b, [\n        "trackRef",\n        "onSubscriptionStatusChanged",\n        "volume",\n        "source",\n        "name",\n        "publication",\n        "participant"\n    ]);\n    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n    const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n    const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n    const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n    if (_source === void 0) {\n        throw new Error("The AudioTrack component expects a trackRef or source property.");\n    }\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const participant = useEnsureParticipant(_participant);\n    const { elementProps, isSubscribed, track, publication: pub } = useMediaTrackBySourceOrName({\n        source: _source,\n        name: _name,\n        participant,\n        publication: _publication\n    }, {\n        element: mediaEl,\n        props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [\n        isSubscribed,\n        onSubscriptionStatusChanged\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (track === void 0 || volume === void 0) {\n            return;\n        }\n        if (track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteAudioTrack) {\n            track.setVolume(volume);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn("Volume can only be set on remote audio tracks.");\n        }\n    }, [\n        volume,\n        track\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (pub === void 0 || props.muted === void 0) {\n            return;\n        }\n        if (pub instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication) {\n            pub.setEnabled(!props.muted);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn("Can only call setEnabled on remote track publications.");\n        }\n    }, [\n        props.muted,\n        pub,\n        track\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("audio", __spreadValues({\n        ref: mediaEl\n    }, elementProps));\n}\n// src/components/participant/ParticipantTile.tsx\nfunction ParticipantContextIfNeeded(props) {\n    const hasContext = !!useMaybeParticipantContext();\n    return props.participant && !hasContext ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, {\n        value: props.participant\n    }, props.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction TrackRefContextIfNeeded(props) {\n    const hasContext = !!useMaybeTrackRefContext();\n    return props.trackRef && !hasContext ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, {\n        value: props.trackRef\n    }, props.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction ParticipantTile(_a) {\n    var _b = _a, { trackRef, participant, children, source = livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, onParticipantClick, publication, disableSpeakingIndicator } = _b, htmlProps = __objRest(_b, [\n        "trackRef",\n        "participant",\n        "children",\n        "source",\n        "onParticipantClick",\n        "publication",\n        "disableSpeakingIndicator"\n    ]);\n    var _a2, _b2;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const p = useEnsureParticipant(participant);\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _a3, _b3, _c, _d, _e, _f;\n        return {\n            participant: (_b3 = (_a3 = trackRef == null ? void 0 : trackRef.participant) != null ? _a3 : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _b3 : p,\n            source: (_d = (_c = trackRef == null ? void 0 : trackRef.source) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _d : source,\n            publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication\n        };\n    }, [\n        maybeTrackRef,\n        p,\n        publication,\n        source,\n        trackRef\n    ]);\n    const { elementProps } = useParticipantTile({\n        participant: trackReference.participant,\n        htmlProps,\n        source: trackReference.source,\n        publication: trackReference.publication,\n        disableSpeakingIndicator,\n        onParticipantClick\n    });\n    const isEncrypted = useIsEncrypted(p);\n    const layoutContext = useMaybeLayoutContext();\n    const autoManageSubscription = (_a2 = useFeatureContext()) == null ? void 0 : _a2.autoSubscription;\n    const handleSubscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((subscribed)=>{\n        if (trackReference.source && !subscribed && layoutContext && layoutContext.pin.dispatch && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackReference, layoutContext.pin.state)) {\n            layoutContext.pin.dispatch({\n                msg: "clear_pin"\n            });\n        }\n    }, [\n        trackReference,\n        layoutContext\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        style: {\n            position: "relative"\n        }\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContextIfNeeded, {\n        trackRef: trackReference\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, {\n        participant: trackReference.participant\n    }, children != null ? children : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && (((_b2 = trackReference.publication) == null ? void 0 : _b2.kind) === "video" || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoTrack, {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe,\n        manageSubscription: autoManageSubscription\n    }) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-participant-placeholder"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-participant-metadata"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-participant-metadata-item"\n    }, trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, isEncrypted && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LockLockedIcon_default, {\n        style: {\n            marginRight: "0.25rem"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        show: "muted"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, {\n        style: {\n            marginRight: "0.25rem"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null, "\'s screen"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, {\n        className: "lk-participant-metadata-item"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggle, {\n        trackRef: trackReference\n    }))));\n}\n// src/components/layout/FocusLayout.tsx\nfunction FocusLayoutContainer(props) {\n    const elementProps = mergeProps2(props, {\n        className: "lk-focus-layout"\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, elementProps), props.children);\n}\nfunction FocusLayout(_a) {\n    var _b = _a, { trackRef, track } = _b, htmlProps = __objRest(_b, [\n        "trackRef",\n        "track"\n    ]);\n    const trackReference = trackRef != null ? trackRef : track;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, __spreadValues(__spreadValues({}, trackReference), htmlProps));\n}\n// src/components/layout/GridLayout.tsx\n\n// src/components/TrackLoop.tsx\n\n\nfunction TrackLoop(_a) {\n    var _b = _a, { tracks } = _b, props = __objRest(_b, [\n        "tracks"\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, tracks.map((trackReference)=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, {\n            value: trackReference,\n            key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackReference)\n        }, cloneSingleChild(props.children));\n    }));\n}\n// src/components/controls/PaginationControl.tsx\n\n\nfunction PaginationControl({ totalPageCount, nextPage, prevPage, currentPage, pagesContainer: connectedElement }) {\n    const [interactive, setInteractive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let subscription;\n        if (connectedElement) {\n            subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createInteractingObservable)(connectedElement.current, 2e3).subscribe(setInteractive);\n        }\n        return ()=>{\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        };\n    }, [\n        connectedElement\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-pagination-control",\n        "data-lk-user-interaction": interactive\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", {\n        className: "lk-button",\n        onClick: prevPage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n        className: "lk-pagination-count"\n    }, `${currentPage} of ${totalPageCount}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", {\n        className: "lk-button",\n        onClick: nextPage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)));\n}\n// src/components/controls/PaginationIndicator.tsx\n\nfunction PaginationIndicator({ totalPageCount, currentPage }) {\n    const bubbles = new Array(totalPageCount).fill("").map((_, index)=>{\n        if (index + 1 === currentPage) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n                "data-lk-active": true,\n                key: index\n            });\n        } else {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n                key: index\n            });\n        }\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-pagination-indicator"\n    }, bubbles);\n}\n// src/components/layout/GridLayout.tsx\nfunction GridLayout(_a) {\n    var _b = _a, { tracks } = _b, props = __objRest(_b, [\n        "tracks"\n    ]);\n    const gridEl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n    const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className: "lk-grid-layout"\n        }), [\n        props\n    ]);\n    const { layout } = useGridLayout(gridEl, tracks.length);\n    const pagination = usePagination(layout.maxTiles, tracks);\n    useSwipe(gridEl, {\n        onLeftSwipe: pagination.nextPage,\n        onRightSwipe: pagination.prevPage\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        ref: gridEl,\n        "data-lk-pagination": pagination.totalPageCount > 1\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: pagination.tracks\n    }, props.children), tracks.length > layout.maxTiles && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationIndicator, {\n        totalPageCount: pagination.totalPageCount,\n        currentPage: pagination.currentPage\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationControl, __spreadValues({\n        pagesContainer: gridEl\n    }, pagination))));\n}\n// src/components/layout/CarouselLayout.tsx\n\n\nvar MIN_HEIGHT = 130;\nvar MIN_WIDTH = 140;\nvar MIN_VISIBLE_TILES = 1;\nvar ASPECT_RATIO = 16 / 10;\nvar ASPECT_RATIO_INVERT = (1 - ASPECT_RATIO) * -1;\nvar CarouselView = CarouselLayout;\nfunction CarouselLayout(_a) {\n    var _b = _a, { tracks, orientation } = _b, props = __objRest(_b, [\n        "tracks",\n        "orientation"\n    ]);\n    const asideEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const [prevTiles, setPrevTiles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    const { width, height } = useSize(asideEl);\n    const carouselOrientation = orientation ? orientation : height >= width ? "vertical" : "horizontal";\n    const tileSpan = carouselOrientation === "vertical" ? Math.max(width * ASPECT_RATIO_INVERT, MIN_HEIGHT) : Math.max(height * ASPECT_RATIO, MIN_WIDTH);\n    const scrollBarWidth = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)();\n    const tilesThatFit = carouselOrientation === "vertical" ? Math.max((height - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES) : Math.max((width - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES);\n    let maxVisibleTiles = Math.round(tilesThatFit);\n    if (Math.abs(tilesThatFit - prevTiles) < 0.5) {\n        maxVisibleTiles = Math.round(prevTiles);\n    } else if (prevTiles !== tilesThatFit) {\n        setPrevTiles(tilesThatFit);\n    }\n    const sortedTiles = useVisualStableUpdate(tracks, maxVisibleTiles);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (asideEl.current) {\n            asideEl.current.dataset.lkOrientation = carouselOrientation;\n            asideEl.current.style.setProperty("--lk-max-visible-tiles", maxVisibleTiles.toString());\n        }\n    }, [\n        maxVisibleTiles,\n        carouselOrientation\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("aside", __spreadValues({\n        key: carouselOrientation,\n        className: "lk-carousel",\n        ref: asideEl\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: sortedTiles\n    }, props.children));\n}\n// src/components/layout/LayoutContextProvider.tsx\n\n\nfunction LayoutContextProvider({ value, onPinChange, onWidgetChange, children }) {\n    const layoutContextValue = useEnsureCreateLayoutContext(value);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("PinState Updated", {\n            state: layoutContextValue.pin.state\n        });\n        if (onPinChange && layoutContextValue.pin.state) onPinChange(layoutContextValue.pin.state);\n    }, [\n        layoutContextValue.pin.state,\n        onPinChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("Widget Updated", {\n            widgetState: layoutContextValue.widget.state\n        });\n        if (onWidgetChange && layoutContextValue.widget.state) {\n            onWidgetChange(layoutContextValue.widget.state);\n        }\n    }, [\n        onWidgetChange,\n        layoutContextValue.widget.state\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Provider, {\n        value: layoutContextValue\n    }, children);\n}\n// src/components/LiveKitRoom.tsx\n\nfunction LiveKitRoom(props) {\n    const { room, htmlProps } = useLiveKitRoom(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, htmlProps), room && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, {\n        value: room\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LKFeatureContext.Provider, {\n        value: props.featureFlags\n    }, props.children)));\n}\n// src/components/participant/AudioVisualizer.tsx\n\n\nfunction AudioVisualizer(_a) {\n    var _b = _a, { participant, trackRef } = _b, props = __objRest(_b, [\n        "participant",\n        "trackRef"\n    ]);\n    var _a2, _b2;\n    const svgWidth = 200;\n    const svgHeight = 90;\n    const barWidth = 6;\n    const barSpacing = 4;\n    const volMultiplier = 50;\n    const barCount = 7;\n    const p = (_a2 = useMaybeParticipantContext()) != null ? _a2 : participant;\n    let ref = (_b2 = useMaybeTrackRefContext()) != null ? _b2 : trackRef;\n    if (!ref) {\n        if (!p) {\n            throw Error(`Participant missing, provide it directly or within a context`);\n        }\n        ref = {\n            participant: p,\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n        };\n    }\n    const volumes = useMultibandTrackVolume(ref, {\n        bands: 7,\n        loPass: 300\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", __spreadProps(__spreadValues({\n        width: "100%",\n        height: "100%",\n        viewBox: `0 0 ${svgWidth} ${svgHeight}`\n    }, props), {\n        className: "lk-audio-visualizer"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {\n        x: "0",\n        y: "0",\n        width: "100%",\n        height: "100%"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("g", {\n        style: {\n            transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`\n        }\n    }, volumes.map((vol, idx)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("rect", {\n            key: idx,\n            x: idx * (barWidth + barSpacing),\n            y: svgHeight / 2 - vol * volMultiplier / 2,\n            width: barWidth,\n            height: vol * volMultiplier\n        }))));\n}\n// src/components/ParticipantLoop.tsx\n\nfunction ParticipantLoop(_a) {\n    var _b = _a, { participants } = _b, props = __objRest(_b, [\n        "participants"\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, participants.map((participant)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, {\n            value: participant,\n            key: participant.identity\n        }, cloneSingleChild(props.children))));\n}\n// src/components/RoomAudioRenderer.tsx\n\n\n\nfunction RoomAudioRenderer({ volume, muted }) {\n    const tracks = useTracks([\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio,\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown\n    ], {\n        updateOnlyOn: [],\n        onlySubscribed: false\n    }).filter((ref)=>!(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(ref.participant) && ref.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        for (const track of tracks){\n            track.publication.setSubscribed(true);\n        }\n    }, [\n        tracks\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        style: {\n            display: "none"\n        }\n    }, tracks.map((trackRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n            key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackRef),\n            trackRef,\n            volume,\n            muted\n        })));\n}\n// src/components/RoomName.tsx\n\nfunction RoomName(_a) {\n    var _b = _a, { childrenPosition = "before", children } = _b, htmlAttributes = __objRest(_b, [\n        "childrenPosition",\n        "children"\n    ]);\n    const { name } = useRoomInfo();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", __spreadValues({}, htmlAttributes), childrenPosition === "before" && children, name, childrenPosition === "after" && children);\n}\n// src/components/Toast.tsx\n\nfunction Toast(props) {\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className: "lk-toast"\n        }), [\n        props\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, htmlProps), props.children);\n}\n// src/components/participant/ParticipantAudioTile.tsx\n\n\nfunction ParticipantAudioTile(_a) {\n    var _b = _a, { participant, children, source, publication, disableSpeakingIndicator, onParticipantClick } = _b, htmlProps = __objRest(_b, [\n        "participant",\n        "children",\n        "source",\n        "publication",\n        "disableSpeakingIndicator",\n        "onParticipantClick"\n    ]);\n    const p = useEnsureParticipant(participant);\n    const { elementProps } = useParticipantTile({\n        participant: p,\n        htmlProps,\n        disableSpeakingIndicator,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        publication,\n        onParticipantClick\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        style: {\n            position: "relative"\n        }\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, {\n        participant: p\n    }, children != null ? children : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n        source: source != null ? source : livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioVisualizer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-participant-metadata"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-participant-metadata-item"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, {\n        className: "lk-participant-metadata-item"\n    })))));\n}\n// src/components/ConnectionStateToast.tsx\n\n\nfunction ConnectionStateToast(props) {\n    const [notification, setNotification] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const state = useConnectionState(props.room);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        switch(state){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Reconnecting:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, {\n                    className: "lk-spinner"\n                }), " Reconnecting"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connecting:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, {\n                    className: "lk-spinner"\n                }), " Connecting"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, "Disconnected"));\n                break;\n            default:\n                setNotification(void 0);\n                break;\n        }\n    }, [\n        state\n    ]);\n    return notification ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toast, {\n        className: "lk-toast-connection-state"\n    }, notification) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\n// src/components/ChatEntry.tsx\n\n\nfunction ChatEntry(_a) {\n    var _b = _a, { entry, hideName = false, hideTimestamp = false, messageFormatter } = _b, props = __objRest(_b, [\n        "entry",\n        "hideName",\n        "hideTimestamp",\n        "messageFormatter"\n    ]);\n    var _a2, _b2, _c, _d;\n    const formattedMessage = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return messageFormatter ? messageFormatter(entry.message) : entry.message;\n    }, [\n        entry.message,\n        messageFormatter\n    ]);\n    const hasBeenEdited = !!entry.editTimestamp;\n    const time = new Date(entry.timestamp);\n    const locale = navigator ? navigator.language : "en-US";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", __spreadValues({\n        className: "lk-chat-entry",\n        title: time.toLocaleTimeString(locale, {\n            timeStyle: "full"\n        }),\n        "data-lk-message-origin": ((_a2 = entry.from) == null ? void 0 : _a2.isLocal) ? "local" : "remote"\n    }, props), (!hideTimestamp || !hideName || hasBeenEdited) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n        className: "lk-meta-data"\n    }, !hideName && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("strong", {\n        className: "lk-participant-name"\n    }, (_d = (_b2 = entry.from) == null ? void 0 : _b2.name) != null ? _d : (_c = entry.from) == null ? void 0 : _c.identity), (!hideTimestamp || hasBeenEdited) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n        className: "lk-timestamp"\n    }, hasBeenEdited && "edited ", time.toLocaleTimeString(locale, {\n        timeStyle: "short"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", {\n        className: "lk-message-body"\n    }, formattedMessage));\n}\nfunction formatChatMessageLinks(message) {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.tokenize)(message, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createDefaultGrammar)()).map((tok, i)=>{\n        if (typeof tok === `string`) {\n            return tok;\n        } else {\n            const content = tok.content.toString();\n            const href = tok.type === `url` ? /^http(s?):\\/\\//.test(content) ? content : `https://${content}` : `mailto:${content}`;\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", {\n                className: "lk-chat-link",\n                key: i,\n                href,\n                target: "_blank",\n                rel: "noreferrer"\n            }, content);\n        }\n    });\n}\n// src/prefabs/Chat.tsx\n\nfunction Chat(_a) {\n    var _b = _a, { messageFormatter, messageDecoder, messageEncoder, channelTopic } = _b, props = __objRest(_b, [\n        "messageFormatter",\n        "messageDecoder",\n        "messageEncoder",\n        "channelTopic"\n    ]);\n    const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const ulRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const chatOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return {\n            messageDecoder,\n            messageEncoder,\n            channelTopic\n        };\n    }, [\n        messageDecoder,\n        messageEncoder,\n        channelTopic\n    ]);\n    const { send, chatMessages, isSending } = useChat(chatOptions);\n    const layoutContext = useMaybeLayoutContext();\n    const lastReadMsgAt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    function handleSubmit(event) {\n        return __async(this, null, function*() {\n            event.preventDefault();\n            if (inputRef.current && inputRef.current.value.trim() !== "") {\n                if (send) {\n                    yield send(inputRef.current.value);\n                    inputRef.current.value = "";\n                    inputRef.current.focus();\n                }\n            }\n        });\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2;\n        if (ulRef) {\n            (_a2 = ulRef.current) == null ? void 0 : _a2.scrollTo({\n                top: ulRef.current.scrollHeight\n            });\n        }\n    }, [\n        ulRef,\n        chatMessages\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b2, _c, _d, _e;\n        if (!layoutContext || chatMessages.length === 0) {\n            return;\n        }\n        if (((_a2 = layoutContext.widget.state) == null ? void 0 : _a2.showChat) && chatMessages.length > 0 && lastReadMsgAt.current !== ((_b2 = chatMessages[chatMessages.length - 1]) == null ? void 0 : _b2.timestamp)) {\n            lastReadMsgAt.current = (_c = chatMessages[chatMessages.length - 1]) == null ? void 0 : _c.timestamp;\n            return;\n        }\n        const unreadMessageCount = chatMessages.filter((msg)=>!lastReadMsgAt.current || msg.timestamp > lastReadMsgAt.current).length;\n        const { widget } = layoutContext;\n        if (unreadMessageCount > 0 && ((_d = widget.state) == null ? void 0 : _d.unreadMessages) !== unreadMessageCount) {\n            (_e = widget.dispatch) == null ? void 0 : _e.call(widget, {\n                msg: "unread_msg",\n                count: unreadMessageCount\n            });\n        }\n    }, [\n        chatMessages,\n        layoutContext == null ? void 0 : layoutContext.widget\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadProps(__spreadValues({}, props), {\n        className: "lk-chat"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-chat-header"\n    }, "Messages", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, {\n        className: "lk-close-button"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatCloseIcon_default, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", {\n        className: "lk-list lk-chat-messages",\n        ref: ulRef\n    }, props.children ? chatMessages.map((msg, idx)=>{\n        var _a2;\n        return cloneSingleChild(props.children, {\n            entry: msg,\n            key: (_a2 = msg.id) != null ? _a2 : idx,\n            messageFormatter\n        });\n    }) : chatMessages.map((msg, idx, allMsg)=>{\n        var _a2;\n        const hideName = idx >= 1 && allMsg[idx - 1].from === msg.from;\n        const hideTimestamp = idx >= 1 && msg.timestamp - allMsg[idx - 1].timestamp < 6e4;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatEntry, {\n            key: (_a2 = msg.id) != null ? _a2 : idx,\n            hideName,\n            hideTimestamp: hideName === false ? false : hideTimestamp,\n            entry: msg,\n            messageFormatter\n        });\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("form", {\n        className: "lk-chat-form",\n        onSubmit: handleSubmit\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", {\n        className: "lk-form-control lk-chat-form-input",\n        disabled: isSending,\n        ref: inputRef,\n        type: "text",\n        placeholder: "Enter a message..."\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", {\n        type: "submit",\n        className: "lk-button lk-chat-form-button",\n        disabled: isSending\n    }, "Send")));\n}\n// src/prefabs/PreJoin.tsx\n\n\n// src/prefabs/MediaDeviceMenu.tsx\n\n\n\nfunction MediaDeviceMenu(_a) {\n    var _b = _a, { kind, initialSelection, onActiveDeviceChange, tracks, requestPermissions = false } = _b, props = __objRest(_b, [\n        "kind",\n        "initialSelection",\n        "onActiveDeviceChange",\n        "tracks",\n        "requestPermissions"\n    ]);\n    const [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [devices, setDevices] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const [updateRequired, setUpdateRequired] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\n    const handleActiveDeviceChange = (kind2, deviceId)=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("handle device change");\n        setIsOpen(false);\n        onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(kind2, deviceId);\n    };\n    const button = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const tooltip = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (button.current && tooltip.current && (devices || updateRequired)) {\n            (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.computeMenuPosition)(button.current, tooltip.current).then(({ x, y })=>{\n                if (tooltip.current) {\n                    Object.assign(tooltip.current.style, {\n                        left: `${x}px`,\n                        top: `${y}px`\n                    });\n                }\n            });\n        }\n        setUpdateRequired(false);\n    }, [\n        button,\n        tooltip,\n        devices,\n        updateRequired\n    ]);\n    const handleClickOutside = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event)=>{\n        if (!tooltip.current) {\n            return;\n        }\n        if (event.target === button.current) {\n            return;\n        }\n        if (isOpen && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.wasClickOutside)(tooltip.current, event)) {\n            setIsOpen(false);\n        }\n    }, [\n        isOpen,\n        tooltip,\n        button\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        document.addEventListener("click", handleClickOutside);\n        window.addEventListener("resize", ()=>setUpdateRequired(true));\n        return ()=>{\n            document.removeEventListener("click", handleClickOutside);\n            window.removeEventListener("resize", ()=>setUpdateRequired(true));\n        };\n    }, [\n        handleClickOutside,\n        setUpdateRequired\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadProps(__spreadValues({\n        className: "lk-button lk-button-menu",\n        "aria-pressed": isOpen\n    }, props), {\n        onClick: ()=>setIsOpen(!isOpen),\n        ref: button\n    }), props.children), !props.disabled && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-device-menu",\n        ref: tooltip,\n        style: {\n            visibility: isOpen ? "visible" : "hidden"\n        }\n    }, kind ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        initialSelection,\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange(kind, deviceId),\n        onDeviceListChange: setDevices,\n        kind,\n        track: tracks == null ? void 0 : tracks[kind],\n        requestPermissions\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-device-menu-heading"\n    }, "Audio inputs"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        kind: "audioinput",\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange("audioinput", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.audioinput,\n        requestPermissions\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-device-menu-heading"\n    }, "Video inputs"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        kind: "videoinput",\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange("videoinput", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.videoinput,\n        requestPermissions\n    }))));\n}\n// src/prefabs/PreJoin.tsx\n\n// src/hooks/useWarnAboutMissingStyles.ts\n\nfunction useWarnAboutMissingStyles() {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warnAboutMissingStyles();\n    }, []);\n}\n// src/prefabs/PreJoin.tsx\nvar DEFAULT_USER_CHOICES = {\n    username: "",\n    videoEnabled: true,\n    audioEnabled: true,\n    videoDeviceId: "default",\n    audioDeviceId: "default",\n    e2ee: false,\n    sharedPassphrase: ""\n};\nfunction usePreviewTracks(options, onError) {\n    const [tracks, setTracks] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let trackPromise = void 0;\n        let needsCleanup = false;\n        if (options.audio || options.video) {\n            trackPromise = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalTracks)(options);\n            trackPromise.then((tracks2)=>{\n                if (needsCleanup) {\n                    tracks2.forEach((tr)=>tr.stop());\n                } else {\n                    setTracks(tracks2);\n                }\n            }).catch(onError);\n        }\n        return ()=>{\n            needsCleanup = true;\n            trackPromise == null ? void 0 : trackPromise.then((tracks2)=>tracks2.forEach((track)=>{\n                    track.stop();\n                }));\n        };\n    }, [\n        JSON.stringify(options)\n    ]);\n    return tracks;\n}\nfunction usePreviewDevice(enabled, deviceId, kind) {\n    const [deviceError, setDeviceError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const [isCreatingTrack, setIsCreatingTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const devices = useMediaDevices({\n        kind\n    });\n    const [selectedDevice, setSelectedDevice] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const [localTrack, setLocalTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const [localDeviceId, setLocalDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(deviceId);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setLocalDeviceId(deviceId);\n    }, [\n        deviceId\n    ]);\n    const createTrack = (deviceId2, kind2)=>__async(this, null, function*() {\n            try {\n                const track = kind2 === "videoinput" ? yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalVideoTrack)({\n                    deviceId: deviceId2,\n                    resolution: livekit_client__WEBPACK_IMPORTED_MODULE_4__.VideoPresets.h720.resolution\n                }) : yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalAudioTrack)({\n                    deviceId: deviceId2\n                });\n                const newDeviceId = yield track.getDeviceId();\n                if (newDeviceId && deviceId2 !== newDeviceId) {\n                    prevDeviceId.current = newDeviceId;\n                    setLocalDeviceId(newDeviceId);\n                }\n                setLocalTrack(track);\n            } catch (e) {\n                if (e instanceof Error) {\n                    setDeviceError(e);\n                }\n            }\n        });\n    const switchDevice = (track, id)=>__async(this, null, function*() {\n            yield track.setDeviceId(id);\n            prevDeviceId.current = id;\n        });\n    const prevDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useRef(localDeviceId);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (enabled && !localTrack && !deviceError && !isCreatingTrack) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("creating track", kind);\n            setIsCreatingTrack(true);\n            createTrack(localDeviceId, kind).finally(()=>{\n                setIsCreatingTrack(false);\n            });\n        }\n    }, [\n        enabled,\n        localTrack,\n        deviceError,\n        isCreatingTrack\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!localTrack) {\n            return;\n        }\n        if (!enabled) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`muting ${kind} track`);\n            localTrack.mute().then(()=>_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(localTrack.mediaStreamTrack));\n        } else if ((selectedDevice == null ? void 0 : selectedDevice.deviceId) && prevDeviceId.current !== (selectedDevice == null ? void 0 : selectedDevice.deviceId)) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`switching ${kind} device from`, prevDeviceId.current, selectedDevice.deviceId);\n            switchDevice(localTrack, selectedDevice.deviceId);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`unmuting local ${kind} track`);\n            localTrack.unmute();\n        }\n    }, [\n        localTrack,\n        selectedDevice,\n        enabled,\n        kind\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return ()=>{\n            if (localTrack) {\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`stopping local ${kind} track`);\n                localTrack.stop();\n                localTrack.mute();\n            }\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setSelectedDevice(devices.find((dev)=>dev.deviceId === localDeviceId));\n    }, [\n        localDeviceId,\n        devices\n    ]);\n    return {\n        selectedDevice,\n        localTrack,\n        deviceError\n    };\n}\nfunction PreJoin(_a) {\n    var _b = _a, { defaults = {}, onValidate, onSubmit, onError, debug, joinLabel = "Join Room", micLabel = "Microphone", camLabel = "Camera", userLabel = "Username", showE2EEOptions = false, persistUserChoices = true } = _b, htmlProps = __objRest(_b, [\n        "defaults",\n        "onValidate",\n        "onSubmit",\n        "onError",\n        "debug",\n        "joinLabel",\n        "micLabel",\n        "camLabel",\n        "userLabel",\n        "showE2EEOptions",\n        "persistUserChoices"\n    ]);\n    var _a2, _b2;\n    const [userChoices, setUserChoices] = react__WEBPACK_IMPORTED_MODULE_0__.useState(DEFAULT_USER_CHOICES);\n    const partialDefaults = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaults.audioDeviceId !== void 0 && {\n        audioDeviceId: defaults.audioDeviceId\n    }), defaults.videoDeviceId !== void 0 && {\n        videoDeviceId: defaults.videoDeviceId\n    }), defaults.audioEnabled !== void 0 && {\n        audioEnabled: defaults.audioEnabled\n    }), defaults.videoEnabled !== void 0 && {\n        videoEnabled: defaults.videoEnabled\n    }), defaults.username !== void 0 && {\n        username: defaults.username\n    });\n    const { userChoices: initialUserChoices, saveAudioInputDeviceId, saveAudioInputEnabled, saveVideoInputDeviceId, saveVideoInputEnabled, saveUsername } = usePersistentUserChoices({\n        defaults: partialDefaults,\n        preventSave: !persistUserChoices,\n        preventLoad: !persistUserChoices\n    });\n    const [audioEnabled, setAudioEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.audioEnabled);\n    const [videoEnabled, setVideoEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.videoEnabled);\n    const [audioDeviceId, setAudioDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.audioDeviceId);\n    const [videoDeviceId, setVideoDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.videoDeviceId);\n    const [username, setUsername] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.username);\n    const [e2ee, setE2ee] = react__WEBPACK_IMPORTED_MODULE_0__.useState((_a2 = defaults.e2ee) != null ? _a2 : DEFAULT_USER_CHOICES.e2ee);\n    const [sharedPassphrase, setSharedPassphrase] = react__WEBPACK_IMPORTED_MODULE_0__.useState((_b2 = defaults.sharedPassphrase) != null ? _b2 : DEFAULT_USER_CHOICES.sharedPassphrase);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveAudioInputEnabled(audioEnabled);\n    }, [\n        audioEnabled,\n        saveAudioInputEnabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveVideoInputEnabled(videoEnabled);\n    }, [\n        videoEnabled,\n        saveVideoInputEnabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveAudioInputDeviceId(audioDeviceId);\n    }, [\n        audioDeviceId,\n        saveAudioInputDeviceId\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveVideoInputDeviceId(videoDeviceId);\n    }, [\n        videoDeviceId,\n        saveVideoInputDeviceId\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveUsername(username);\n    }, [\n        username,\n        saveUsername\n    ]);\n    const tracks = usePreviewTracks({\n        audio: audioEnabled ? {\n            deviceId: initialUserChoices.audioDeviceId\n        } : false,\n        video: videoEnabled ? {\n            deviceId: initialUserChoices.videoDeviceId\n        } : false\n    }, onError);\n    const videoEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const videoTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>tracks == null ? void 0 : tracks.filter((track)=>track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Video)[0], [\n        tracks\n    ]);\n    const facingMode = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (videoTrack) {\n            const { facingMode: facingMode2 } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(videoTrack);\n            return facingMode2;\n        } else {\n            return "undefined";\n        }\n    }, [\n        videoTrack\n    ]);\n    const audioTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>tracks == null ? void 0 : tracks.filter((track)=>track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio)[0], [\n        tracks\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (videoEl.current && videoTrack) {\n            videoTrack.unmute();\n            videoTrack.attach(videoEl.current);\n        }\n        return ()=>{\n            videoTrack == null ? void 0 : videoTrack.detach();\n        };\n    }, [\n        videoTrack\n    ]);\n    const [isValid, setIsValid] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const handleValidation = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((values)=>{\n        if (typeof onValidate === "function") {\n            return onValidate(values);\n        } else {\n            return values.username !== "";\n        }\n    }, [\n        onValidate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const newUserChoices = {\n            username,\n            videoEnabled,\n            videoDeviceId,\n            audioEnabled,\n            audioDeviceId,\n            e2ee,\n            sharedPassphrase\n        };\n        setUserChoices(newUserChoices);\n        setIsValid(handleValidation(newUserChoices));\n    }, [\n        username,\n        videoEnabled,\n        handleValidation,\n        audioEnabled,\n        audioDeviceId,\n        videoDeviceId,\n        sharedPassphrase,\n        e2ee\n    ]);\n    function handleSubmit(event) {\n        event.preventDefault();\n        if (handleValidation(userChoices)) {\n            if (typeof onSubmit === "function") {\n                onSubmit(userChoices);\n            }\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn("Validation failed with: ", userChoices);\n        }\n    }\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        className: "lk-prejoin"\n    }, htmlProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-video-container"\n    }, videoTrack && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("video", {\n        ref: videoEl,\n        width: "1280",\n        height: "720",\n        "data-lk-facing-mode": facingMode\n    }), (!videoTrack || !videoEnabled) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-camera-off-note"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group-container"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group audio"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        initialState: audioEnabled,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        onChange: (enabled)=>setAudioEnabled(enabled)\n    }, micLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group-menu"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        initialSelection: audioDeviceId,\n        kind: "audioinput",\n        disabled: !audioTrack,\n        tracks: {\n            audioinput: audioTrack\n        },\n        onActiveDeviceChange: (_, id)=>setAudioDeviceId(id)\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group video"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        initialState: videoEnabled,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n        onChange: (enabled)=>setVideoEnabled(enabled)\n    }, camLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group-menu"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        initialSelection: videoDeviceId,\n        kind: "videoinput",\n        disabled: !videoTrack,\n        tracks: {\n            videoinput: videoTrack\n        },\n        onActiveDeviceChange: (_, id)=>setVideoDeviceId(id)\n    })))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("form", {\n        className: "lk-username-container"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", {\n        className: "lk-form-control",\n        id: "username",\n        name: "username",\n        type: "text",\n        defaultValue: username,\n        placeholder: userLabel,\n        onChange: (inputEl)=>setUsername(inputEl.target.value),\n        autoComplete: "off"\n    }), showE2EEOptions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        style: {\n            display: "flex",\n            flexDirection: "column",\n            gap: "1rem"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        style: {\n            display: "flex",\n            flexDirection: "row",\n            gap: "1rem"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", {\n        id: "use-e2ee",\n        type: "checkbox",\n        checked: e2ee,\n        onChange: (ev)=>setE2ee(ev.target.checked)\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", {\n        htmlFor: "use-e2ee"\n    }, "Enable end-to-end encryption")), e2ee && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        style: {\n            display: "flex",\n            flexDirection: "row",\n            gap: "1rem"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", {\n        htmlFor: "passphrase"\n    }, "Passphrase"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", {\n        id: "passphrase",\n        type: "password",\n        value: sharedPassphrase,\n        onChange: (ev)=>setSharedPassphrase(ev.target.value)\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", {\n        className: "lk-button lk-join-button",\n        type: "submit",\n        onClick: handleSubmit,\n        disabled: !isValid\n    }, joinLabel)), debug && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("strong", null, "User Choices:"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", {\n        className: "lk-list",\n        style: {\n            overflow: "hidden",\n            maxWidth: "15rem"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", null, "Username: ", `${userChoices.username}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", null, "Video Enabled: ", `${userChoices.videoEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", null, "Audio Enabled: ", `${userChoices.audioEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", null, "Video Device: ", `${userChoices.videoDeviceId}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", null, "Audio Device: ", `${userChoices.audioDeviceId}`))));\n}\n// src/prefabs/VideoConference.tsx\n\n\n\n// src/prefabs/ControlBar.tsx\n\n\n\n// src/components/controls/StartMediaButton.tsx\n\nfunction StartMediaButton(_a) {\n    var _b = _a, { label } = _b, props = __objRest(_b, [\n        "label"\n    ]);\n    const room = useRoomContext();\n    const { mergedProps: audioProps, canPlayAudio } = useStartAudio({\n        room,\n        props\n    });\n    const { mergedProps, canPlayVideo } = useStartVideo({\n        room,\n        props: audioProps\n    });\n    const _a2 = mergedProps, { style } = _a2, restProps = __objRest(_a2, [\n        "style"\n    ]);\n    style.display = canPlayAudio && canPlayVideo ? "none" : "block";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", __spreadValues({\n        style\n    }, restProps), label != null ? label : `Start ${!canPlayAudio ? "Audio" : "Video"}`);\n}\n// src/prefabs/ControlBar.tsx\nfunction ControlBar(_a) {\n    var _b = _a, { variation, controls, saveUserChoices: saveUserChoices2 = true } = _b, props = __objRest(_b, [\n        "variation",\n        "controls",\n        "saveUserChoices"\n    ]);\n    var _a2, _b2, _c, _d, _e;\n    const [isChatOpen, setIsChatOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const layoutContext = useMaybeLayoutContext();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a3, _b3;\n        if (((_a3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a3.showChat) !== void 0) {\n            setIsChatOpen((_b3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _b3.showChat);\n        }\n    }, [\n        (_a2 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a2.showChat\n    ]);\n    const isTooLittleSpace = useMediaQuery(`(max-width: ${isChatOpen ? 1e3 : 760}px)`);\n    const defaultVariation = isTooLittleSpace ? "minimal" : "verbose";\n    variation != null ? variation : variation = defaultVariation;\n    const visibleControls = __spreadValues({\n        leave: true\n    }, controls);\n    const localPermissions = useLocalParticipantPermissions();\n    if (!localPermissions) {\n        visibleControls.camera = false;\n        visibleControls.chat = false;\n        visibleControls.microphone = false;\n        visibleControls.screenShare = false;\n    } else {\n        (_b2 = visibleControls.camera) != null ? _b2 : visibleControls.camera = localPermissions.canPublish;\n        (_c = visibleControls.microphone) != null ? _c : visibleControls.microphone = localPermissions.canPublish;\n        (_d = visibleControls.screenShare) != null ? _d : visibleControls.screenShare = localPermissions.canPublish;\n        (_e = visibleControls.chat) != null ? _e : visibleControls.chat = localPermissions.canPublishData && (controls == null ? void 0 : controls.chat);\n    }\n    const showIcon = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>variation === "minimal" || variation === "verbose", [\n        variation\n    ]);\n    const showText = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>variation === "textOnly" || variation === "verbose", [\n        variation\n    ]);\n    const browserSupportsScreenSharing = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.supportsScreenSharing)();\n    const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const onScreenShareChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled)=>{\n        setIsScreenShareEnabled(enabled);\n    }, [\n        setIsScreenShareEnabled\n    ]);\n    const htmlProps = mergeProps2({\n        className: "lk-control-bar"\n    }, props);\n    const { saveAudioInputEnabled, saveVideoInputEnabled, saveAudioInputDeviceId, saveVideoInputDeviceId } = usePersistentUserChoices({\n        preventSave: !saveUserChoices2\n    });\n    const microphoneOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled, isUserInitiated)=>isUserInitiated ? saveAudioInputEnabled(enabled) : null, [\n        saveAudioInputEnabled\n    ]);\n    const cameraOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled, isUserInitiated)=>isUserInitiated ? saveVideoInputEnabled(enabled) : null, [\n        saveVideoInputEnabled\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({}, htmlProps), visibleControls.microphone && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        showIcon,\n        onChange: microphoneOnChange\n    }, showText && "Microphone"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group-menu"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        kind: "audioinput",\n        onActiveDeviceChange: (_kind, deviceId)=>saveAudioInputDeviceId(deviceId != null ? deviceId : "")\n    }))), visibleControls.camera && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n        showIcon,\n        onChange: cameraOnChange\n    }, showText && "Camera"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-button-group-menu"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        kind: "videoinput",\n        onActiveDeviceChange: (_kind, deviceId)=>saveVideoInputDeviceId(deviceId != null ? deviceId : "")\n    }))), visibleControls.screenShare && browserSupportsScreenSharing && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n        captureOptions: {\n            audio: true,\n            selfBrowserSurface: "include"\n        },\n        showIcon,\n        onChange: onScreenShareChange\n    }, showText && (isScreenShareEnabled ? "Stop screen share" : "Share screen")), visibleControls.chat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, null, showIcon && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatIcon_default, null), showText && "Chat"), visibleControls.leave && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisconnectButton, null, showIcon && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LeaveIcon_default, null), showText && "Leave"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StartMediaButton, null));\n}\n// src/prefabs/VideoConference.tsx\nfunction VideoConference(_a) {\n    var _b = _a, { chatMessageFormatter, chatMessageDecoder, chatMessageEncoder } = _b, props = __objRest(_b, [\n        "chatMessageFormatter",\n        "chatMessageDecoder",\n        "chatMessageEncoder"\n    ]);\n    var _a2, _b2;\n    const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: false,\n        unreadMessages: 0\n    });\n    const lastAutoFocusedScreenShareTrack = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const tracks = useTracks([\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n            withPlaceholder: true\n        },\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n            withPlaceholder: false\n        }\n    ], {\n        updateOnlyOn: [\n            livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ActiveSpeakersChanged\n        ],\n        onlySubscribed: false\n    });\n    const widgetUpdate = (state)=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("updating widget state", state);\n        setWidgetState(state);\n    };\n    const layoutContext = useCreateLayoutContext();\n    const screenShareTracks = tracks.filter(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference).filter((track)=>track.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare);\n    const focusTrack = (_a2 = usePinnedTracks(layoutContext)) == null ? void 0 : _a2[0];\n    const carouselTracks = tracks.filter((track)=>!(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isEqualTrackRef)(track, focusTrack));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a3, _b3, _c, _d;\n        if (screenShareTracks.some((track)=>track.publication.isSubscribed) && lastAutoFocusedScreenShareTrack.current === null) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("Auto set screen share focus:", {\n                newScreenShareTrack: screenShareTracks[0]\n            });\n            (_b3 = (_a3 = layoutContext.pin).dispatch) == null ? void 0 : _b3.call(_a3, {\n                msg: "set_pin",\n                trackReference: screenShareTracks[0]\n            });\n            lastAutoFocusedScreenShareTrack.current = screenShareTracks[0];\n        } else if (lastAutoFocusedScreenShareTrack.current && !screenShareTracks.some((track)=>{\n            var _a4, _b4;\n            return track.publication.trackSid === ((_b4 = (_a4 = lastAutoFocusedScreenShareTrack.current) == null ? void 0 : _a4.publication) == null ? void 0 : _b4.trackSid);\n        })) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug("Auto clearing screen share focus.");\n            (_d = (_c = layoutContext.pin).dispatch) == null ? void 0 : _d.call(_c, {\n                msg: "clear_pin"\n            });\n            lastAutoFocusedScreenShareTrack.current = null;\n        }\n    }, [\n        screenShareTracks.map((ref)=>`${ref.publication.trackSid}_${ref.publication.isSubscribed}`).join(),\n        (_b2 = focusTrack == null ? void 0 : focusTrack.publication) == null ? void 0 : _b2.trackSid\n    ]);\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        className: "lk-video-conference"\n    }, props), (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isWeb)() && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, {\n        value: layoutContext,\n        onWidgetChange: widgetUpdate\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-video-conference-inner"\n    }, !focusTrack ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-grid-layout-wrapper"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GridLayout, {\n        tracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null))) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-focus-layout-wrapper"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayoutContainer, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CarouselLayout, {\n        tracks: carouselTracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null)), focusTrack && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayout, {\n        trackRef: focusTrack\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, {\n        controls: {\n            chat: true\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, {\n        style: {\n            display: widgetState.showChat ? "grid" : "none"\n        },\n        messageFormatter: chatMessageFormatter,\n        messageEncoder: chatMessageEncoder,\n        messageDecoder: chatMessageDecoder\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomAudioRenderer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionStateToast, null));\n}\n// src/prefabs/AudioConference.tsx\n\n\nfunction AudioConference(_a) {\n    var props = __objRest(_a, []);\n    const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: false,\n        unreadMessages: 0\n    });\n    const audioTracks = useTracks([\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    ]);\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, {\n        onWidgetChange: setWidgetState\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", __spreadValues({\n        className: "lk-audio-conference"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {\n        className: "lk-audio-conference-stage"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: audioTracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantAudioTile, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, {\n        controls: {\n            microphone: true,\n            screenShare: false,\n            camera: false,\n            chat: true\n        }\n    }), widgetState.showChat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, null)));\n}\n// src/index.ts\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3QvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxhQUFhRixPQUFPRyxnQkFBZ0I7QUFDeEMsSUFBSUMsb0JBQW9CSixPQUFPSyx5QkFBeUI7QUFDeEQsSUFBSUMsc0JBQXNCTixPQUFPTyxxQkFBcUI7QUFDdEQsSUFBSUMsZUFBZVIsT0FBT1MsU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLGVBQWVYLE9BQU9TLFNBQVMsQ0FBQ0csb0JBQW9CO0FBQ3hELElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNZixVQUFVZSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGlCQUFpQixDQUFDQyxHQUFHQztJQUN2QixJQUFLLElBQUlDLFFBQVFELEtBQU1BLENBQUFBLElBQUksQ0FBQyxHQUMxQixJQUFJZCxhQUFhZ0IsSUFBSSxDQUFDRixHQUFHQyxPQUN2QlYsZ0JBQWdCUSxHQUFHRSxNQUFNRCxDQUFDLENBQUNDLEtBQUs7SUFDcEMsSUFBSWpCLHFCQUNGLEtBQUssSUFBSWlCLFFBQVFqQixvQkFBb0JnQixHQUFJO1FBQ3ZDLElBQUlYLGFBQWFhLElBQUksQ0FBQ0YsR0FBR0MsT0FDdkJWLGdCQUFnQlEsR0FBR0UsTUFBTUQsQ0FBQyxDQUFDQyxLQUFLO0lBQ3BDO0lBQ0YsT0FBT0Y7QUFDVDtBQUNBLElBQUlJLGdCQUFnQixDQUFDSixHQUFHQyxJQUFNcEIsV0FBV21CLEdBQUdqQixrQkFBa0JrQjtBQUM5RCxJQUFJSSxZQUFZLENBQUNDLFFBQVFDO0lBQ3ZCLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUssSUFBSU4sUUFBUUksT0FDZixJQUFJbkIsYUFBYWdCLElBQUksQ0FBQ0csUUFBUUosU0FBU0ssUUFBUUUsT0FBTyxDQUFDUCxRQUFRLEdBQzdETSxNQUFNLENBQUNOLEtBQUssR0FBR0ksTUFBTSxDQUFDSixLQUFLO0lBQy9CLElBQUlJLFVBQVUsUUFBUXJCLHFCQUNwQixLQUFLLElBQUlpQixRQUFRakIsb0JBQW9CcUIsUUFBUztRQUM1QyxJQUFJQyxRQUFRRSxPQUFPLENBQUNQLFFBQVEsS0FBS1osYUFBYWEsSUFBSSxDQUFDRyxRQUFRSixPQUN6RE0sTUFBTSxDQUFDTixLQUFLLEdBQUdJLE1BQU0sQ0FBQ0osS0FBSztJQUMvQjtJQUNGLE9BQU9NO0FBQ1Q7QUFDQSxJQUFJRSxVQUFVLENBQUNDLFFBQVFDLGFBQWFDO0lBQ2xDLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUMzQixJQUFJQyxZQUFZLENBQUN0QjtZQUNmLElBQUk7Z0JBQ0Z1QixLQUFLTCxVQUFVTSxJQUFJLENBQUN4QjtZQUN0QixFQUFFLE9BQU95QixHQUFHO2dCQUNWSixPQUFPSTtZQUNUO1FBQ0Y7UUFDQSxJQUFJQyxXQUFXLENBQUMxQjtZQUNkLElBQUk7Z0JBQ0Z1QixLQUFLTCxVQUFVUyxLQUFLLENBQUMzQjtZQUN2QixFQUFFLE9BQU95QixHQUFHO2dCQUNWSixPQUFPSTtZQUNUO1FBQ0Y7UUFDQSxJQUFJRixPQUFPLENBQUNLLElBQU1BLEVBQUVDLElBQUksR0FBR1QsUUFBUVEsRUFBRTVCLEtBQUssSUFBSW1CLFFBQVFDLE9BQU8sQ0FBQ1EsRUFBRTVCLEtBQUssRUFBRThCLElBQUksQ0FBQ1IsV0FBV0k7UUFDdkZILEtBQUssQ0FBQ0wsWUFBWUEsVUFBVWEsS0FBSyxDQUFDZixRQUFRQyxZQUFXLEVBQUdPLElBQUk7SUFDOUQ7QUFDRjtBQUVBLDZDQUE2QztBQUNaO0FBRWpDLGdDQUFnQztBQUNBO0FBRWhDLDBDQUEwQztBQUNYO0FBQ1k7QUFDM0MsU0FBU1ksa0JBQWtCdkIsTUFBTSxFQUFFd0IsUUFBUTtJQUN6QyxNQUFNQyxpQkFBaUJDO0lBQ3ZCLE1BQU1DLGlCQUFpQkwsOERBQVNBLENBQUNFO0lBQ2pDSCxrREFBcUIsQ0FBQztRQUNwQixJQUFJUSxpQkFBaUI7UUFDckIsTUFBTUMsV0FBVzlCLE9BQU8rQixPQUFPO1FBQy9CLElBQUksQ0FBQ0QsVUFDSDtRQUNGLFNBQVNFLEdBQUdDLEtBQUssRUFBRUMsUUFBUTtZQUN6QixJQUFJTCxnQkFDRjtZQUNGRixlQUFlSSxPQUFPLENBQUNFLE9BQU9DO1FBQ2hDO1FBQ0FULGtCQUFrQixPQUFPLEtBQUssSUFBSUEsZUFBZVUsU0FBUyxDQUFDTCxVQUFVRTtRQUNyRSxPQUFPO1lBQ0xILGlCQUFpQjtZQUNqQkosa0JBQWtCLE9BQU8sS0FBSyxJQUFJQSxlQUFlVyxXQUFXLENBQUNOLFVBQVVFO1FBQ3pFO0lBQ0YsR0FBRztRQUFDaEMsT0FBTytCLE9BQU87UUFBRU47UUFBZ0JFO0tBQWU7SUFDbkQsT0FBT0Ysa0JBQWtCLE9BQU8sS0FBSyxJQUFJQSxlQUFlUyxRQUFRO0FBQ2xFO0FBQ0EsU0FBU0c7SUFDUCxJQUFJQyxVQUFVO0lBQ2QsSUFBSUMsYUFBYSxFQUFFO0lBQ25CLE1BQU1DLFlBQVksYUFBYSxHQUFHLElBQUlDO0lBQ3RDLElBQUksSUFBNkIsRUFBRTtRQUNqQztJQUNGO0lBQ0EsTUFBTVAsV0FBVyxJQUFJUSxlQUFlLENBQUNDLFNBQVNDO1FBQzVDTCxhQUFhQSxXQUFXTSxNQUFNLENBQUNGO1FBQy9CLElBQUksQ0FBQ0wsU0FBUztZQUNaUSxPQUFPQyxxQkFBcUIsQ0FBQztnQkFDM0IsTUFBTUMsWUFBWSxhQUFhLEdBQUcsSUFBSUM7Z0JBQ3RDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJWCxXQUFXWSxNQUFNLEVBQUVELElBQUs7b0JBQzFDLElBQUlGLFVBQVVJLEdBQUcsQ0FBQ2IsVUFBVSxDQUFDVyxFQUFFLENBQUNsRCxNQUFNLEdBQ3BDO29CQUNGZ0QsVUFBVUssR0FBRyxDQUFDZCxVQUFVLENBQUNXLEVBQUUsQ0FBQ2xELE1BQU07b0JBQ2xDLE1BQU1zRCxNQUFNZCxVQUFVZSxHQUFHLENBQUNoQixVQUFVLENBQUNXLEVBQUUsQ0FBQ2xELE1BQU07b0JBQzlDc0QsT0FBTyxPQUFPLEtBQUssSUFBSUEsSUFBSUUsT0FBTyxDQUFDLENBQUN4QixLQUFPQSxHQUFHTyxVQUFVLENBQUNXLEVBQUUsRUFBRU47Z0JBQy9EO2dCQUNBTCxhQUFhLEVBQUU7Z0JBQ2ZELFVBQVU7WUFDWjtRQUNGO1FBQ0FBLFVBQVU7SUFDWjtJQUNBLE9BQU87UUFDTEo7UUFDQUMsV0FBVW5DLE1BQU0sRUFBRXdCLFFBQVE7WUFDeEIsSUFBSWlDO1lBQ0p2QixTQUFTd0IsT0FBTyxDQUFDMUQ7WUFDakIsTUFBTXNELE1BQU0sQ0FBQ0csS0FBS2pCLFVBQVVlLEdBQUcsQ0FBQ3ZELE9BQU0sS0FBTSxPQUFPeUQsS0FBSyxFQUFFO1lBQzFESCxJQUFJSyxJQUFJLENBQUNuQztZQUNUZ0IsVUFBVW9CLEdBQUcsQ0FBQzVELFFBQVFzRDtRQUN4QjtRQUNBbEIsYUFBWXBDLE1BQU0sRUFBRXdCLFFBQVE7WUFDMUIsSUFBSWlDO1lBQ0osTUFBTUgsTUFBTSxDQUFDRyxLQUFLakIsVUFBVWUsR0FBRyxDQUFDdkQsT0FBTSxLQUFNLE9BQU95RCxLQUFLLEVBQUU7WUFDMUQsSUFBSUgsSUFBSUgsTUFBTSxLQUFLLEdBQUc7Z0JBQ3BCakIsU0FBUzJCLFNBQVMsQ0FBQzdEO2dCQUNuQndDLFVBQVVzQixNQUFNLENBQUM5RDtnQkFDakI7WUFDRjtZQUNBLE1BQU0rRCxVQUFVVCxJQUFJckQsT0FBTyxDQUFDdUI7WUFDNUIsSUFBSXVDLFlBQVksQ0FBQyxHQUNmVCxJQUFJVSxNQUFNLENBQUNELFNBQVM7WUFDdEJ2QixVQUFVb0IsR0FBRyxDQUFDNUQsUUFBUXNEO1FBQ3hCO0lBQ0Y7QUFDRjtBQUNBLElBQUlXO0FBQ0osSUFBSXZDLG9CQUFvQixJQUFNLENBQUN1QyxrQkFBa0JBLGtCQUFrQjVCLHlCQUF5QjRCO0FBQzVGLElBQUlDLFVBQVUsQ0FBQ2xFO0lBQ2IsTUFBTSxDQUFDbUUsTUFBTUMsUUFBUSxHQUFHL0MsMkNBQWMsQ0FBQztRQUFFaUQsT0FBTztRQUFHQyxRQUFRO0lBQUU7SUFDN0RsRCxrREFBcUIsQ0FBQztRQUNwQixJQUFJckIsT0FBTytCLE9BQU8sRUFBRTtZQUNsQixNQUFNLEVBQUV1QyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHdkUsT0FBTytCLE9BQU8sQ0FBQ3lDLHFCQUFxQjtZQUM5REosUUFBUTtnQkFBRUU7Z0JBQU9DO1lBQU87UUFDMUI7SUFDRixHQUFHO1FBQUN2RSxPQUFPK0IsT0FBTztLQUFDO0lBQ25CLE1BQU0wQyxpQkFBaUJwRCw4Q0FBaUIsQ0FDdEMsQ0FBQ1ksUUFBVW1DLFFBQVFuQyxNQUFNMEMsV0FBVyxHQUNwQyxFQUFFO0lBRUpwRCxrQkFBa0J2QixRQUFReUU7SUFDMUIsT0FBT047QUFDVDtBQUVBLDJDQUEyQztBQUNYO0FBQ2hDLFNBQVNVLG1CQUFtQkMsVUFBVSxFQUFFQyxTQUFTO0lBQy9DLE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHTCwyQ0FBZSxDQUFDRztJQUMxQ0gsNENBQWdCLENBQUM7UUFDZixJQUFJLElBQTRDRSxFQUM5QztRQUNGLE1BQU1LLGVBQWVMLFdBQVczQyxTQUFTLENBQUM4QztRQUMxQyxPQUFPLElBQU1FLGFBQWEvQyxXQUFXO0lBQ3ZDLEdBQUc7UUFBQzBDO0tBQVc7SUFDZixPQUFPRTtBQUNUO0FBRUEsc0NBQXNDO0FBQ047QUFDaEMsU0FBU0ssY0FBY0MsS0FBSztJQUMxQixNQUFNQyxhQUFhLENBQUNDO1FBQ2xCLElBQUksS0FBNkIsRUFBRSxFQUVsQztRQUNELE9BQU87SUFDVDtJQUNBLE1BQU0sQ0FBQ0UsU0FBU0MsV0FBVyxHQUFHUCwyQ0FBZSxDQUFDRyxXQUFXRDtJQUN6RCxTQUFTTTtRQUNQRCxXQUFXSixXQUFXRDtJQUN4QjtJQUNBRiw0Q0FBZ0IsQ0FBQztRQUNmLE1BQU1LLGFBQWEzQyxPQUFPMkMsVUFBVSxDQUFDSDtRQUNyQ007UUFDQSxJQUFJSCxXQUFXSSxXQUFXLEVBQUU7WUFDMUJKLFdBQVdJLFdBQVcsQ0FBQ0Q7UUFDekIsT0FBTztZQUNMSCxXQUFXSyxnQkFBZ0IsQ0FBQyxVQUFVRjtRQUN4QztRQUNBLE9BQU87WUFDTCxJQUFJSCxXQUFXTSxjQUFjLEVBQUU7Z0JBQzdCTixXQUFXTSxjQUFjLENBQUNIO1lBQzVCLE9BQU87Z0JBQ0xILFdBQVdPLG1CQUFtQixDQUFDLFVBQVVKO1lBQzNDO1FBQ0Y7SUFDRixHQUFHO1FBQUNOO0tBQU07SUFDVixPQUFPSTtBQUNUO0FBRUEsZ0NBQWdDO0FBQzhDO0FBRTlFLGdDQUFnQztBQUNtRDtBQUNuRDtBQUVoQyw4QkFBOEI7QUFDOUIsU0FBU1csWUFBWXJCLEtBQUssRUFBRXNCLE1BQU07SUFDaEMsSUFBSUEsT0FBT0MsR0FBRyxLQUFLLGFBQWE7UUFDOUIsT0FBTzNHLGNBQWNMLGVBQWUsQ0FBQyxHQUFHeUYsUUFBUTtZQUFFd0IsVUFBVTtZQUFNQyxnQkFBZ0I7UUFBRTtJQUN0RixPQUFPLElBQUlILE9BQU9DLEdBQUcsS0FBSyxhQUFhO1FBQ3JDLE9BQU8zRyxjQUFjTCxlQUFlLENBQUMsR0FBR3lGLFFBQVE7WUFBRXdCLFVBQVU7UUFBTTtJQUNwRSxPQUFPLElBQUlGLE9BQU9DLEdBQUcsS0FBSyxlQUFlO1FBQ3ZDLE1BQU1HLFdBQVc5RyxjQUFjTCxlQUFlLENBQUMsR0FBR3lGLFFBQVE7WUFBRXdCLFVBQVUsQ0FBQ3hCLE1BQU13QixRQUFRO1FBQUM7UUFDdEYsSUFBSUUsU0FBU0YsUUFBUSxLQUFLLE1BQU07WUFDOUJFLFNBQVNELGNBQWMsR0FBRztRQUM1QjtRQUNBLE9BQU9DO0lBQ1QsT0FBTyxJQUFJSixPQUFPQyxHQUFHLEtBQUssY0FBYztRQUN0QyxPQUFPM0csY0FBY0wsZUFBZSxDQUFDLEdBQUd5RixRQUFRO1lBQUV5QixnQkFBZ0JILE9BQU9LLEtBQUs7UUFBQztJQUNqRixPQUFPO1FBQ0wsT0FBT3BILGVBQWUsQ0FBQyxHQUFHeUY7SUFDNUI7QUFDRjtBQUVBLDZCQUE2QjtBQUM3QixTQUFTNEIsV0FBVzVCLEtBQUssRUFBRXNCLE1BQU07SUFDL0IsSUFBSUEsT0FBT0MsR0FBRyxLQUFLLFdBQVc7UUFDNUIsT0FBTztZQUFDRCxPQUFPTyxjQUFjO1NBQUM7SUFDaEMsT0FBTyxJQUFJUCxPQUFPQyxHQUFHLEtBQUssYUFBYTtRQUNyQyxPQUFPLEVBQUU7SUFDWCxPQUFPO1FBQ0wsT0FBT2hILGVBQWUsQ0FBQyxHQUFHeUY7SUFDNUI7QUFDRjtBQUVBLGdDQUFnQztBQUNoQyxJQUFJOEIsOEJBQWdCVixnREFBb0IsQ0FBQyxLQUFLO0FBQzlDLFNBQVNZO0lBQ1AsTUFBTUMsZ0JBQWdCYiw2Q0FBaUIsQ0FBQ1U7SUFDeEMsSUFBSSxDQUFDRyxlQUFlO1FBQ2xCLE1BQU1FLE1BQU07SUFDZDtJQUNBLE9BQU9GO0FBQ1Q7QUFDQSxTQUFTRyx1QkFBdUJILGFBQWE7SUFDM0MsTUFBTUksU0FBU0M7SUFDZkwsaUJBQWlCLE9BQU9BLGdCQUFnQkEsZ0JBQWdCSTtJQUN4RCxJQUFJLENBQUNKLGVBQWU7UUFDbEIsTUFBTUUsTUFBTTtJQUNkO0lBQ0EsT0FBT0Y7QUFDVDtBQUNBLFNBQVNNO0lBQ1AsTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUdyQiw2Q0FBaUIsQ0FBQ1EsWUFBWVYsdUVBQWlCQTtJQUMvRSxNQUFNLENBQUN5QixhQUFhQyxlQUFlLEdBQUd4Qiw2Q0FBaUIsQ0FBQ0MsYUFBYUYsMEVBQW9CQTtJQUN6RixPQUFPO1FBQ0wwQixLQUFLO1lBQUVDLFVBQVVMO1lBQWF6QyxPQUFPd0M7UUFBUztRQUM5Q08sUUFBUTtZQUFFRCxVQUFVRjtZQUFnQjVDLE9BQU8yQztRQUFZO0lBQ3pEO0FBQ0Y7QUFDQSxTQUFTSyw2QkFBNkJmLGFBQWE7SUFDakQsTUFBTSxDQUFDTyxVQUFVQyxZQUFZLEdBQUdyQiw2Q0FBaUIsQ0FBQ1EsWUFBWVYsdUVBQWlCQTtJQUMvRSxNQUFNLENBQUN5QixhQUFhQyxlQUFlLEdBQUd4Qiw2Q0FBaUIsQ0FBQ0MsYUFBYUYsMEVBQW9CQTtJQUN6RixPQUFPYyxpQkFBaUIsT0FBT0EsZ0JBQWdCO1FBQzdDWSxLQUFLO1lBQUVDLFVBQVVMO1lBQWF6QyxPQUFPd0M7UUFBUztRQUM5Q08sUUFBUTtZQUFFRCxVQUFVRjtZQUFnQjVDLE9BQU8yQztRQUFZO0lBQ3pEO0FBQ0Y7QUFDQSxTQUFTTDtJQUNQLE9BQU9sQiw2Q0FBaUIsQ0FBQ1U7QUFDM0I7QUFFQSxxQ0FBcUM7QUFDTDtBQUVoQyx5Q0FBeUM7QUFDVDtBQUNoQyxJQUFJcUIsZ0NBQWtCRCxnREFBb0IsQ0FDeEMsS0FBSztBQUVQLElBQUlFLGVBQWVEO0FBQ25CLFNBQVNFO0lBQ1AsT0FBT0M7QUFDVDtBQUNBLFNBQVNBO0lBQ1AsTUFBTXpCLGlCQUFpQnFCLDZDQUFpQixDQUFDQztJQUN6QyxJQUFJLENBQUN0QixnQkFBZ0I7UUFDbkIsTUFBTU0sTUFBTTtJQUNkO0lBQ0EsT0FBT047QUFDVDtBQUNBLFNBQVMwQjtJQUNQLE9BQU9DO0FBQ1Q7QUFDQSxTQUFTQTtJQUNQLE9BQU9OLDZDQUFpQixDQUFDQztBQUMzQjtBQUNBLFNBQVNNLHdCQUF3QkMsS0FBSztJQUNwQyxPQUFPQyxrQkFBa0JEO0FBQzNCO0FBQ0EsU0FBU0Msa0JBQWtCQyxRQUFRO0lBQ2pDLE1BQU1DLFVBQVVMO0lBQ2hCLE1BQU1NLE1BQU1GLFlBQVksT0FBT0EsV0FBV0M7SUFDMUMsSUFBSSxDQUFDQyxLQUFLO1FBQ1IsTUFBTSxJQUFJM0IsTUFDUjtJQUVKO0lBQ0EsT0FBTzJCO0FBQ1Q7QUFFQSxxQ0FBcUM7QUFDckMsSUFBSUMsbUNBQXFCZCxnREFBb0IsQ0FBQyxLQUFLO0FBQ25ELFNBQVNlO0lBQ1AsTUFBTUMsY0FBY2hCLDZDQUFpQixDQUFDYztJQUN0QyxJQUFJLENBQUNFLGFBQWE7UUFDaEIsTUFBTTlCLE1BQU07SUFDZDtJQUNBLE9BQU84QjtBQUNUO0FBQ0EsU0FBU0M7SUFDUCxPQUFPakIsNkNBQWlCLENBQUNjO0FBQzNCO0FBQ0EsU0FBU0kscUJBQXFCRixXQUFXO0lBQ3ZDLElBQUl4RjtJQUNKLE1BQU1vRixVQUFVSztJQUNoQixNQUFNRSxlQUFlWjtJQUNyQixNQUFNYSxJQUFJLENBQUM1RixLQUFLd0YsZUFBZSxPQUFPQSxjQUFjSixPQUFNLEtBQU0sT0FBT3BGLEtBQUsyRixnQkFBZ0IsT0FBTyxLQUFLLElBQUlBLGFBQWFILFdBQVc7SUFDcEksSUFBSSxDQUFDSSxHQUFHO1FBQ04sTUFBTSxJQUFJbEMsTUFDUjtJQUVKO0lBQ0EsT0FBT2tDO0FBQ1Q7QUFFQSw4QkFBOEI7QUFDRTtBQUNoQyxJQUFJRSw0QkFBY0QsZ0RBQW9CLENBQUMsS0FBSztBQUM1QyxTQUFTRTtJQUNQLE1BQU1DLE1BQU1ILDZDQUFpQixDQUFDQztJQUM5QixJQUFJLENBQUNFLEtBQUs7UUFDUixNQUFNdEMsTUFBTTtJQUNkO0lBQ0EsT0FBT3NDO0FBQ1Q7QUFDQSxTQUFTQztJQUNQLE9BQU9KLDZDQUFpQixDQUFDQztBQUMzQjtBQUNBLFNBQVNJLGNBQWNDLElBQUk7SUFDekIsTUFBTWYsVUFBVWE7SUFDaEIsTUFBTUcsSUFBSUQsUUFBUSxPQUFPQSxPQUFPZjtJQUNoQyxJQUFJLENBQUNnQixHQUFHO1FBQ04sTUFBTSxJQUFJMUMsTUFDUjtJQUVKO0lBQ0EsT0FBTzBDO0FBQ1Q7QUFFQSxpQ0FBaUM7QUFDRDtBQUNoQyxJQUFJRSxpQ0FBbUJELGdEQUFvQixDQUFDLEtBQUs7QUFDakQsU0FBU0Usa0JBQWtCQyxRQUFRO0lBQ2pDLE1BQU1SLE1BQU1LLDZDQUFpQixDQUFDQztJQUM5QixJQUFJRSxhQUFhLE1BQU07UUFDckIsSUFBSVIsS0FBSztZQUNQLE9BQU9BO1FBQ1QsT0FBTztZQUNMLE1BQU10QyxNQUFNO1FBQ2Q7SUFDRjtJQUNBLE9BQU9zQztBQUNUO0FBRUEsZ0NBQWdDO0FBQ2hDLFNBQVNTLGlCQUFpQk4sSUFBSTtJQUM1QixNQUFNTyxjQUFjUixjQUFjQztJQUNsQyxNQUFNUSxhQUFhaEosOENBQWtCLENBQUMsSUFBTWxCLFFBQVEsSUFBSSxFQUFFLE1BQU07WUFDOUQsTUFBTWlLLFlBQVlDLFVBQVU7UUFDOUIsSUFBSTtRQUFDRDtLQUFZO0lBQ2pCLE1BQU1yRixhQUFhMUQsMENBQWMsQ0FDL0IsSUFBTTZFLDRGQUFrQ0EsQ0FBQ2tFLGNBQ3pDO1FBQUNBO0tBQVk7SUFFZixNQUFNLEVBQUVHLFlBQVksRUFBRSxHQUFHekYsbUJBQW1CQyxZQUFZO1FBQ3REd0YsY0FBY0gsWUFBWUksZ0JBQWdCO0lBQzVDO0lBQ0EsT0FBTztRQUFFRDtRQUFjRjtJQUFXO0FBQ3BDO0FBRUEsaUNBQWlDO0FBQzhCO0FBQzlCO0FBRWpDLG9CQUFvQjtBQUNJO0FBQ3hCLFNBQVNPLE1BQU0sR0FBR25JLFNBQVM7SUFDekIsT0FBTyxDQUFDLEdBQUdvSTtRQUNULEtBQUssTUFBTXBKLFlBQVlnQixVQUFXO1lBQ2hDLElBQUksT0FBT2hCLGFBQWEsWUFBWTtnQkFDbENBLFlBQVlvSjtZQUNkO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsU0FBU0MsV0FBVyxHQUFHRCxJQUFJO0lBQ3pCLE1BQU1FLFNBQVN2TCxlQUFlLENBQUMsR0FBR3FMLElBQUksQ0FBQyxFQUFFO0lBQ3pDLElBQUssSUFBSTFILElBQUksR0FBR0EsSUFBSTBILEtBQUt6SCxNQUFNLEVBQUVELElBQUs7UUFDcEMsTUFBTTZILFFBQVFILElBQUksQ0FBQzFILEVBQUU7UUFDckIsSUFBSyxNQUFNaEUsT0FBTzZMLE1BQU87WUFDdkIsTUFBTXZMLElBQUlzTCxNQUFNLENBQUM1TCxJQUFJO1lBQ3JCLE1BQU1PLElBQUlzTCxLQUFLLENBQUM3TCxJQUFJO1lBQ3BCLElBQUksT0FBT00sTUFBTSxjQUFjLE9BQU9DLE1BQU0sY0FBYyxxQ0FBcUM7WUFDL0ZQLEdBQUcsQ0FBQyxFQUFFLEtBQUssT0FBT0EsR0FBRyxDQUFDLEVBQUUsS0FBSyxPQUFPQSxJQUFJOEwsVUFBVSxDQUFDLE1BQU0sT0FBTyxHQUNoRSxNQUFNOUwsSUFBSThMLFVBQVUsQ0FBQyxNQUFNLE9BQU8sR0FDbEMsSUFBSTtnQkFDRkYsTUFBTSxDQUFDNUwsSUFBSSxHQUFHeUwsTUFBTW5MLEdBQUdDO1lBQ3pCLE9BQU8sSUFBSSxDQUFDUCxRQUFRLGVBQWVBLFFBQVEsa0JBQWlCLEtBQU0sT0FBT00sTUFBTSxZQUFZLE9BQU9DLE1BQU0sVUFBVTtnQkFDaEhxTCxNQUFNLENBQUM1TCxJQUFJLEdBQUd3TCxnREFBSUEsQ0FBQ2xMLEdBQUdDO1lBQ3hCLE9BQU87Z0JBQ0xxTCxNQUFNLENBQUM1TCxJQUFJLEdBQUdPLE1BQU0sS0FBSyxJQUFJQSxJQUFJRDtZQUNuQztRQUNGO0lBQ0Y7SUFDQSxPQUFPc0w7QUFDVDtBQUVBLGlDQUFpQztBQUNqQyxTQUFTRyxrQkFBa0JGLEtBQUs7SUFDOUIsTUFBTSxFQUFFL0YsS0FBSyxFQUFFOEMsUUFBUSxFQUFFLEdBQUdkLG1CQUFtQmEsR0FBRztJQUNsRCxNQUFNcUQsY0FBY1QsMENBQWUsQ0FBQztRQUNsQyxNQUFNLEVBQUVVLFNBQVMsRUFBRSxHQUFHWCw2RUFBbUJBO1FBQ3pDLE1BQU1ZLGNBQWNQLFdBQVdFLE9BQU87WUFDcENJO1lBQ0FFLFVBQVUsQ0FBRXJHLENBQUFBLFNBQVMsT0FBTyxLQUFLLElBQUlBLE1BQU03QixNQUFNO1lBQ2pEbUksU0FBUztnQkFDUCxJQUFJeEQsVUFDRkEsU0FBUztvQkFBRXZCLEtBQUs7Z0JBQVk7WUFDaEM7UUFDRjtRQUNBLE9BQU82RTtJQUNULEdBQUc7UUFBQ0w7UUFBT2pEO1FBQVU5QztLQUFNO0lBQzNCLE9BQU87UUFBRWtHO0lBQVk7QUFDdkI7QUFFQSw2Q0FBNkM7QUFDOEI7QUFDeEI7QUFDbEI7QUFDakMsU0FBU1EsOEJBQThCQyxVQUFVLENBQUMsQ0FBQztJQUNqRCxNQUFNdEMsSUFBSUYscUJBQXFCd0MsUUFBUTFDLFdBQVc7SUFDbEQsTUFBTSxFQUFFa0MsU0FBUyxFQUFFUyx5QkFBeUIsRUFBRSxHQUFHSCwwQ0FBZSxDQUM5RCxJQUFNRix5RkFBK0JBLENBQUNsQyxJQUN0QztRQUFDQTtLQUFFO0lBRUwsTUFBTXdDLFVBQVVoSCxtQkFBbUIrRywyQkFBMkJKLDZEQUFpQkEsQ0FBQ00sT0FBTztJQUN2RixPQUFPO1FBQUVYO1FBQVdVO0lBQVE7QUFDOUI7QUFFQSxtQ0FBbUM7QUFDZ0M7QUFDbEM7QUFDakMsU0FBU0ksbUJBQW1CckMsSUFBSTtJQUM5QixNQUFNQyxJQUFJRixjQUFjQztJQUN4QixNQUFNOUUsYUFBYWtILDBDQUFlLENBQUMsSUFBTUQsaUZBQXVCQSxDQUFDbEMsSUFBSTtRQUFDQTtLQUFFO0lBQ3hFLE1BQU1xQyxrQkFBa0JySCxtQkFBbUJDLFlBQVkrRSxFQUFFN0UsS0FBSztJQUM5RCxPQUFPa0g7QUFDVDtBQUVBLDhCQUE4QjtBQUNxQztBQUNsQztBQUNqQyxTQUFTRyxlQUFlQyxlQUFlLEVBQUU5SyxRQUFRO0lBQy9DLE1BQU0rSyxZQUFZLE9BQU9ELG9CQUFvQixhQUFhQSxrQkFBa0I5SztJQUM1RSxNQUFNZ0wsUUFBUSxPQUFPRixvQkFBb0IsV0FBV0Esa0JBQWtCLEtBQUs7SUFDM0UsTUFBTTFDLE9BQU9KO0lBQ2IsTUFBTSxFQUFFaUQsSUFBSSxFQUFFQyxpQkFBaUIsRUFBRUMsbUJBQW1CLEVBQUUsR0FBR1AsMENBQWUsQ0FDdEUsSUFBTUQsaUZBQXVCQSxDQUFDdkMsTUFBTTRDLE9BQU9ELFlBQzNDO1FBQUMzQztRQUFNNEM7UUFBT0Q7S0FBVTtJQUUxQixNQUFNSyxVQUFVL0gsbUJBQW1CNkgsbUJBQW1CLEtBQUs7SUFDM0QsTUFBTUcsWUFBWWhJLG1CQUFtQjhILHFCQUFxQjtJQUMxRCxPQUFPO1FBQ0xDO1FBQ0FIO1FBQ0FJO0lBQ0Y7QUFDRjtBQUVBLG1DQUFtQztBQUM4QjtBQUNoQjtBQUNoQjtBQUNqQyxTQUFTSSxvQkFBb0JsQyxLQUFLO0lBQ2hDLE1BQU1uQixPQUFPSjtJQUNiLE1BQU0wQyxrQkFBa0JELG1CQUFtQnJDO0lBQzNDLE1BQU1zQixjQUFjOEIsMENBQWUsQ0FBQztRQUNsQyxNQUFNLEVBQUU3QixTQUFTLEVBQUUrQixVQUFVLEVBQUUsR0FBR0osK0VBQXFCQSxDQUFDbEQ7UUFDeEQsTUFBTXdCLGNBQWNQLFdBQVdFLE9BQU87WUFDcENJO1lBQ0FHLFNBQVM7Z0JBQ1AsSUFBSTdIO2dCQUNKLE9BQU95SixXQUFXLENBQUN6SixLQUFLc0gsTUFBTW9DLFVBQVUsS0FBSyxPQUFPMUosS0FBSztZQUMzRDtZQUNBNEgsVUFBVWEsb0JBQW9CYSwyREFBZUEsQ0FBQ0ssWUFBWTtRQUM1RDtRQUNBLE9BQU9oQztJQUNULEdBQUc7UUFBQ3hCO1FBQU1tQjtRQUFPbUI7S0FBZ0I7SUFDakMsT0FBTztRQUFFaEI7SUFBWTtBQUN2QjtBQUVBLDZCQUE2QjtBQUNvRDtBQUNqRixTQUFTcUMsY0FBYzFHLGNBQWM7SUFDbkMsSUFBSUEsZUFBZTJHLFdBQVcsWUFBWUgsaUVBQXFCQSxFQUFFO1FBQy9ELE1BQU1JLGFBQWE1RyxlQUFlMkcsV0FBVyxDQUFDOUUsS0FBSztRQUNuRCxJQUFJK0UsWUFBWTtZQUNkLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdKLHdFQUF3QkEsQ0FBQ0c7WUFDaEQsT0FBT0M7UUFDVDtJQUNGO0lBQ0EsT0FBTztBQUNUO0FBRUEsOEJBQThCO0FBQ3NEO0FBQ25EO0FBQ2pDLFNBQVNJLGVBQWUsRUFBRWxGLFFBQVEsRUFBRW1GLFdBQVcsRUFBRTlFLFdBQVcsRUFBRThCLEtBQUssRUFBRTtJQUNuRSxNQUFNMUIsSUFBSUYscUJBQXFCRjtJQUMvQixJQUFJLENBQUNMLFlBQVksQ0FBQ21GLGFBQWE7UUFDN0IsTUFBTSxJQUFJNUcsTUFBTTtJQUNsQjtJQUNBLE1BQU1GLGdCQUFnQks7SUFDdEIsTUFBTSxFQUFFNkQsU0FBUyxFQUFFLEdBQUcwQywwQ0FBZSxDQUFDLElBQU1GLDBFQUFnQkEsSUFBSSxFQUFFO0lBQ2xFLE1BQU1LLFVBQVVILDBDQUFlLENBQUM7UUFDOUIsSUFBSWpGLFVBQVU7WUFDWixPQUFPZ0YsZ0ZBQXNCQSxDQUFDaEYsVUFBVTNCLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY1ksR0FBRyxDQUFDN0MsS0FBSztRQUNsRyxPQUFPLElBQUkrSSxhQUFhO1lBQ3RCLE1BQU1yRixRQUFRVyxFQUFFNEUsUUFBUSxDQUFDRjtZQUN6QixJQUFJLENBQUM5RyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNZLEdBQUcsQ0FBQzdDLEtBQUssS0FBSzBELE9BQU87Z0JBQ3ZFLE9BQU9rRixnRkFBc0JBLENBQzNCO29CQUFFM0UsYUFBYUk7b0JBQUd2SixRQUFRaU87b0JBQWFQLGFBQWE5RTtnQkFBTSxHQUMxRHpCLGNBQWNZLEdBQUcsQ0FBQzdDLEtBQUs7WUFFM0IsT0FBTztnQkFDTCxPQUFPO1lBQ1Q7UUFDRixPQUFPO1lBQ0wsTUFBTSxJQUFJbUMsTUFBTTtRQUNsQjtJQUNGLEdBQUc7UUFBQ3lCO1FBQVUzQixpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNZLEdBQUcsQ0FBQzdDLEtBQUs7UUFBRXFFO1FBQUcwRTtLQUFZO0lBQ3ZGLE1BQU0zQyxjQUFjeUMsMENBQWUsQ0FDakMsSUFBTWhELFdBQVdFLE9BQU87WUFDdEJJO1lBQ0FHLFNBQVMsQ0FBQzRDO2dCQUNSLElBQUl6SyxJQUFJMEssSUFBSUMsSUFBSUMsSUFBSUM7Z0JBQ25CN0ssQ0FBQUEsS0FBS3NILE1BQU1PLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSTdILEdBQUc5RCxJQUFJLENBQUNvTCxPQUFPbUQ7Z0JBQ3ZELElBQUl0RixVQUFVO29CQUNaLElBQUlvRixTQUFTO3dCQUNWSSxDQUFBQSxLQUFLbkgsaUJBQWlCLE9BQU8sS0FBSyxJQUFJLENBQUNrSCxLQUFLbEgsY0FBY1ksR0FBRyxFQUFFQyxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlzRyxHQUFHek8sSUFBSSxDQUFDd08sSUFBSTs0QkFDdkc1SCxLQUFLO3dCQUNQO29CQUNGLE9BQU87d0JBQ0orSCxDQUFBQSxLQUFLckgsaUJBQWlCLE9BQU8sS0FBSyxJQUFJLENBQUNvSCxLQUFLcEgsY0FBY1ksR0FBRyxFQUFFQyxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUl3RyxHQUFHM08sSUFBSSxDQUFDME8sSUFBSTs0QkFDdkc5SCxLQUFLOzRCQUNMTSxnQkFBZ0IrQjt3QkFDbEI7b0JBQ0Y7Z0JBQ0YsT0FBTyxJQUFJbUYsYUFBYTtvQkFDdEIsTUFBTXJGLFFBQVFXLEVBQUU0RSxRQUFRLENBQUNGO29CQUN6QixJQUFJLENBQUM5RyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNZLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLWSxPQUFPO3dCQUMxRSxJQUFJc0YsU0FBUzs0QkFDWC9HLGNBQWNZLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDO2dDQUN6QnZCLEtBQUs7NEJBQ1A7d0JBQ0YsT0FBTzs0QkFDTFUsY0FBY1ksR0FBRyxDQUFDQyxRQUFRLENBQUM7Z0NBQ3pCdkIsS0FBSztnQ0FDTE0sZ0JBQWdCO29DQUNkb0MsYUFBYUk7b0NBQ2JtRSxhQUFhOUU7b0NBQ2I1SSxRQUFRNEksTUFBTTVJLE1BQU07Z0NBQ3RCOzRCQUNGO3dCQUNGO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRixJQUNBO1FBQUNpTDtRQUFPSTtRQUFXdkM7UUFBVW1GO1FBQWFDO1FBQVMvRyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNZLEdBQUc7UUFBRXdCO0tBQUU7SUFFM0csT0FBTztRQUFFK0I7UUFBYTRDO0lBQVE7QUFDaEM7QUFFQSw2QkFBNkI7QUFDNkM7QUFDekM7QUFDakMsU0FBU1UsY0FBY0MsV0FBVyxFQUFFQyxVQUFVO0lBQzVDLE1BQU0sRUFBRXRLLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUdMLFFBQVF5SztJQUNsQyxNQUFNdEgsU0FBUy9DLFFBQVEsS0FBS0MsU0FBUyxJQUFJaUssMEVBQWdCQSxDQUFDRCxrRUFBWUEsRUFBRUssWUFBWXRLLE9BQU9DLFVBQVVnSyxrRUFBWSxDQUFDLEVBQUU7SUFDcEhFLDRDQUFpQixDQUFDO1FBQ2hCLElBQUlFLFlBQVk1TSxPQUFPLElBQUlzRixRQUFRO1lBQ2pDc0gsWUFBWTVNLE9BQU8sQ0FBQzhNLEtBQUssQ0FBQ0MsV0FBVyxDQUFDLGtCQUFrQnpILFVBQVUsT0FBTyxLQUFLLElBQUlBLE9BQU8wSCxPQUFPLENBQUNDLFFBQVE7WUFDekdMLFlBQVk1TSxPQUFPLENBQUM4TSxLQUFLLENBQUNDLFdBQVcsQ0FBQyxrQkFBa0J6SCxVQUFVLE9BQU8sS0FBSyxJQUFJQSxPQUFPNEgsSUFBSSxDQUFDRCxRQUFRO1FBQ3hHO0lBQ0YsR0FBRztRQUFDTDtRQUFhdEg7S0FBTztJQUN4QixPQUFPO1FBQ0xBO0lBQ0Y7QUFDRjtBQUVBLDBCQUEwQjtBQUlRO0FBQ0Q7QUFDakMsU0FBU2dJLFdBQVdDLGdCQUFnQixFQUFFM0QsVUFBVSxDQUFDLENBQUM7SUFDaEQsSUFBSWxJLElBQUkwSztJQUNSLE1BQU1vQixvQkFBb0IsT0FBT0QscUJBQXFCLFdBQVczRCxRQUFRMUMsV0FBVyxHQUFHcUcsaUJBQWlCckcsV0FBVztJQUNuSCxNQUFNSSxJQUFJRixxQkFBcUJvRztJQUMvQixNQUFNekcsTUFBTSxPQUFPd0cscUJBQXFCLFdBQVc7UUFBRXJHLGFBQWFJO1FBQUd2SixRQUFRd1A7SUFBaUIsSUFBSUE7SUFDbEcsTUFBTSxDQUFDRSxTQUFTQyxXQUFXLEdBQUdMLDJDQUFnQixDQUM1QyxDQUFDLENBQUUsRUFBQyxDQUFDM0wsS0FBS3FGLElBQUkwRSxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUkvSixHQUFHK0wsT0FBTyxLQUFNLEVBQUNyQixLQUFLOUUsRUFBRTRFLFFBQVEsQ0FBQ25GLElBQUloSixNQUFNLE1BQU0sT0FBTyxLQUFLLElBQUlxTyxHQUFHcUIsT0FBTztJQUUzSEosNENBQWlCLENBQUM7UUFDaEIsTUFBTU0sV0FBV1AsdUVBQWFBLENBQUNyRyxLQUFLM0csU0FBUyxDQUFDc047UUFDOUMsT0FBTyxJQUFNQyxTQUFTdE4sV0FBVztJQUNuQyxHQUFHO1FBQUM4TSw2RUFBbUJBLENBQUNwRztLQUFLO0lBQzdCLE9BQU8wRztBQUNUO0FBRUEsNkJBQTZCO0FBQ3VDO0FBQ25DO0FBQ2pDLFNBQVNLLGNBQWM1RyxXQUFXO0lBQ2hDLE1BQU1JLElBQUlGLHFCQUFxQkY7SUFDL0IsTUFBTW5FLGFBQWE4SywwQ0FBZSxDQUFDLElBQU1ELGtGQUF3QkEsQ0FBQ3RHLElBQUk7UUFBQ0E7S0FBRTtJQUN6RSxNQUFNeUcsYUFBYWpMLG1CQUFtQkMsWUFBWXVFLEVBQUV5RyxVQUFVO0lBQzlELE9BQU9BO0FBQ1Q7QUFFQSw4QkFBOEI7QUFDbUM7QUFDeUM7QUFDekU7QUFDakMsSUFBSVEsbUJBQW1CO0lBQ3JCQyxTQUFTO0lBQ1RDLE9BQU87SUFDUEMsT0FBTztBQUNUO0FBQ0EsU0FBU0MsZUFBZTNGLEtBQUs7SUFDM0IsTUFBTXRILEtBQUtsRSxlQUFlQSxlQUFlLENBQUMsR0FBRytRLG1CQUFtQnZGLFFBQVEsRUFDdEU0RixLQUFLLEVBQ0xDLFNBQVMsRUFDVGpGLE9BQU8sRUFDUC9CLE1BQU1pSCxVQUFVLEVBQ2hCQyxjQUFjLEVBQ2RQLE9BQU8sRUFDUEMsS0FBSyxFQUNMQyxLQUFLLEVBQ0xNLE1BQU0sRUFDTkMsV0FBVyxFQUNYQyxjQUFjLEVBQ2RDLE9BQU8sRUFDUEMsb0JBQW9CLEVBQ3BCQyxpQkFBaUIsRUFDakJDLG9CQUFvQixFQUNyQixHQUFHNU4sSUFBSTZOLE9BQU96UixVQUFVNEQsSUFBSTtRQUMzQjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELElBQUlrSSxXQUFXa0YsWUFBWTtRQUN6QmQseURBQUdBLENBQUN3QixJQUFJLENBQ047SUFFSjtJQUNBLE1BQU0sQ0FBQzNILE1BQU00SCxRQUFRLEdBQUduQiwyQ0FBZ0I7SUFDeENBLDRDQUFpQixDQUFDO1FBQ2hCbUIsUUFBUVgsY0FBYyxPQUFPQSxhQUFhLElBQUlaLGdEQUFJQSxDQUFDdEU7SUFDckQsR0FBRztRQUFDa0Y7S0FBVztJQUNmLE1BQU1ZLFlBQVlwQiwwQ0FBZSxDQUFDO1FBQ2hDLE1BQU0sRUFBRWxGLFNBQVMsRUFBRSxHQUFHNkUsMEVBQWdCQTtRQUN0QyxPQUFPbkYsV0FBV3lHLE1BQU07WUFBRW5HO1FBQVU7SUFDdEMsR0FBRztRQUFDbUc7S0FBSztJQUNUakIsNENBQWlCLENBQUM7UUFDaEIsSUFBSSxDQUFDekcsTUFDSDtRQUNGLE1BQU04SCxvQkFBb0I7WUFDeEIsTUFBTUMsU0FBUy9ILEtBQUtnSSxnQkFBZ0I7WUFDcEM3Qix5REFBR0EsQ0FBQzhCLEtBQUssQ0FBQztZQUNWdlIsUUFBUXdSLEdBQUcsQ0FBQztnQkFDVkgsT0FBT0ksb0JBQW9CLENBQUMsQ0FBQyxDQUFDdkIsT0FBTyxPQUFPQSxVQUFVLFlBQVlBLFFBQVEsS0FBSztnQkFDL0VtQixPQUFPSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUN2QixPQUFPLE9BQU9BLFVBQVUsWUFBWUEsUUFBUSxLQUFLO2dCQUMzRWtCLE9BQU9NLHFCQUFxQixDQUFDLENBQUMsQ0FBQ2xCLFFBQVEsT0FBT0EsV0FBVyxZQUFZQSxTQUFTLEtBQUs7YUFDcEYsRUFBRW1CLEtBQUssQ0FBQyxDQUFDdFI7Z0JBQ1JtUCx5REFBR0EsQ0FBQ3dCLElBQUksQ0FBQzNRO2dCQUNUc1EsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUXRRO1lBQ3JDO1FBQ0Y7UUFDQSxNQUFNdVIseUJBQXlCLENBQUN2UjtZQUM5QixNQUFNd1IscUJBQXFCbEMsOERBQWtCQSxDQUFDbUMsVUFBVSxDQUFDelI7WUFDekR1USx3QkFBd0IsT0FBTyxLQUFLLElBQUlBLHFCQUFxQmlCO1FBQy9EO1FBQ0EsTUFBTUUsd0JBQXdCLENBQUMxUjtZQUM3QndRLHFCQUFxQixPQUFPLEtBQUssSUFBSUEsa0JBQWtCeFE7UUFDekQ7UUFDQWdKLEtBQUsySSxFQUFFLENBQUNwQyxxREFBU0EsQ0FBQ3FDLGVBQWUsRUFBRWQsbUJBQW1CYSxFQUFFLENBQUNwQyxxREFBU0EsQ0FBQ3NDLGlCQUFpQixFQUFFTix3QkFBd0JJLEVBQUUsQ0FBQ3BDLHFEQUFTQSxDQUFDdUMsZUFBZSxFQUFFSjtRQUM1SSxPQUFPO1lBQ0wxSSxLQUFLK0ksR0FBRyxDQUFDeEMscURBQVNBLENBQUNxQyxlQUFlLEVBQUVkLG1CQUFtQmlCLEdBQUcsQ0FBQ3hDLHFEQUFTQSxDQUFDc0MsaUJBQWlCLEVBQUVOLHdCQUF3QlEsR0FBRyxDQUFDeEMscURBQVNBLENBQUN1QyxlQUFlLEVBQUVKO1FBQ2pKO0lBQ0YsR0FBRztRQUFDMUk7UUFBTTRHO1FBQU9DO1FBQU9NO1FBQVFHO1FBQVNFO1FBQW1CRDtLQUFxQjtJQUNqRmQsNENBQWlCLENBQUM7UUFDaEIsSUFBSSxDQUFDekcsTUFDSDtRQUNGLElBQUl5SCxzQkFBc0I7WUFDeEJ6SCxLQUFLeUgsb0JBQW9CLENBQUM7Z0JBQ3hCdUIsY0FBYztvQkFDWmpNLE9BQU8wSztnQkFDVDtnQkFDQXdCLFNBQVM7b0JBQ1ByQyxPQUFPO29CQUNQc0MsZUFBZTtnQkFDakI7WUFDRjtZQUNBO1FBQ0Y7UUFDQSxJQUFJLENBQUNuQyxPQUFPO1lBQ1ZaLHlEQUFHQSxDQUFDOEIsS0FBSyxDQUFDO1lBQ1Y7UUFDRjtRQUNBLElBQUksQ0FBQ2pCLFdBQVc7WUFDZGIseURBQUdBLENBQUN3QixJQUFJLENBQUM7WUFDVEwsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUS9KLE1BQU07WUFDekM7UUFDRjtRQUNBLElBQUlvSixTQUFTO1lBQ1hSLHlEQUFHQSxDQUFDOEIsS0FBSyxDQUFDO1lBQ1ZqSSxLQUFLMkcsT0FBTyxDQUFDSyxXQUFXRCxPQUFPRyxnQkFBZ0JvQixLQUFLLENBQUMsQ0FBQ3RSO2dCQUNwRG1QLHlEQUFHQSxDQUFDd0IsSUFBSSxDQUFDM1E7Z0JBQ1RzUSxXQUFXLE9BQU8sS0FBSyxJQUFJQSxRQUFRdFE7WUFDckM7UUFDRixPQUFPO1lBQ0xtUCx5REFBR0EsQ0FBQzhCLEtBQUssQ0FBQztZQUNWakksS0FBS3NELFVBQVU7UUFDakI7SUFDRixHQUFHO1FBQ0RxRDtRQUNBSTtRQUNBb0MsS0FBS0MsU0FBUyxDQUFDbEM7UUFDZmxIO1FBQ0FzSDtRQUNBTjtRQUNBUztLQUNEO0lBQ0RoQiw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJLENBQUN6RyxNQUNIO1FBQ0YsTUFBTXFKLGdDQUFnQyxDQUFDak87WUFDckMsT0FBUUE7Z0JBQ04sS0FBS29MLDJEQUFnQkEsQ0FBQ2hELFlBQVk7b0JBQ2hDLElBQUk2RCxnQkFDRkE7b0JBQ0Y7Z0JBQ0YsS0FBS2IsMkRBQWdCQSxDQUFDOEMsU0FBUztvQkFDN0IsSUFBSWxDLGFBQ0ZBO29CQUNGO2dCQUNGO29CQUNFO1lBQ0o7UUFDRjtRQUNBcEgsS0FBSzJJLEVBQUUsQ0FBQ3BDLHFEQUFTQSxDQUFDZ0Qsc0JBQXNCLEVBQUVGO1FBQzFDLE9BQU87WUFDTHJKLEtBQUsrSSxHQUFHLENBQUN4QyxxREFBU0EsQ0FBQ2dELHNCQUFzQixFQUFFRjtRQUM3QztJQUNGLEdBQUc7UUFBQ3RDO1FBQU9LO1FBQWFDO1FBQWdCckg7S0FBSztJQUM3Q3lHLDRDQUFpQixDQUFDO1FBQ2hCLElBQUksQ0FBQ3pHLE1BQ0g7UUFDRixPQUFPO1lBQ0xtRyx5REFBR0EsQ0FBQ3FELElBQUksQ0FBQztZQUNUeEosS0FBS3NELFVBQVU7UUFDakI7SUFDRixHQUFHO1FBQUN0RDtLQUFLO0lBQ1QsT0FBTztRQUFFQTtRQUFNNkg7SUFBVTtBQUMzQjtBQUVBLG1DQUFtQztBQUNnQztBQUNsQztBQUNqQyxTQUFTOEIsb0JBQW9CNUgsVUFBVSxDQUFDLENBQUM7SUFDdkMsTUFBTS9CLE9BQU9ELGNBQWNnQyxRQUFRL0IsSUFBSTtJQUN2QyxNQUFNLENBQUNnSSxrQkFBa0I0QixvQkFBb0IsR0FBR0YsMkNBQWdCLENBQUMxSixLQUFLZ0ksZ0JBQWdCO0lBQ3RGLE1BQU0sQ0FBQzZCLHFCQUFxQkMsdUJBQXVCLEdBQUdKLDJDQUFnQixDQUNwRTFCLGlCQUFpQjZCLG1CQUFtQjtJQUV0QyxNQUFNLENBQUNFLGlCQUFpQkMsbUJBQW1CLEdBQUdOLDJDQUFnQixDQUM1RDFCLGlCQUFpQjZCLG1CQUFtQjtJQUV0QyxNQUFNLENBQUNJLHFCQUFxQkMsdUJBQXVCLEdBQUdSLDJDQUFnQixDQUNwRTFCLGlCQUFpQmlDLG1CQUFtQjtJQUV0QyxNQUFNLENBQUNFLGlCQUFpQkMsbUJBQW1CLEdBQUdWLDJDQUFnQixDQUFDMUIsaUJBQWlCbUMsZUFBZTtJQUMvRixNQUFNLENBQUNFLHNCQUFzQkMsd0JBQXdCLEdBQUdaLDJDQUFnQixDQUN0RTFCLGlCQUFpQjZCLG1CQUFtQjtJQUV0QyxNQUFNLENBQUNVLGlCQUFpQkMsbUJBQW1CLEdBQUdkLDJDQUFnQixDQUM1RCxLQUFLO0lBRVAsTUFBTSxDQUFDZSxhQUFhQyxlQUFlLEdBQUdoQiwyQ0FBZ0IsQ0FBQyxLQUFLO0lBQzVELE1BQU1pQixlQUFlLENBQUNDO1FBQ3BCWixtQkFBbUJZLE1BQU1iLGVBQWU7UUFDeENELHVCQUF1QmMsTUFBTWYsbUJBQW1CO1FBQ2hEUyx3QkFBd0JNLE1BQU1QLG9CQUFvQjtRQUNsREssZUFBZUUsTUFBTUgsV0FBVztRQUNoQ0QsbUJBQW1CSSxNQUFNTCxlQUFlO1FBQ3hDTCx1QkFBdUJVLE1BQU12TCxXQUFXLENBQUM0SyxtQkFBbUI7UUFDNURHLG1CQUFtQlEsTUFBTXZMLFdBQVcsQ0FBQzhLLGVBQWU7UUFDcERQLG9CQUFvQmdCLE1BQU12TCxXQUFXO0lBQ3ZDO0lBQ0FxSyw0Q0FBaUIsQ0FBQztRQUNoQixNQUFNNUQsV0FBVzJELGlGQUF1QkEsQ0FBQ3pKLEtBQUtnSSxnQkFBZ0IsRUFBRXpQLFNBQVMsQ0FBQ29TO1FBQzFFLE9BQU8sSUFBTTdFLFNBQVN0TixXQUFXO0lBQ25DLEdBQUc7UUFBQ3dIO0tBQUs7SUFDVCxPQUFPO1FBQ0w2SjtRQUNBUTtRQUNBTjtRQUNBUTtRQUNBRTtRQUNBUjtRQUNBRTtRQUNBbkM7SUFDRjtBQUNGO0FBRUEsOENBQThDO0FBQzJCO0FBQ3hDO0FBQ2pDLFNBQVMrQztJQUNQLE1BQU0vSyxPQUFPSjtJQUNiLE1BQU1vTCxxQkFBcUJGLDBDQUFlLENBQ3hDLElBQU1ELHVGQUE2QkEsQ0FBQzdLLEtBQUtnSSxnQkFBZ0IsR0FDekQ7UUFBQ2hJO0tBQUs7SUFFUixNQUFNaUwsY0FBY2hRLG1CQUFtQitQLG9CQUFvQmhMLEtBQUtnSSxnQkFBZ0IsQ0FBQ2lELFdBQVc7SUFDNUYsT0FBT0E7QUFDVDtBQUVBLG9DQUFvQztBQUNtRTtBQUN0RTtBQUNqQyxTQUFTSyxxQkFBcUIsRUFDNUJDLElBQUksRUFDSnZMLElBQUksRUFDSmxCLEtBQUssRUFDTDBNLGtCQUFrQixFQUNsQmxFLE9BQU8sRUFDUjtJQUNDLE1BQU1tRSxjQUFjM0w7SUFDcEIsTUFBTTRMLGlCQUFpQkwsMENBQWUsQ0FDcEMsSUFBTUgsbUZBQXlCQSxDQUFDSyxNQUFNakUsU0FBU2tFLHFCQUMvQztRQUFDRDtRQUFNQztRQUFvQmxFO0tBQVE7SUFFckMsTUFBTXFFLFVBQVUxUSxtQkFBbUJ5USxnQkFBZ0IsRUFBRTtJQUNyRCxNQUFNLENBQUNFLGlCQUFpQkMsbUJBQW1CLEdBQUdSLDJDQUFnQixDQUFDO0lBQy9ELE1BQU0sRUFBRTlKLFNBQVMsRUFBRXVLLHNCQUFzQixFQUFFQyxvQkFBb0IsRUFBRSxHQUFHViwwQ0FBZSxDQUNqRixJQUFNRiw2RUFBbUJBLENBQUNJLE1BQU12TCxRQUFRLE9BQU9BLE9BQU95TCxhQUFhM00sUUFDbkU7UUFBQ3lNO1FBQU12TDtRQUFNeUw7UUFBYTNNO0tBQU07SUFFbEN1TSw0Q0FBaUIsQ0FBQztRQUNoQixNQUFNdkYsV0FBV2dHLHVCQUF1QnZULFNBQVMsQ0FBQyxDQUFDeVQ7WUFDakRaLHlEQUFJQSxDQUFDNUIsSUFBSSxDQUFDLHNCQUFzQndDO1lBQ2hDLElBQUlBLFVBQ0ZILG1CQUFtQkc7UUFDdkI7UUFDQSxPQUFPO1lBQ0xsRyxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTdE4sV0FBVztRQUNsRDtJQUNGLEdBQUc7UUFBQ3NUO0tBQXVCO0lBQzNCLE9BQU87UUFBRUg7UUFBU3BLO1FBQVcwSyxnQkFBZ0JMO1FBQWlCRztJQUFxQjtBQUNyRjtBQUVBLCtCQUErQjtBQUNFO0FBQ2tFO0FBQ25HLFNBQVNLLGdCQUFnQixFQUFFYixJQUFJLEVBQUU7SUFDL0IsTUFBTUcsaUJBQWlCUSwwQ0FBZSxDQUFDLElBQU1DLG1GQUEwQkEsQ0FBQ1osT0FBTztRQUFDQTtLQUFLO0lBQ3JGLE1BQU1JLFVBQVUxUSxtQkFBbUJ5USxnQkFBZ0IsRUFBRTtJQUNyRCxPQUFPQztBQUNUO0FBRUEsMkNBQTJDO0FBQ2lCO0FBQzJDO0FBQ3RFO0FBRWpDLGVBQWU7QUFDa0I7QUFDc0I7QUFDdkQsU0FBU2tCLE9BQU8vVyxJQUFJO0lBQ2xCLE9BQU9BLFNBQVMsS0FBSztBQUN2QjtBQUNBLFNBQVNnWCxZQUFZLEdBQUczTCxLQUFLO0lBQzNCLE9BQU9GLGNBQWNFLE1BQU00TCxNQUFNLENBQUNGO0FBQ3BDO0FBQ0EsU0FBU0csaUJBQWlCQyxRQUFRLEVBQUU5TCxLQUFLLEVBQUU3TCxHQUFHO0lBQzVDLE9BQU9xWCwyQ0FBZ0IsQ0FBQ1EsR0FBRyxDQUFDRixVQUFVLENBQUNHO1FBQ3JDLGtCQUFJVCxpREFBc0IsQ0FBQ1MsVUFBVVQsMkNBQWdCLENBQUNXLElBQUksQ0FBQ0wsV0FBVztZQUNwRSxxQkFBT04sK0NBQW9CLENBQUNTLE9BQU9wWCxjQUFjTCxlQUFlLENBQUMsR0FBR3dMLFFBQVE7Z0JBQUU3TDtZQUFJO1FBQ3BGO1FBQ0EsT0FBTzhYO0lBQ1Q7QUFDRjtBQUNBLFNBQVNJLHVCQUF1QkMsRUFBRTtJQUNoQyxJQUFJNVQsSUFBSTBLO0lBQ1IsSUFFRSx3REFEd0Q7SUFDdkQsRUFBQyxDQUFDMUssS0FBSzZULFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFDLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSTlULEdBQUcrVCxRQUFRLE1BQU0sU0FBUyxDQUFDLENBQUNySixLQUFLbUosV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUUMsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJcEosR0FBR3FKLFFBQVEsTUFBTSxhQUFZLEtBQU0sZ0JBQWtCLGFBQ3BOLEVBT0Q7QUFDSDtBQUVBLDJDQUEyQztBQUMzQyxTQUFTSyw0QkFBNEJDLGVBQWUsRUFBRW5NLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLElBQUlsSTtJQUNKLE1BQU0sQ0FBQytKLGFBQWF1SyxlQUFlLEdBQUd6QiwyQ0FBZ0IsQ0FBQ0QsOEVBQW9CQSxDQUFDeUI7SUFDNUUsTUFBTSxDQUFDdEksU0FBU3dJLFNBQVMsR0FBRzFCLDJDQUFnQixDQUFDOUksZUFBZSxPQUFPLEtBQUssSUFBSUEsWUFBWWdDLE9BQU87SUFDL0YsTUFBTSxDQUFDeUksY0FBY0MsY0FBYyxHQUFHNUIsMkNBQWdCLENBQUM5SSxlQUFlLE9BQU8sS0FBSyxJQUFJQSxZQUFZeUssWUFBWTtJQUM5RyxNQUFNLENBQUN2UCxPQUFPeVAsU0FBUyxHQUFHN0IsMkNBQWdCLENBQUM5SSxlQUFlLE9BQU8sS0FBSyxJQUFJQSxZQUFZOUUsS0FBSztJQUMzRixNQUFNLENBQUMwUCxhQUFhQyxlQUFlLEdBQUcvQiwyQ0FBZ0IsQ0FBQztJQUN2RCxNQUFNZ0Msa0JBQWtCaEMseUNBQWM7SUFDdEMsTUFBTSxFQUFFbkwsU0FBUyxFQUFFcU4sYUFBYSxFQUFFLEdBQUdsQywwQ0FBZSxDQUFDO1FBQ25ELE9BQU9KLHlFQUFlQSxDQUFDNEI7SUFDekIsR0FBRztRQUNBclUsQ0FBQUEsS0FBS3FVLGdCQUFnQjdPLFdBQVcsQ0FBQ3dQLEdBQUcsS0FBSyxPQUFPaFYsS0FBS3FVLGdCQUFnQjdPLFdBQVcsQ0FBQ3lQLFFBQVE7UUFDMUZaLGdCQUFnQmhZLE1BQU07UUFDdEJtVywwRUFBZ0JBLENBQUM2QixvQkFBb0JBLGdCQUFnQnRLLFdBQVcsQ0FBQ21MLFFBQVE7S0FDMUU7SUFDRHJDLDRDQUFpQixDQUFDO1FBQ2hCLE1BQU1uUixlQUFlcVQsY0FBY3JXLFNBQVMsQ0FBQyxDQUFDeVc7WUFDNUN6Qyx5REFBSUEsQ0FBQ3RFLEtBQUssQ0FBQyxnQkFBZ0IrRztZQUMzQmIsZUFBZWE7WUFDZlosU0FBU1ksZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhcEosT0FBTztZQUM3RDBJLGNBQWNVLGdCQUFnQixPQUFPLEtBQUssSUFBSUEsYUFBYVgsWUFBWTtZQUN2RUUsU0FBU1MsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhbFEsS0FBSztRQUM3RDtRQUNBLE9BQU8sSUFBTXZELGdCQUFnQixPQUFPLEtBQUssSUFBSUEsYUFBYS9DLFdBQVc7SUFDdkUsR0FBRztRQUFDb1c7S0FBYztJQUNsQmxDLDRDQUFpQixDQUFDO1FBQ2hCLElBQUl1QyxLQUFLMUs7UUFDVCxJQUFJekYsT0FBTztZQUNULElBQUk0UCxnQkFBZ0J2VyxPQUFPLEVBQUU7Z0JBQzNCMkcsTUFBTW9RLE1BQU0sQ0FBQ1IsZ0JBQWdCdlcsT0FBTztZQUN0QztZQUNBLElBQUksQ0FBQyxDQUFDOFcsTUFBTWxOLFFBQVFvTixPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlGLElBQUk5VyxPQUFPLEtBQUssQ0FBRXFVLENBQUFBLGlFQUFPQSxDQUFDMEIsZ0JBQWdCN08sV0FBVyxLQUFLLENBQUNQLFNBQVMsT0FBTyxLQUFLLElBQUlBLE1BQU15TSxJQUFJLE1BQU0sT0FBTSxHQUFJO2dCQUM1SnpNLE1BQU1zUSxNQUFNLENBQUNyTixRQUFRb04sT0FBTyxDQUFDaFgsT0FBTztZQUN0QztRQUNGO1FBQ0F1VyxnQkFBZ0J2VyxPQUFPLEdBQUcsQ0FBQ29NLEtBQUt4QyxRQUFRb04sT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJNUssR0FBR3BNLE9BQU87UUFDOUUsT0FBTztZQUNMLElBQUl1VyxnQkFBZ0J2VyxPQUFPLEVBQUU7Z0JBQzNCMkcsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTW9RLE1BQU0sQ0FBQ1IsZ0JBQWdCdlcsT0FBTztZQUMvRDtRQUNGO0lBQ0YsR0FBRztRQUFDMkc7UUFBT2lELFFBQVFvTixPQUFPO0tBQUM7SUFDM0J6Qyw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJdUMsS0FBSzFLO1FBQ1QsSUFBSSxPQUFRLEVBQUMwSyxNQUFNckwsZUFBZSxPQUFPLEtBQUssSUFBSUEsWUFBWXlMLFVBQVUsS0FBSyxPQUFPLEtBQUssSUFBSUosSUFBSXZVLEtBQUssTUFBTSxZQUFZLE9BQVEsRUFBQzZKLEtBQUtYLGVBQWUsT0FBTyxLQUFLLElBQUlBLFlBQVl5TCxVQUFVLEtBQUssT0FBTyxLQUFLLElBQUk5SyxHQUFHNUosTUFBTSxNQUFNLFVBQVU7WUFDdk8sTUFBTTJVLGVBQWUxTCxZQUFZeUwsVUFBVSxDQUFDM1UsS0FBSyxHQUFHa0osWUFBWXlMLFVBQVUsQ0FBQzFVLE1BQU0sR0FBRyxjQUFjO1lBQ2xHOFQsZUFBZWE7UUFDakI7SUFDRixHQUFHO1FBQUMxTDtLQUFZO0lBQ2hCLE9BQU87UUFDTEE7UUFDQWdDO1FBQ0F5STtRQUNBdlA7UUFDQXlRLGNBQWN6QyxZQUFZL0ssUUFBUVosS0FBSyxFQUFFeEwsZUFBZTtZQUN0RDRMO1lBQ0EsNkJBQTZCMk0sZ0JBQWdCN08sV0FBVyxDQUFDbU4sT0FBTztZQUNoRSxrQkFBa0I1SSxlQUFlLE9BQU8sS0FBSyxJQUFJQSxZQUFZMU4sTUFBTTtRQUNyRSxHQUFHLENBQUMwTixlQUFlLE9BQU8sS0FBSyxJQUFJQSxZQUFZMkgsSUFBSSxNQUFNLFdBQVc7WUFBRSx1QkFBdUJpRDtRQUFZO0lBQzNHO0FBQ0Y7QUFFQSw2QkFBNkI7QUFDN0IsU0FBU2dCLGNBQWN0WixNQUFNLEVBQUVtSixXQUFXLEVBQUUwQyxVQUFVLENBQUMsQ0FBQztJQUN0RCxNQUFNdEMsSUFBSUYscUJBQXFCRjtJQUMvQixPQUFPNE8sNEJBQTRCO1FBQUUvWDtRQUFRbUosYUFBYUk7SUFBRSxHQUFHc0M7QUFDakU7QUFFQSxtQ0FBbUM7QUFDbkMsU0FBUzBOLG9CQUFvQkMsSUFBSSxFQUFFclEsV0FBVyxFQUFFMEMsVUFBVSxDQUFDLENBQUM7SUFDMUQsTUFBTXRDLElBQUlGLHFCQUFxQkY7SUFDL0IsT0FBTzRPLDRCQUE0QjtRQUFFeUI7UUFBTXJRLGFBQWFJO0lBQUUsR0FBR3NDO0FBQy9EO0FBRUEsNkJBQTZCO0FBQ0k7QUFFakMscUNBQXFDO0FBQ29EO0FBQ3hEO0FBQ2pDLFNBQVNpTyxzQkFBc0JDLGVBQWUsRUFBRUMsY0FBYyxFQUFFbk8sVUFBVSxDQUFDLENBQUM7SUFDMUUsTUFBTW9PLGdCQUFnQkoseUNBQWMsQ0FBQyxFQUFFO0lBQ3ZDLE1BQU1LLHFCQUFxQkwseUNBQWMsQ0FBQyxDQUFDO0lBQzNDLE1BQU1NLGdCQUFnQkgsbUJBQW1CRSxtQkFBbUJqWSxPQUFPO0lBQ25FLE1BQU1tWSxrQkFBa0IsT0FBT3ZPLFFBQVF3TyxrQkFBa0IsS0FBSyxhQUFheE8sUUFBUXdPLGtCQUFrQixDQUFDTixtQkFBbUJKLDZFQUFtQkEsQ0FBQ0k7SUFDN0ksSUFBSU8sbUJBQW1CO1dBQUlGO0tBQWdCO0lBQzNDLElBQUlELGtCQUFrQixPQUFPO1FBQzNCLElBQUk7WUFDRkcsbUJBQW1CVixxRUFBV0EsQ0FBQ0ssY0FBY2hZLE9BQU8sRUFBRW1ZLGlCQUFpQko7UUFDekUsRUFBRSxPQUFPTyxPQUFPO1lBQ2RiLHlEQUFJQSxDQUFDYSxLQUFLLENBQUMsdUNBQXVDQTtRQUNwRDtJQUNGO0lBQ0EsSUFBSUosZUFBZTtRQUNqQkYsY0FBY2hZLE9BQU8sR0FBR21ZO0lBQzFCLE9BQU87UUFDTEgsY0FBY2hZLE9BQU8sR0FBR3FZO0lBQzFCO0lBQ0FKLG1CQUFtQmpZLE9BQU8sR0FBRytYO0lBQzdCLE9BQU9NO0FBQ1Q7QUFFQSw2QkFBNkI7QUFDN0IsU0FBU0UsY0FBY0MsV0FBVyxFQUFFVixlQUFlO0lBQ2pELE1BQU0sQ0FBQ1csYUFBYUMsZUFBZSxHQUFHbEIsMkNBQWdCLENBQUM7SUFDdkQsTUFBTW1CLGlCQUFpQkMsS0FBS0MsR0FBRyxDQUFDRCxLQUFLRSxJQUFJLENBQUNoQixnQkFBZ0IxVyxNQUFNLEdBQUdvWCxjQUFjO0lBQ2pGLElBQUlDLGNBQWNFLGdCQUFnQjtRQUNoQ0QsZUFBZUM7SUFDakI7SUFDQSxNQUFNSSxnQkFBZ0JOLGNBQWNEO0lBQ3BDLE1BQU1RLGlCQUFpQkQsZ0JBQWdCUDtJQUN2QyxNQUFNUyxhQUFhLENBQUNDO1FBQ2xCUixlQUFlLENBQUN6VjtZQUNkLElBQUlpVyxjQUFjLFFBQVE7Z0JBQ3hCLElBQUlqVyxVQUFVMFYsZ0JBQWdCO29CQUM1QixPQUFPMVY7Z0JBQ1Q7Z0JBQ0EsT0FBT0EsUUFBUTtZQUNqQixPQUFPO2dCQUNMLElBQUlBLFVBQVUsR0FBRztvQkFDZixPQUFPQTtnQkFDVDtnQkFDQSxPQUFPQSxRQUFRO1lBQ2pCO1FBQ0Y7SUFDRjtJQUNBLE1BQU1rVyxXQUFXLENBQUNDO1FBQ2hCLElBQUlBLE1BQU1ULGdCQUFnQjtZQUN4QkQsZUFBZUM7UUFDakIsT0FBTyxJQUFJUyxNQUFNLEdBQUc7WUFDbEJWLGVBQWU7UUFDakIsT0FBTztZQUNMQSxlQUFlVTtRQUNqQjtJQUNGO0lBQ0EsTUFBTUMseUJBQXlCeEIsc0JBQXNCQyxpQkFBaUJVO0lBQ3RFLE1BQU1jLGVBQWVELHVCQUF1QkUsS0FBSyxDQUFDUCxnQkFBZ0JEO0lBQ2xFLE9BQU87UUFDTEo7UUFDQWEsVUFBVSxJQUFNUCxXQUFXO1FBQzNCUSxVQUFVLElBQU1SLFdBQVc7UUFDM0JTLFNBQVNQO1FBQ1RIO1FBQ0FEO1FBQ0FZLFFBQVFMO1FBQ1JiO0lBQ0Y7QUFDRjtBQUVBLGtDQUFrQztBQUNpQztBQUNsQztBQUNqQyxTQUFTcUIsbUJBQW1COVEsUUFBUSxDQUFDLENBQUM7SUFDcEMsTUFBTTFCLElBQUlGLHFCQUFxQjRCLE1BQU05QixXQUFXO0lBQ2hELE1BQU02UyxlQUFlRiwwQ0FBZSxDQUFDLElBQU1ELGlGQUF1QkEsQ0FBQ3RTLElBQUk7UUFBQ0E7S0FBRTtJQUMxRSxNQUFNLEVBQUVxUCxRQUFRLEVBQUVZLElBQUksRUFBRXlDLFFBQVEsRUFBRSxHQUFHbFgsbUJBQW1CaVgsY0FBYztRQUNwRXhDLE1BQU1qUSxFQUFFaVEsSUFBSTtRQUNaWixVQUFVclAsRUFBRXFQLFFBQVE7UUFDcEJxRCxVQUFVMVMsRUFBRTBTLFFBQVE7SUFDdEI7SUFDQSxPQUFPO1FBQUVyRDtRQUFVWTtRQUFNeUM7SUFBUztBQUNwQztBQUVBLHlDQUF5QztBQUNSO0FBQzBFO0FBQzNHLFNBQVNHLDBCQUEwQnZRLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLE1BQU10QyxJQUFJRixxQkFBcUJ3QyxRQUFRMUMsV0FBVztJQUNsRCxNQUFNMkwscUJBQXFCb0gsMENBQWUsQ0FBQyxJQUFNQyx1RkFBOEJBLENBQUM1UyxJQUFJO1FBQUNBO0tBQUU7SUFDdkYsTUFBTXdMLGNBQWNoUSxtQkFBbUIrUCxvQkFBb0J2TCxFQUFFd0wsV0FBVztJQUN4RSxPQUFPQTtBQUNUO0FBRUEsa0NBQWtDO0FBQzhCO0FBQ3pCO0FBQ047QUFDakMsU0FBU3lILG1CQUFtQixFQUMxQjFULFFBQVEsRUFDUkssV0FBVyxFQUNYbkosTUFBTSxFQUNOME4sV0FBVyxFQUNYK08sa0JBQWtCLEVBQ2xCQyx3QkFBd0IsRUFDeEIvSyxTQUFTLEVBQ1Y7SUFDQyxNQUFNZ0wsZ0JBQWdCalU7SUFDdEIsTUFBTWEsSUFBSUYscUJBQXFCRjtJQUMvQixNQUFNcEMsaUJBQWlCd1YsMENBQWUsQ0FBQztRQUNyQyxJQUFJNVksSUFBSTBLLElBQUlDLElBQUlDLElBQUlDLElBQUlvTztRQUN4QixNQUFNQyxVQUFVLENBQUN4TyxLQUFLLENBQUMxSyxLQUFLbUYsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzlJLE1BQU0sS0FBSyxPQUFPMkQsS0FBS2daLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBYzNjLE1BQU0sS0FBSyxPQUFPcU8sS0FBS3JPO1FBQzlKLElBQUk2YyxZQUFZLEtBQUssR0FBRztZQUN0QixNQUFNLElBQUl4VixNQUNSO1FBRUo7UUFDQSxPQUFPO1lBQ0w4QixhQUFhLENBQUNvRixLQUFLLENBQUNELEtBQUt4RixZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTSyxXQUFXLEtBQUssT0FBT21GLEtBQUtxTyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWN4VCxXQUFXLEtBQUssT0FBT29GLEtBQUtoRjtZQUNyS21FLGFBQWEsQ0FBQ2tQLEtBQUssQ0FBQ3BPLEtBQUsxRixZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTNEUsV0FBVyxLQUFLLE9BQU9jLEtBQUttTyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNqUCxXQUFXLEtBQUssT0FBT2tQLEtBQUtsUDtZQUNySzFOLFFBQVE2YztRQUNWO0lBQ0YsR0FBRztRQUNEL1QsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBU0ssV0FBVztRQUNoREwsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzlJLE1BQU07UUFDM0M4SSxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTNEUsV0FBVztRQUNoRGlQLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY3hULFdBQVc7UUFDMUR3VCxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWMzYyxNQUFNO1FBQ3JEMmMsaUJBQWlCLE9BQU8sS0FBSyxJQUFJQSxjQUFjalAsV0FBVztRQUMxRG5FO1FBQ0F2SjtRQUNBME47S0FDRDtJQUNELE1BQU1wQyxjQUFjaVIsMENBQWUsQ0FBQztRQUNsQyxNQUFNLEVBQUVsUixTQUFTLEVBQUUsR0FBR2dSLDhFQUFvQkE7UUFDMUMsT0FBT3RSLFdBQVc0RyxXQUFXO1lBQzNCdEc7WUFDQUcsU0FBUyxDQUFDNEM7Z0JBQ1IsSUFBSXpLLElBQUkwSztnQkFDUDFLLENBQUFBLEtBQUtnTyxVQUFVbkcsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJN0gsR0FBRzlELElBQUksQ0FBQzhSLFdBQVd2RDtnQkFDL0QsSUFBSSxPQUFPcU8sdUJBQXVCLFlBQVk7b0JBQzVDLE1BQU03VCxRQUFRLENBQUN5RixLQUFLdEgsZUFBZTJHLFdBQVcsS0FBSyxPQUFPVyxLQUFLdEgsZUFBZW9DLFdBQVcsQ0FBQ2dGLFFBQVEsQ0FBQ3BILGVBQWUvRyxNQUFNO29CQUN4SHljLG1CQUFtQjt3QkFBRXRULGFBQWFwQyxlQUFlb0MsV0FBVzt3QkFBRVA7b0JBQU07Z0JBQ3RFO1lBQ0Y7UUFDRjtJQUNGLEdBQUc7UUFDRCtJO1FBQ0E4SztRQUNBMVYsZUFBZTJHLFdBQVc7UUFDMUIzRyxlQUFlL0csTUFBTTtRQUNyQitHLGVBQWVvQyxXQUFXO0tBQzNCO0lBQ0QsTUFBTTJULGVBQWV2TixXQUFXK00saURBQUtBLENBQUNTLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFO1FBQUU3VCxhQUFhcEMsZUFBZW9DLFdBQVc7SUFBQztJQUMvRixNQUFNOFQsZUFBZTFOLFdBQVcrTSxpREFBS0EsQ0FBQ1MsTUFBTSxDQUFDRyxVQUFVLEVBQUU7UUFDdkQvVCxhQUFhcEMsZUFBZW9DLFdBQVc7SUFDekM7SUFDQSxNQUFNNkcsYUFBYUQsY0FBY2hKLGVBQWVvQyxXQUFXO0lBQzNELE1BQU15RSxhQUFhSCxjQUFjMUc7SUFDakMsT0FBTztRQUNMc1MsY0FBYzVaLGVBQWU7WUFDM0IsdUJBQXVCd2Q7WUFDdkIsdUJBQXVCSDtZQUN2QixvQkFBb0JKLDZCQUE2QixPQUFPLFFBQVExTTtZQUNoRSw2QkFBNkJqSixlQUFlb0MsV0FBVyxDQUFDbU4sT0FBTztZQUMvRCxrQkFBa0J2UCxlQUFlL0csTUFBTTtZQUN2Qyx1QkFBdUI0TjtRQUN6QixHQUFHdEM7SUFDTDtBQUNGO0FBRUEscUNBQXFDO0FBQ29DO0FBQ3hDO0FBQ2pDLFNBQVMrUixzQkFBc0J4UixVQUFVLENBQUMsQ0FBQztJQUN6QyxNQUFNL0IsT0FBT0QsY0FBY2dDLFFBQVEvQixJQUFJO0lBQ3ZDLE1BQU0sQ0FBQ2dKLGNBQWN3SyxnQkFBZ0IsR0FBR0YsMkNBQWdCLENBQUMsRUFBRTtJQUMzREEsNENBQWlCLENBQUM7UUFDaEIsTUFBTXhOLFdBQVd1Tix1RkFBNkJBLENBQUNyVCxNQUFNO1lBQ25EeVQsc0JBQXNCMVIsUUFBUTJSLFlBQVk7UUFDNUMsR0FBR25iLFNBQVMsQ0FBQ2liO1FBQ2IsT0FBTyxJQUFNMU4sU0FBU3ROLFdBQVc7SUFDbkMsR0FBRztRQUFDd0g7UUFBTW1KLEtBQUtDLFNBQVMsQ0FBQ3JILFFBQVEyUixZQUFZO0tBQUU7SUFDL0MsT0FBTzFLO0FBQ1Q7QUFFQSwrQkFBK0I7QUFDL0IsU0FBUzJLLGdCQUFnQjVSLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLE1BQU02UixxQkFBcUJMLHNCQUFzQnhSO0lBQ2pELE1BQU0sRUFBRWlHLGdCQUFnQixFQUFFLEdBQUcyQixvQkFBb0I1SDtJQUNqRCxPQUFPO1FBQUNpRztXQUFxQjRMO0tBQW1CO0FBQ2xEO0FBRUEsK0JBQStCO0FBQ0U7QUFDakMsU0FBU0UsZ0JBQWdCelcsYUFBYTtJQUNwQ0EsZ0JBQWdCRyx1QkFBdUJIO0lBQ3ZDLE9BQU93VywwQ0FBZSxDQUFDO1FBQ3JCLElBQUksQ0FBQ3hXLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY1ksR0FBRyxDQUFDN0MsS0FBSyxNQUFNLEtBQUssS0FBS2lDLGNBQWNZLEdBQUcsQ0FBQzdDLEtBQUssQ0FBQzdCLE1BQU0sSUFBSSxHQUFHO1lBQ2hILE9BQU84RCxjQUFjWSxHQUFHLENBQUM3QyxLQUFLO1FBQ2hDO1FBQ0EsT0FBTyxFQUFFO0lBQ1gsR0FBRztRQUFDaUMsY0FBY1ksR0FBRyxDQUFDN0MsS0FBSztLQUFDO0FBQzlCO0FBRUEsb0NBQW9DO0FBQ29DO0FBQ3ZDO0FBQ2pDLFNBQVM2WSxxQkFBcUJuRixRQUFRLEVBQUUvTSxVQUFVLENBQUMsQ0FBQztJQUNsRCxNQUFNL0IsT0FBT0o7SUFDYixNQUFNLENBQUM4VCxhQUFhLEdBQUdNLDJDQUFnQixDQUFDalMsUUFBUTJSLFlBQVk7SUFDNUQsTUFBTXhZLGFBQWE4WSwwQ0FBZSxDQUNoQyxJQUFNRCxzRkFBNEJBLENBQUMvVCxNQUFNOE8sVUFBVTtZQUFFb0Ysa0JBQWtCUjtRQUFhLElBQ3BGO1FBQUMxVDtRQUFNOE87UUFBVTRFO0tBQWE7SUFFaEMsTUFBTXJVLGNBQWNwRSxtQkFDbEJDLFlBQ0E4RSxLQUFLbVUsd0JBQXdCLENBQUNyRjtJQUVoQyxPQUFPelA7QUFDVDtBQUVBLDJCQUEyQjtBQUNpQztBQUMzQjtBQUNqQyxTQUFTaVYsWUFBWXZTLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLE1BQU0vQixPQUFPRCxjQUFjZ0MsUUFBUS9CLElBQUk7SUFDdkMsTUFBTWtTLGVBQWVtQywwQ0FBZSxDQUFDLElBQU1ELDBFQUFnQkEsQ0FBQ3BVLE9BQU87UUFBQ0E7S0FBSztJQUN6RSxNQUFNLEVBQUUwUCxJQUFJLEVBQUV5QyxRQUFRLEVBQUUsR0FBR2xYLG1CQUFtQmlYLGNBQWM7UUFDMUR4QyxNQUFNMVAsS0FBSzBQLElBQUk7UUFDZnlDLFVBQVVuUyxLQUFLbVMsUUFBUTtJQUN6QjtJQUNBLE9BQU87UUFBRXpDO1FBQU15QztJQUFTO0FBQzFCO0FBRUEscUNBQXFDO0FBQ3VCO0FBQzNCO0FBRWpDLHVDQUF1QztBQUMwQjtBQUNoQztBQUNqQyxTQUFTd0M7SUFDUCxNQUFNM1UsT0FBT0o7SUFDYixNQUFNZ1Ysa0JBQWtCRiwwQ0FBZSxDQUFDLElBQU1ELCtFQUFxQkEsQ0FBQ3pVLE9BQU87UUFBQ0E7S0FBSztJQUNqRixNQUFNNlUsaUJBQWlCNVosbUJBQW1CMlosaUJBQWlCNVUsS0FBSzZVLGNBQWM7SUFDOUUsT0FBT0E7QUFDVDtBQUVBLHFDQUFxQztBQUNyQyxTQUFTQyxzQkFBc0I5TCxZQUFZO0lBQ3pDLE1BQU0sQ0FBQytMLG9CQUFvQkMsc0JBQXNCLEdBQUdSLDJDQUFnQixDQUNsRUQsMEVBQWdCQSxDQUFDdkw7SUFFbkIsTUFBTTZMLGlCQUFpQkY7SUFDdkJILDRDQUFpQixDQUFDO1FBQ2hCUSxzQkFBc0JULDBFQUFnQkEsQ0FBQ3ZMO0lBQ3pDLEdBQUc7UUFBQzZMO1FBQWdCN0w7S0FBYTtJQUNqQyxPQUFPK0w7QUFDVDtBQUVBLDZCQUE2QjtBQUM4QjtBQUMxQjtBQUNqQyxTQUFTSSxjQUFjLEVBQUVuVixJQUFJLEVBQUVtQixLQUFLLEVBQUU7SUFDcEMsTUFBTVosY0FBY1IsY0FBY0M7SUFDbEMsTUFBTSxFQUFFdUIsU0FBUyxFQUFFbEYsb0NBQW9DK1ksbUNBQW1DLEVBQUVDLHdCQUF3QixFQUFFLEdBQUdILDBDQUFlLENBQ3RJLElBQU1ELHlFQUFlQSxJQUNyQixFQUFFO0lBRUosTUFBTS9aLGFBQWFnYSwwQ0FBZSxDQUNoQyxJQUFNRSxvQ0FBb0M3VSxjQUMxQztRQUFDQTtRQUFhNlU7S0FBb0M7SUFFcEQsTUFBTSxFQUFFMVUsWUFBWSxFQUFFLEdBQUd6RixtQkFBbUJDLFlBQVk7UUFDdER3RixjQUFjSCxZQUFZSSxnQkFBZ0I7SUFDNUM7SUFDQSxNQUFNYSxjQUFjMFQsMENBQWUsQ0FDakMsSUFBTWpVLFdBQVdFLE9BQU87WUFDdEJJO1lBQ0FHLFNBQVM7Z0JBQ1AyVCx5QkFBeUI5VTtZQUMzQjtZQUNBMEUsT0FBTztnQkFBRXFRLFNBQVM1VSxlQUFlLFNBQVM7WUFBUTtRQUNwRCxJQUNBO1FBQUNTO1FBQU9JO1FBQVdiO1FBQWMyVTtRQUEwQjlVO0tBQVk7SUFFekUsT0FBTztRQUFFaUI7UUFBYWQ7SUFBYTtBQUNyQztBQUVBLDZCQUE2QjtBQUM4QjtBQUMxQjtBQUNqQyxTQUFTK1UsY0FBYyxFQUFFelYsSUFBSSxFQUFFbUIsS0FBSyxFQUFFO0lBQ3BDLE1BQU1aLGNBQWNSLGNBQWNDO0lBQ2xDLE1BQU0sRUFBRXVCLFNBQVMsRUFBRW1VLGtDQUFrQyxFQUFFQyx3QkFBd0IsRUFBRSxHQUFHSCwwQ0FBZSxDQUNqRyxJQUFNRCx5RUFBZUEsSUFDckIsRUFBRTtJQUVKLE1BQU1yYSxhQUFhc2EsMENBQWUsQ0FDaEMsSUFBTUUsbUNBQW1DblYsY0FDekM7UUFBQ0E7UUFBYW1WO0tBQW1DO0lBRW5ELE1BQU0sRUFBRUUsWUFBWSxFQUFFLEdBQUczYSxtQkFBbUJDLFlBQVk7UUFDdEQwYSxjQUFjclYsWUFBWXNWLGdCQUFnQjtJQUM1QztJQUNBLE1BQU1yVSxjQUFjZ1UsMENBQWUsQ0FDakMsSUFBTXZVLFdBQVdFLE9BQU87WUFDdEJJO1lBQ0FHLFNBQVM7Z0JBQ1BpVSx5QkFBeUJwVjtZQUMzQjtZQUNBMEUsT0FBTztnQkFBRXFRLFNBQVNNLGVBQWUsU0FBUztZQUFRO1FBQ3BELElBQ0E7UUFBQ3pVO1FBQU9JO1FBQVdxVTtRQUFjRDtRQUEwQnBWO0tBQVk7SUFFekUsT0FBTztRQUFFaUI7UUFBYW9VO0lBQWE7QUFDckM7QUFFQSx3QkFBd0I7QUFDUztBQUNqQyxTQUFTRyxTQUFTNUcsT0FBTyxFQUFFcE4sVUFBVSxDQUFDLENBQUM7SUFDckMsSUFBSWxJO0lBQ0osTUFBTW1jLGFBQWFGLHlDQUFjLENBQUM7SUFDbEMsTUFBTUcsV0FBV0gseUNBQWMsQ0FBQztJQUNoQyxNQUFNSSxtQkFBbUIsQ0FBQ3JjLEtBQUtrSSxRQUFRbVUsZ0JBQWdCLEtBQUssT0FBT3JjLEtBQUs7SUFDeEUsTUFBTXNjLGVBQWUsQ0FBQzdSO1FBQ3BCMlIsU0FBUzlkLE9BQU8sR0FBRztRQUNuQjZkLFdBQVc3ZCxPQUFPLEdBQUdtTSxNQUFNOFIsYUFBYSxDQUFDLEVBQUUsQ0FBQ0MsT0FBTztJQUNyRDtJQUNBLE1BQU1DLGNBQWMsQ0FBQ2hTO1FBQ25CMlIsU0FBUzlkLE9BQU8sR0FBR21NLE1BQU04UixhQUFhLENBQUMsRUFBRSxDQUFDQyxPQUFPO0lBQ25EO0lBQ0EsTUFBTUUsYUFBYVQsOENBQW1CLENBQUM7UUFDckMsSUFBSSxDQUFDRSxXQUFXN2QsT0FBTyxJQUFJLENBQUM4ZCxTQUFTOWQsT0FBTyxFQUFFO1lBQzVDO1FBQ0Y7UUFDQSxNQUFNcWUsV0FBV1IsV0FBVzdkLE9BQU8sR0FBRzhkLFNBQVM5ZCxPQUFPO1FBQ3RELE1BQU1zZSxjQUFjRCxXQUFXTjtRQUMvQixNQUFNUSxlQUFlRixXQUFXLENBQUNOO1FBQ2pDLElBQUlPLGVBQWUxVSxRQUFRNFUsV0FBVyxFQUNwQzVVLFFBQVE0VSxXQUFXO1FBQ3JCLElBQUlELGdCQUFnQjNVLFFBQVE2VSxZQUFZLEVBQ3RDN1UsUUFBUTZVLFlBQVk7SUFDeEIsR0FBRztRQUFDVjtRQUFrQm5VO0tBQVE7SUFDOUIrVCw0Q0FBaUIsQ0FBQztRQUNoQixNQUFNZSxjQUFjMUgsUUFBUWhYLE9BQU87UUFDbkMsSUFBSTBlLGFBQWE7WUFDZkEsWUFBWTNhLGdCQUFnQixDQUFDLGNBQWNpYSxjQUFjO2dCQUFFVyxTQUFTO1lBQUs7WUFDekVELFlBQVkzYSxnQkFBZ0IsQ0FBQyxhQUFhb2EsYUFBYTtnQkFBRVEsU0FBUztZQUFLO1lBQ3ZFRCxZQUFZM2EsZ0JBQWdCLENBQUMsWUFBWXFhLFlBQVk7Z0JBQUVPLFNBQVM7WUFBSztRQUN2RTtRQUNBLE9BQU87WUFDTCxJQUFJRCxhQUFhO2dCQUNmQSxZQUFZemEsbUJBQW1CLENBQUMsY0FBYytaO2dCQUM5Q1UsWUFBWXphLG1CQUFtQixDQUFDLGFBQWFrYTtnQkFDN0NPLFlBQVl6YSxtQkFBbUIsQ0FBQyxZQUFZbWE7WUFDOUM7UUFDRjtJQUNGLEdBQUc7UUFBQ3BIO1FBQVNvSDtLQUFXO0FBQzFCO0FBRUEsNkJBQTZCO0FBQzhCO0FBQzFCO0FBQ2pDLFNBQVNVLGNBQWMsRUFBRTlWLEtBQUssRUFBRTtJQUM5QixNQUFNLEVBQUVqRCxRQUFRLEVBQUU5QyxLQUFLLEVBQUUsR0FBR2dDLG1CQUFtQmUsTUFBTTtJQUNyRCxNQUFNLEVBQUVvRCxTQUFTLEVBQUUsR0FBR3lWLDBDQUFlLENBQUMsSUFBTUQseUVBQWVBLElBQUksRUFBRTtJQUNqRSxNQUFNdlYsY0FBY3dWLDBDQUFlLENBQUM7UUFDbEMsT0FBTy9WLFdBQVdFLE9BQU87WUFDdkJJO1lBQ0FHLFNBQVM7Z0JBQ1AsSUFBSXhELFVBQ0ZBLFNBQVM7b0JBQUV2QixLQUFLO2dCQUFjO1lBQ2xDO1lBQ0EsZ0JBQWdCLENBQUN2QixTQUFTLE9BQU8sS0FBSyxJQUFJQSxNQUFNd0IsUUFBUSxJQUFJLFNBQVM7WUFDckUsdUJBQXVCeEIsUUFBUUEsTUFBTXlCLGNBQWMsR0FBRyxLQUFLekIsTUFBTXlCLGNBQWMsQ0FBQ3FhLE9BQU8sQ0FBQyxLQUFLLE9BQU87UUFDdEc7SUFDRixHQUFHO1FBQUMvVjtRQUFPSTtRQUFXckQ7UUFBVTlDO0tBQU07SUFDdEMsT0FBTztRQUFFb0c7SUFBWTtBQUN2QjtBQUVBLHdCQUF3QjtBQUMrQjtBQUN0QjtBQUNqQyxTQUFTNlYsU0FBU0MsYUFBYSxFQUFFQyxRQUFRLEVBQUV4VixVQUFVLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUNnRixPQUFPeVEsU0FBUyxHQUFHSiwyQ0FBZ0IsQ0FBQyxLQUFLO0lBQ2hEQSw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJdmQ7UUFDSixJQUFJeWQsa0JBQWtCLEtBQUssR0FBRztZQUM1QixNQUFNL1osTUFBTTtRQUNkO1FBQ0EsSUFBSSxDQUFDLENBQUMxRCxLQUFLa0ksUUFBUTBWLFFBQVEsS0FBSyxPQUFPLEtBQUssSUFBSTVkLEdBQUdpVixRQUFRLE1BQU0sS0FBSyxHQUFHO1lBQ3ZFO1FBQ0Y7UUFDQSxNQUFNNEksZUFBZSxJQUFNcGhCLFFBQVEsSUFBSSxFQUFFLE1BQU07Z0JBQzdDNmdCLHlEQUFJQSxDQUFDbFAsS0FBSyxDQUFDO2dCQUNYLE1BQU0wUCxTQUFTLElBQUlDLGdCQUFnQjVoQixjQUFjTCxlQUFlLENBQUMsR0FBR29NLFFBQVEwVixRQUFRLEdBQUc7b0JBQUVGO2dCQUFTO2dCQUNsRyxNQUFNTSxNQUFNLE1BQU1DLE1BQU0sQ0FBQyxFQUFFUixjQUFjLENBQUMsRUFBRUssT0FBT3ZTLFFBQVEsR0FBRyxDQUFDO2dCQUMvRCxJQUFJLENBQUN5UyxJQUFJRSxFQUFFLEVBQUU7b0JBQ1haLHlEQUFJQSxDQUFDMUcsS0FBSyxDQUNSLENBQUMsb0RBQW9ELEVBQUVvSCxJQUFJRyxNQUFNLENBQUMsRUFBRSxFQUFFSCxJQUFJSSxVQUFVLENBQUMsQ0FBQztvQkFFeEY7Z0JBQ0Y7Z0JBQ0EsTUFBTSxFQUFFQyxXQUFXLEVBQUUsR0FBRyxNQUFNTCxJQUFJTSxJQUFJO2dCQUN0Q1gsU0FBU1U7WUFDWDtRQUNBUjtJQUNGLEdBQUc7UUFBQ0o7UUFBZUM7UUFBVXBPLEtBQUtDLFNBQVMsQ0FBQ3JIO0tBQVM7SUFDckQsT0FBT2dGO0FBQ1Q7QUFFQSxzQ0FBc0M7QUFJSjtBQUNEO0FBQ2pDLFNBQVN3Uix1QkFBdUJDLGdCQUFnQixFQUFFelcsVUFBVSxDQUFDLENBQUM7SUFDNUQsSUFBSWxJLElBQUkwSyxJQUFJQyxJQUFJQztJQUNoQixJQUFJdkYsTUFBTU47SUFDVixNQUFNYSxJQUFJLENBQUM4RSxLQUFLLENBQUMxSyxLQUFLeUYsNEJBQTJCLEtBQU0sT0FBT3pGLEtBQUtrSSxRQUFRMUMsV0FBVyxLQUFLLE9BQU9rRixLQUFLckYsT0FBTyxPQUFPLEtBQUssSUFBSUEsSUFBSUcsV0FBVztJQUM3SSxJQUFJLE9BQU9tWixxQkFBcUIsVUFBVTtRQUN4QyxJQUFJLENBQUMvWSxHQUFHO1lBQ04sTUFBTWxDLE1BQU0sQ0FBQyx5RUFBeUUsQ0FBQztRQUN6RjtRQUNBMkIsTUFBTTtZQUFFRyxhQUFhSTtZQUFHdkosUUFBUXNpQjtRQUFpQjtJQUNuRCxPQUFPLElBQUlBLGtCQUFrQjtRQUMzQnRaLE1BQU1zWjtJQUNSLE9BQU87UUFDTCxNQUFNamIsTUFBTSxDQUFDLDhFQUE4RSxDQUFDO0lBQzlGO0lBQ0EsTUFBTSxFQUFFZ0UsU0FBUyxFQUFFa1gsa0JBQWtCLEVBQUUsR0FBR0gsMENBQWUsQ0FDdkQsSUFBTUYsa0ZBQXdCQSxDQUFDbFosTUFDL0I7UUFBQ21aLDZFQUFvQkEsQ0FBQ25aO0tBQUs7SUFFN0IsTUFBTTBHLFVBQVUzSyxtQkFDZHdkLG9CQUNBLENBQUMsQ0FBRSxFQUFDLENBQUNqVSxLQUFLdEYsSUFBSTBFLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSVksR0FBR29CLE9BQU8sS0FBTSxFQUFDbkIsS0FBS3ZGLElBQUlHLFdBQVcsQ0FBQ2dGLFFBQVEsQ0FBQ25GLElBQUloSixNQUFNLE1BQU0sT0FBTyxLQUFLLElBQUl1TyxHQUFHbUIsT0FBTztJQUV6SSxPQUFPO1FBQUVBO1FBQVNyRTtJQUFVO0FBQzlCO0FBRUEsOEJBQThCO0FBQzhEO0FBQzNEO0FBQ2pDLFNBQVN1WCxlQUFlamYsRUFBRTtJQUN4QixJQUFJMEssS0FBSzFLLElBQUksRUFDWDNELE1BQU0sRUFDTjZpQixRQUFRLEVBQ1JDLFlBQVksRUFDWkMsY0FBYyxFQUNmLEdBQUcxVSxJQUFJbUQsT0FBT3pSLFVBQVVzTyxJQUFJO1FBQzNCO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxJQUFJMEs7SUFDSixNQUFNalAsT0FBT0Y7SUFDYixNQUFNaEIsUUFBUSxDQUFDbVEsTUFBTWpQLFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUtnSSxnQkFBZ0IsS0FBSyxPQUFPLEtBQUssSUFBSWlILElBQUk1SyxRQUFRLENBQUNuTztJQUNwRyxNQUFNZ2pCLHFCQUFxQkwseUNBQWMsQ0FBQztJQUMxQyxNQUFNLEVBQUVNLE1BQU0sRUFBRTVYLFNBQVMsRUFBRTZYLGVBQWUsRUFBRUMsZUFBZSxFQUFFLEdBQUdSLDBDQUFlLENBQzdFLElBQU03WSxPQUFPMFksMEVBQWdCQSxDQUFDeGlCLFFBQVE4SixNQUFNaVosa0JBQWtCTiwyRUFBaUJBLElBQy9FO1FBQUMzWTtRQUFNOUo7UUFBUWlULEtBQUtDLFNBQVMsQ0FBQzZQO0tBQWdCO0lBRWhELE1BQU1LLFVBQVVyZSxtQkFBbUJtZSxpQkFBaUI7SUFDcEQsTUFBTUcsVUFBVXRlLG1CQUFtQm9lLGlCQUFpQkwsZ0JBQWdCLE9BQU9BLGVBQWUsQ0FBQyxDQUFFbGEsQ0FBQUEsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTTBhLFNBQVM7SUFDcklYLDRDQUFpQixDQUFDO1FBQ2hCRSxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTUSxTQUFTTCxtQkFBbUIvZ0IsT0FBTztRQUN4RStnQixtQkFBbUIvZ0IsT0FBTyxHQUFHO0lBQy9CLEdBQUc7UUFBQ29oQjtRQUFTUjtLQUFTO0lBQ3RCRiw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJRyxpQkFBaUIsS0FBSyxHQUFHO1lBQzNCSix5REFBSUEsQ0FBQzNRLEtBQUssQ0FBQyxnQ0FBZ0MvUixRQUFROGlCO1lBQ25ERyxPQUFPSDtRQUNUO0lBQ0YsR0FBRyxFQUFFO0lBQ0wsTUFBTVMsV0FBV1osMENBQWUsQ0FBQyxJQUFNNVgsV0FBV3lHLE1BQU07WUFBRW5HO1FBQVUsSUFBSTtRQUFDbUc7UUFBTW5HO0tBQVU7SUFDekYsTUFBTW1ZLGVBQWViLDhDQUFtQixDQUN0QyxDQUFDYztRQUNDLElBQUlDO1FBQ0pWLG1CQUFtQi9nQixPQUFPLEdBQUc7UUFDN0JnaEIsU0FBU1UsT0FBTyxDQUFDLElBQU1YLG1CQUFtQi9nQixPQUFPLEdBQUc7UUFDbkR5aEIsQ0FBQUEsTUFBTWxTLEtBQUtoRyxPQUFPLEtBQUssT0FBTyxLQUFLLElBQUlrWSxJQUFJN2pCLElBQUksQ0FBQzJSLE1BQU1pUztJQUN6RCxHQUNBO1FBQUNqUztRQUFNeVI7S0FBTztJQUVoQixPQUFPO1FBQ0xBO1FBQ0FJO1FBQ0FEO1FBQ0F4YTtRQUNBd0MsYUFBYXRMLGNBQWNMLGVBQWUsQ0FBQyxHQUFHOGpCLFdBQVc7WUFDdkQsZ0JBQWdCRjtZQUNoQixrQkFBa0JyakI7WUFDbEIsbUJBQW1CcWpCO1lBQ25COVgsVUFBVTZYO1lBQ1Y1WCxTQUFTZ1k7UUFDWDtJQUNGO0FBQ0Y7QUFFQSx5QkFBeUI7QUFNUztBQUNlO0FBQ2hCO0FBQ2pDLFNBQVNVLFVBQVVDLFVBQVU7SUFDM0JILGlEQUFNQSxDQUFDakgsTUFBTSxDQUFDQyxNQUFNO0lBQ3BCZ0gsaURBQU1BLENBQUNqSCxNQUFNLENBQUNHLFVBQVU7SUFDeEI4RyxpREFBTUEsQ0FBQ2pILE1BQU0sQ0FBQ3FILFdBQVc7SUFDekJKLGlEQUFNQSxDQUFDakgsTUFBTSxDQUFDc0gsZ0JBQWdCO0lBQzlCTCxpREFBTUEsQ0FBQ2pILE1BQU0sQ0FBQy9RLE9BQU87Q0FDdEIsRUFBRUgsVUFBVSxDQUFDLENBQUM7SUFDYixNQUFNL0IsT0FBT0QsY0FBY2dDLFFBQVEvQixJQUFJO0lBQ3ZDLE1BQU0sQ0FBQ2lRLGlCQUFpQnVLLG1CQUFtQixHQUFHTCwyQ0FBZ0IsQ0FBQyxFQUFFO0lBQ2pFLE1BQU0sQ0FBQ25SLGNBQWN3SyxnQkFBZ0IsR0FBRzJHLDJDQUFnQixDQUFDLEVBQUU7SUFDM0QsTUFBTU0sV0FBV04sMENBQWUsQ0FBQztRQUMvQixPQUFPRSxRQUFRbE4sR0FBRyxDQUFDLENBQUN1TixJQUFNWCw0RUFBa0JBLENBQUNXLEtBQUtBLEVBQUV4a0IsTUFBTSxHQUFHd2tCO0lBQy9ELEdBQUc7UUFBQ3ZSLEtBQUtDLFNBQVMsQ0FBQ2lSO0tBQVM7SUFDNUJGLDRDQUFpQixDQUFDO1FBQ2hCLE1BQU01ZSxlQUFlMGUsbUZBQXlCQSxDQUFDamEsTUFBTXlhLFVBQVU7WUFDN0RoSCxzQkFBc0IxUixRQUFRMlIsWUFBWTtZQUMxQ2lILGdCQUFnQjVZLFFBQVE0WSxjQUFjO1FBQ3hDLEdBQUdwaUIsU0FBUyxDQUFDLENBQUMsRUFBRTBYLGlCQUFpQjJLLGdCQUFnQixFQUFFNVIsY0FBYzZSLGFBQWEsRUFBRTtZQUM5RWIseURBQUlBLENBQUMvUixLQUFLLENBQUMseUJBQXlCMlMsa0JBQWtCQztZQUN0REwsbUJBQW1CSTtZQUNuQnBILGdCQUFnQnFIO1FBQ2xCO1FBQ0EsT0FBTyxJQUFNdGYsYUFBYS9DLFdBQVc7SUFDdkMsR0FBRztRQUFDd0g7UUFBTW1KLEtBQUtDLFNBQVMsQ0FBQ3JILFFBQVEyUixZQUFZO1FBQUd2SyxLQUFLQyxTQUFTLENBQUNpUjtLQUFTO0lBQ3hFLE1BQU1TLHVCQUF1QlgsMENBQWUsQ0FBQztRQUMzQyxJQUFJTCw4RUFBb0JBLENBQUNPLFVBQVU7WUFDakMsTUFBTVUscUJBQXFCQyxxQkFBcUJYLFNBQVNyUjtZQUN6RCxNQUFNaVMsa0NBQWtDQyxNQUFNQyxJQUFJLENBQUNsTDtZQUNuRGpILGFBQWFwUCxPQUFPLENBQUMsQ0FBQ3lGO2dCQUNwQixJQUFJeEY7Z0JBQ0osSUFBSWtoQixtQkFBbUJ2aEIsR0FBRyxDQUFDNkYsWUFBWXlQLFFBQVEsR0FBRztvQkFDaEQsTUFBTXNNLDBCQUEwQixDQUFDdmhCLEtBQUtraEIsbUJBQW1CcGhCLEdBQUcsQ0FBQzBGLFlBQVl5UCxRQUFRLE1BQU0sT0FBT2pWLEtBQUssRUFBRTtvQkFDckd1aEIsd0JBQXdCeGhCLE9BQU8sQ0FBQyxDQUFDeWhCO3dCQUMvQixJQUFJcEwsZ0JBQWdCcUwsSUFBSSxDQUN0QixDQUFDLEVBQUVqYyxhQUFhSSxDQUFDLEVBQUVtRSxXQUFXLEVBQUUsR0FBS3ZFLFlBQVl5UCxRQUFRLEtBQUtyUCxFQUFFcVAsUUFBUSxJQUFJbEwsWUFBWTFOLE1BQU0sS0FBS21sQixvQkFDbEc7NEJBQ0Q7d0JBQ0Y7d0JBQ0FyQix5REFBSUEsQ0FBQy9SLEtBQUssQ0FDUixDQUFDLElBQUksRUFBRW9ULGtCQUFrQiw2QkFBNkIsRUFBRWhjLFlBQVl5UCxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUVqRixNQUFNeU0sY0FBYzs0QkFDbEJsYzs0QkFDQW5KLFFBQVFtbEI7d0JBQ1Y7d0JBQ0FKLGdDQUFnQ2xoQixJQUFJLENBQUN3aEI7b0JBQ3ZDO2dCQUNGO1lBQ0Y7WUFDQSxPQUFPTjtRQUNULE9BQU87WUFDTCxPQUFPaEw7UUFDVDtJQUNGLEdBQUc7UUFBQ0E7UUFBaUJqSDtRQUFjcVI7S0FBUTtJQUMzQyxPQUFPUztBQUNUO0FBQ0EsU0FBU1UsV0FBV0MsSUFBSSxFQUFFQyxJQUFJO0lBQzVCLE1BQU1DLGNBQWMsSUFBSXRpQixJQUFJb2lCO0lBQzVCLEtBQUssTUFBTUcsUUFBUUYsS0FBTTtRQUN2QkMsWUFBWXpoQixNQUFNLENBQUMwaEI7SUFDckI7SUFDQSxPQUFPRDtBQUNUO0FBQ0EsU0FBU1gscUJBQXFCWCxPQUFPLEVBQUVyUixZQUFZO0lBQ2pELE1BQU02UyxpQkFBaUIsYUFBYSxHQUFHLElBQUloakI7SUFDM0MsSUFBSWloQiw4RUFBb0JBLENBQUNPLFVBQVU7UUFDakMsTUFBTXlCLDZCQUE2QnpCLFFBQVF0TixNQUFNLENBQUMsQ0FBQ2dQLG1CQUFxQkEsaUJBQWlCQyxlQUFlLEVBQUU3TyxHQUFHLENBQUMsQ0FBQzRPLG1CQUFxQkEsaUJBQWlCN2xCLE1BQU07UUFDM0o4UyxhQUFhcFAsT0FBTyxDQUFDLENBQUN5RjtZQUNwQixNQUFNNGMsNEJBQTRCNWMsWUFBWTZjLFNBQVMsR0FBRy9PLEdBQUcsQ0FBQyxDQUFDZ1A7Z0JBQzdELElBQUl0aUI7Z0JBQ0osT0FBTyxDQUFDQSxLQUFLc2lCLElBQUlyZCxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUlqRixHQUFHM0QsTUFBTTtZQUN0RCxHQUFHNlcsTUFBTSxDQUFDLENBQUM1SSxjQUFnQkEsZ0JBQWdCLEtBQUs7WUFDaEQsTUFBTWlZLHNDQUFzQ2xCLE1BQU1DLElBQUksQ0FDcERLLFdBQVcsSUFBSW5pQixJQUFJeWlCLDZCQUE2QixJQUFJemlCLElBQUk0aUI7WUFFMUQsSUFBSUcsb0NBQW9DN2lCLE1BQU0sR0FBRyxHQUFHO2dCQUNsRHNpQixlQUFlN2hCLEdBQUcsQ0FBQ3FGLFlBQVl5UCxRQUFRLEVBQUVzTjtZQUMzQztRQUNGO0lBQ0Y7SUFDQSxPQUFPUDtBQUNUO0FBRUEsd0JBQXdCO0FBQ3hCLFNBQVNRLFNBQVNyZCxRQUFRLEVBQUUrQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxPQUFPa00sNEJBQTRCalAsVUFBVStDO0FBQy9DO0FBRUEsOEJBQThCO0FBQzlCLFNBQVN1YSxlQUFldGQsUUFBUSxFQUFFK0MsVUFBVSxDQUFDLENBQUM7SUFDNUMsTUFBTTdDLE1BQU1ILGtCQUFrQkM7SUFDOUIsT0FBT2lQLDRCQUE0Qi9PLEtBQUs2QztBQUMxQztBQUVBLHVCQUF1QjtBQUM4QjtBQUNwQjtBQUNqQyxTQUFTMGEsUUFBUTFhLE9BQU87SUFDdEIsTUFBTS9CLE9BQU9KO0lBQ2IsTUFBTSxDQUFDOGMsT0FBT0MsU0FBUyxHQUFHSCwyQ0FBZ0I7SUFDMUMsTUFBTXZaLFlBQVloSSxtQkFBbUJ5aEIsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTTNaLG1CQUFtQixFQUFFO0lBQ3pGLE1BQU02WixlQUFlM2hCLG1CQUFtQnloQixTQUFTLE9BQU8sS0FBSyxJQUFJQSxNQUFNNVosaUJBQWlCLEVBQUUsRUFBRTtJQUM1RjBaLDRDQUFpQixDQUFDO1FBQ2hCLE1BQU1LLGtCQUFrQk4sbUVBQVNBLENBQUN2YyxNQUFNK0I7UUFDeEM0YSxTQUFTRTtJQUNYLEdBQUc7UUFBQzdjO1FBQU0rQjtLQUFRO0lBQ2xCLE9BQU87UUFBRWMsTUFBTTZaLFNBQVMsT0FBTyxLQUFLLElBQUlBLE1BQU03WixJQUFJO1FBQUVpYSxRQUFRSixTQUFTLE9BQU8sS0FBSyxJQUFJQSxNQUFNSSxNQUFNO1FBQUVGO1FBQWMzWjtJQUFVO0FBQzdIO0FBRUEsd0NBQXdDO0FBQ29DO0FBQzNDO0FBQ2pDLFNBQVNpYSx5QkFBeUJuYixVQUFVLENBQUMsQ0FBQztJQUM1QyxJQUFJbEk7SUFDSixNQUFNLENBQUNzakIsYUFBYUMsWUFBWSxHQUFHSCwyQ0FBZ0IsQ0FDakRGLHlFQUFlQSxDQUFDaGIsUUFBUXNiLFFBQVEsRUFBRSxDQUFDeGpCLEtBQUtrSSxRQUFRdWIsV0FBVyxLQUFLLE9BQU96akIsS0FBSztJQUU5RSxNQUFNMGpCLHdCQUF3Qk4sOENBQW1CLENBQUMsQ0FBQ3pEO1FBQ2pENEQsWUFBWSxDQUFDSSxPQUFTeG5CLGNBQWNMLGVBQWUsQ0FBQyxHQUFHNm5CLE9BQU87Z0JBQUVDLGNBQWNqRTtZQUFVO0lBQzFGLEdBQUcsRUFBRTtJQUNMLE1BQU1rRSx3QkFBd0JULDhDQUFtQixDQUFDLENBQUN6RDtRQUNqRDRELFlBQVksQ0FBQ0ksT0FBU3huQixjQUFjTCxlQUFlLENBQUMsR0FBRzZuQixPQUFPO2dCQUFFRyxjQUFjbkU7WUFBVTtJQUMxRixHQUFHLEVBQUU7SUFDTCxNQUFNb0UseUJBQXlCWCw4Q0FBbUIsQ0FBQyxDQUFDalI7UUFDbERvUixZQUFZLENBQUNJLE9BQVN4bkIsY0FBY0wsZUFBZSxDQUFDLEdBQUc2bkIsT0FBTztnQkFBRUssZUFBZTdSO1lBQVM7SUFDMUYsR0FBRyxFQUFFO0lBQ0wsTUFBTThSLHlCQUF5QmIsOENBQW1CLENBQUMsQ0FBQ2pSO1FBQ2xEb1IsWUFBWSxDQUFDSSxPQUFTeG5CLGNBQWNMLGVBQWUsQ0FBQyxHQUFHNm5CLE9BQU87Z0JBQUVPLGVBQWUvUjtZQUFTO0lBQzFGLEdBQUcsRUFBRTtJQUNMLE1BQU1nUyxlQUFlZiw4Q0FBbUIsQ0FBQyxDQUFDZ0I7UUFDeENiLFlBQVksQ0FBQ0ksT0FBU3huQixjQUFjTCxlQUFlLENBQUMsR0FBRzZuQixPQUFPO2dCQUFFUztZQUFTO0lBQzNFLEdBQUcsRUFBRTtJQUNMaEIsNENBQWlCLENBQUM7UUFDaEIsSUFBSWhPO1FBQ0orTix5RUFBZUEsQ0FBQ0csYUFBYSxDQUFDbE8sTUFBTWxOLFFBQVFtYyxXQUFXLEtBQUssT0FBT2pQLE1BQU07SUFDM0UsR0FBRztRQUFDa087UUFBYXBiLFFBQVFtYyxXQUFXO0tBQUM7SUFDckMsT0FBTztRQUNMZjtRQUNBSTtRQUNBRztRQUNBRTtRQUNBRTtRQUNBRTtJQUNGO0FBQ0Y7QUFFQSw4QkFBOEI7QUFDRztBQUNpQjtBQUNvQjtBQUN0RSxTQUFTTSxlQUFlamYsV0FBVztJQUNqQyxNQUFNSSxJQUFJRixxQkFBcUJGO0lBQy9CLE1BQU1XLE9BQU9EO0lBQ2IsTUFBTXpILFdBQVc2bEIsMENBQWUsQ0FBQyxJQUFNRSxvRkFBMEJBLENBQUNyZSxNQUFNUCxJQUFJO1FBQUNPO1FBQU1QO0tBQUU7SUFDckYsTUFBTThlLGNBQWN0akIsbUJBQ2xCM0MsVUFDQW1ILGFBQWEyZSw0REFBZ0JBLEdBQUczZSxFQUFFK2UsYUFBYSxHQUFHL2UsRUFBRThlLFdBQVc7SUFFakUsT0FBT0E7QUFDVDtBQUVBLDhCQUE4QjtBQUNHO0FBQ3FDO0FBR3BDO0FBQ2xDLElBQUlNLGlCQUFpQixDQUFDQyx1QkFBdUIvYyxVQUFVO0lBQUVnZCxTQUFTO0lBQUlDLHVCQUF1QjtBQUFFLENBQUM7SUFDOUYsTUFBTWxnQixRQUFROGYsMEVBQWlCQSxDQUFDRSx5QkFBeUJBLHNCQUFzQmxiLFdBQVcsQ0FBQzlFLEtBQUssR0FBR2dnQjtJQUNuRyxNQUFNLENBQUNHLFFBQVFDLFVBQVUsR0FBR1QsMkNBQWdCLENBQUM7SUFDN0NBLDRDQUFpQixDQUFDO1FBQ2hCLElBQUksQ0FBQzNmLFNBQVMsQ0FBQ0EsTUFBTXFnQixXQUFXLEVBQUU7WUFDaEM7UUFDRjtRQUNBLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxRQUFRLEVBQUUsR0FBR1YsbUVBQW1CQSxDQUFDN2YsT0FBT2lEO1FBQ3pELE1BQU11ZCxlQUFlRCxTQUFTRSxpQkFBaUI7UUFDL0MsTUFBTUMsWUFBWSxJQUFJQyxXQUFXSDtRQUNqQyxNQUFNSSxlQUFlO1lBQ25CTCxTQUFTTSxvQkFBb0IsQ0FBQ0g7WUFDOUIsSUFBSUksTUFBTTtZQUNWLElBQUssSUFBSXRtQixJQUFJLEdBQUdBLElBQUlrbUIsVUFBVWptQixNQUFNLEVBQUVELElBQUs7Z0JBQ3pDLE1BQU0xRCxJQUFJNHBCLFNBQVMsQ0FBQ2xtQixFQUFFO2dCQUN0QnNtQixPQUFPaHFCLElBQUlBO1lBQ2I7WUFDQXNwQixVQUFVbk8sS0FBSzhPLElBQUksQ0FBQ0QsTUFBTUosVUFBVWptQixNQUFNLElBQUk7UUFDaEQ7UUFDQSxNQUFNdW1CLFdBQVdDLFlBQVlMLGNBQWMsTUFBTTtRQUNqRCxPQUFPO1lBQ0xOO1lBQ0FZLGNBQWNGO1FBQ2hCO0lBQ0YsR0FBRztRQUFDaGhCO1FBQU9BLFNBQVMsT0FBTyxLQUFLLElBQUlBLE1BQU1xZ0IsV0FBVztRQUFFaFcsS0FBS0MsU0FBUyxDQUFDckg7S0FBUztJQUMvRSxPQUFPa2Q7QUFDVDtBQUNBLElBQUlnQix1QkFBdUIsQ0FBQ0M7SUFDMUIsTUFBTUMsY0FBYyxDQUFDNXFCO1FBQ25CLE1BQU02cUIsUUFBUSxDQUFDO1FBQ2YsTUFBTUMsUUFBUSxDQUFDO1FBQ2YsSUFBSUMsS0FBSyxJQUFJdlAsS0FBS0MsR0FBRyxDQUFDb1AsT0FBT3JQLEtBQUt3UCxHQUFHLENBQUNGLE9BQU85cUIsVUFBVSxDQUFDLElBQUk7UUFDNUQrcUIsS0FBS3ZQLEtBQUs4TyxJQUFJLENBQUNTO1FBQ2YsT0FBT0E7SUFDVDtJQUNBLE9BQU9KLFlBQVkvUyxHQUFHLENBQUMsQ0FBQzVYO1FBQ3RCLElBQUlBLFVBQVUsQ0FBQ2lyQixVQUFVO1lBQ3ZCLE9BQU87UUFDVDtRQUNBLE9BQU9MLFlBQVk1cUI7SUFDckI7QUFDRjtBQUNBLElBQUlrckIsb0JBQW9CO0lBQ3RCQyxPQUFPO0lBQ1BDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtRQUFFL0IsU0FBUztJQUFLO0FBQ25DO0FBQ0EsSUFBSWdDLDBCQUEwQixDQUFDakMsdUJBQXVCL2MsVUFBVSxDQUFDLENBQUM7SUFDaEUsSUFBSWxJO0lBQ0osTUFBTWlGLFFBQVFnZ0IsaUNBQWlDSixpREFBTUEsR0FBR0ksd0JBQXdCLENBQUNqbEIsS0FBS2lsQix5QkFBeUIsT0FBTyxLQUFLLElBQUlBLHNCQUFzQmxiLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSS9KLEdBQUdpRixLQUFLO0lBQzdMLE1BQU0sQ0FBQ2tpQixnQkFBZ0JDLGtCQUFrQixHQUFHeEMsMkNBQWdCLENBQUMsRUFBRTtJQUMvRCxNQUFNeUMsT0FBT3ZyQixlQUFlQSxlQUFlLENBQUMsR0FBRzhxQixvQkFBb0IxZTtJQUNuRTBjLDRDQUFpQixDQUFDO1FBQ2hCLElBQUksQ0FBQzNmLFNBQVMsQ0FBRUEsQ0FBQUEsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTXFnQixXQUFXLEdBQUc7WUFDM0Q7UUFDRjtRQUNBLE1BQU0sRUFBRUUsUUFBUSxFQUFFRCxPQUFPLEVBQUUsR0FBR1QsbUVBQW1CQSxDQUFDN2YsT0FBT29pQixLQUFLSixlQUFlO1FBQzdFLE1BQU14QixlQUFlRCxTQUFTRSxpQkFBaUI7UUFDL0MsTUFBTUMsWUFBWSxJQUFJMkIsYUFBYTdCO1FBQ25DLE1BQU1JLGVBQWU7WUFDbkJMLFNBQVMrQixxQkFBcUIsQ0FBQzVCO1lBQy9CLElBQUlVLGNBQWMsSUFBSWlCLGFBQWEzQixVQUFVam1CLE1BQU07WUFDbkQsSUFBSyxJQUFJRCxJQUFJLEdBQUdBLElBQUlrbUIsVUFBVWptQixNQUFNLEVBQUVELElBQUs7Z0JBQ3pDNG1CLFdBQVcsQ0FBQzVtQixFQUFFLEdBQUdrbUIsU0FBUyxDQUFDbG1CLEVBQUU7WUFDL0I7WUFDQTRtQixjQUFjQSxZQUFZeE8sS0FBSyxDQUFDM1AsUUFBUTRlLE1BQU0sRUFBRTVlLFFBQVE2ZSxNQUFNO1lBQzlELE1BQU1TLHdCQUF3QnBCLHFCQUFxQkM7WUFDbkQsTUFBTW9CLFlBQVl2USxLQUFLRSxJQUFJLENBQUNvUSxzQkFBc0I5bkIsTUFBTSxHQUFHMm5CLEtBQUtSLEtBQUs7WUFDckUsTUFBTWEsU0FBUyxFQUFFO1lBQ2pCLElBQUssSUFBSWpvQixJQUFJLEdBQUdBLElBQUk0bkIsS0FBS1IsS0FBSyxFQUFFcG5CLElBQUs7Z0JBQ25DLE1BQU1rb0IsZ0JBQWdCSCxzQkFBc0IzUCxLQUFLLENBQUNwWSxJQUFJZ29CLFdBQVcsQ0FBQ2hvQixJQUFJLEtBQUtnb0IsV0FBV0csTUFBTSxDQUFDLENBQUNDLEtBQUtDLE1BQVFELE9BQU9DLEtBQUs7Z0JBQ3ZISixPQUFPeG5CLElBQUksQ0FBQ3luQixnQkFBZ0JGO1lBQzlCO1lBQ0FMLGtCQUFrQk07UUFDcEI7UUFDQSxNQUFNekIsV0FBV0MsWUFBWUwsY0FBY3dCLEtBQUtMLGNBQWM7UUFDOUQsT0FBTztZQUNMekI7WUFDQVksY0FBY0Y7UUFDaEI7SUFDRixHQUFHO1FBQUNoaEI7UUFBT0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTXFnQixXQUFXO1FBQUVoVyxLQUFLQyxTQUFTLENBQUNySDtLQUFTO0lBQy9FLE9BQU9pZjtBQUNUO0FBRUEsNkNBQTZDO0FBQzdDLFNBQVNZLGVBQWV6Z0IsS0FBSztJQUMzQixNQUFNLEVBQUVHLFdBQVcsRUFBRSxHQUFHRCxrQkFBa0JGO0lBQzFDLE9BQU8sYUFBYSxpQkFBRzVKLGdEQUFxQixDQUFDLFVBQVU1QixlQUFlLENBQUMsR0FBRzJMLGNBQWNILE1BQU04TCxRQUFRO0FBQ3hHO0FBRUEscUNBQXFDO0FBQ0o7QUFDakMsU0FBUzhVLGlCQUFpQmxvQixFQUFFO0lBQzFCLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFbUcsSUFBSSxFQUFFLEdBQUd1RSxJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7S0FBTztJQUMxRCxNQUFNakMsa0JBQWtCRCxtQkFBbUJyQztJQUMzQyxPQUFPLGFBQWEsaUJBQUc4aEIsZ0RBQXFCLENBQUMsT0FBT25zQixlQUFlLENBQUMsR0FBR3dMLFFBQVFtQjtBQUNqRjtBQUVBLHlDQUF5QztBQUNSO0FBQ2pDLFNBQVMyZixXQUFXOWdCLEtBQUs7SUFDdkIsTUFBTSxFQUFFSyxXQUFXLEVBQUUsR0FBR3lWLGNBQWM7UUFBRTlWO0lBQU07SUFDOUMsT0FBTyxhQUFhLGlCQUFHNmdCLGdEQUFxQixDQUFDLFVBQVVyc0IsZUFBZSxDQUFDLEdBQUc2TCxjQUFjTCxNQUFNOEwsUUFBUTtBQUN4RztBQUVBLCtDQUErQztBQUNkO0FBQ2pDLFNBQVNrVixpQkFBaUJoaEIsS0FBSztJQUM3QixNQUFNLEVBQUVHLFdBQVcsRUFBRSxHQUFHK0Isb0JBQW9CbEM7SUFDNUMsT0FBTyxhQUFhLGlCQUFHK2dCLGdEQUFxQixDQUFDLFVBQVV2c0IsZUFBZSxDQUFDLEdBQUcyTCxjQUFjSCxNQUFNOEwsUUFBUTtBQUN4RztBQUVBLDBDQUEwQztBQUNUO0FBRWpDLDBDQUEwQztBQUNUO0FBQ2pDLElBQUlxVix3QkFBd0IsQ0FBQ25oQixRQUFVLGFBQWEsaUJBQUdraEIsZ0RBQXFCLENBQUMsT0FBTzFzQixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQWUsR0FBR3JoQixRQUFRLGFBQWEsaUJBQUdraEIsZ0RBQXFCLENBQUMsUUFBUTtRQUFFSSxHQUFHO0lBQW1NLElBQUksYUFBYSxpQkFBR0osZ0RBQXFCLENBQUMsUUFBUTtRQUFFSSxHQUFHO0lBQWlHO0FBQy9rQixJQUFJQyw2QkFBNkJKO0FBRWpDLGtDQUFrQztBQUNEO0FBQ2pDLElBQUlNLGdCQUFnQixDQUFDemhCLFFBQVUsYUFBYSxpQkFBR3doQixnREFBcUIsQ0FBQyxPQUFPaHRCLGVBQWU7UUFBRTRzQixPQUFPO1FBQThCN25CLE9BQU87UUFBSUMsUUFBUTtRQUFJNm5CLE1BQU07SUFBZSxHQUFHcmhCLFFBQVEsYUFBYSxpQkFBR3doQixnREFBcUIsQ0FBQyxRQUFRO1FBQUVGLEdBQUc7SUFBbU07QUFDL2EsSUFBSUkscUJBQXFCRDtBQUV6QixxQ0FBcUM7QUFDSjtBQUNqQyxJQUFJRyxtQkFBbUIsQ0FBQzVoQixRQUFVLGFBQWEsaUJBQUcyaEIsZ0RBQXFCLENBQUMsT0FBT250QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSXFvQixTQUFTO0lBQVksR0FBRzdoQixRQUFRLGFBQWEsaUJBQUcyaEIsZ0RBQXFCLENBQy9OLFFBQ0E7UUFDRU4sTUFBTTtRQUNOQyxHQUFHO0lBQ0w7QUFFRixJQUFJUSx3QkFBd0JGO0FBRTVCLGdDQUFnQztBQUNDO0FBQ2pDLElBQUlJLGNBQWMsQ0FBQ2hpQixRQUFVLGFBQWEsaUJBQUcraEIsZ0RBQXFCLENBQUMsT0FBT3Z0QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQU8sR0FBR3JoQixRQUFRLGFBQWEsaUJBQUcraEIsZ0RBQXFCLENBQ2xOLFFBQ0E7UUFDRVYsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaLElBQ0MsYUFBYSxpQkFBR0gsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRVYsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaO0FBRUYsSUFBSUMsbUJBQW1CSDtBQUV2QiwrQkFBK0I7QUFDRTtBQUNqQyxJQUFJSyxhQUFhLENBQUNyaUIsUUFBVSxhQUFhLGlCQUFHb2lCLGdEQUFxQixDQUFDLE9BQU81dEIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHb2lCLGdEQUFxQixDQUNqTixRQUNBO1FBQ0VmLE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7SUFDWjtBQUVGLElBQUlJLGtCQUFrQkQ7QUFFdEIsdUNBQXVDO0FBQ047QUFDakMsSUFBSUcscUJBQXFCLENBQUN4aUIsUUFBVSxhQUFhLGlCQUFHdWlCLGdEQUFxQixDQUFDLE9BQU8vdEIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHdWlCLGdEQUFxQixDQUFDLEtBQUs7UUFBRUUsUUFBUTtRQUFnQkMsZUFBZTtRQUFTQyxnQkFBZ0I7UUFBU0MsYUFBYTtJQUFJLEdBQUcsYUFBYSxpQkFBR0wsZ0RBQXFCLENBQUMsUUFBUTtRQUFFakIsR0FBRztJQUFnRTtBQUNuYixJQUFJdUIsMEJBQTBCTDtBQUU5QixnQ0FBZ0M7QUFDQztBQUNqQyxJQUFJTyxjQUFjLENBQUMvaUIsUUFBVSxhQUFhLGlCQUFHOGlCLGdEQUFxQixDQUFDLE9BQU90dUIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHOGlCLGdEQUFxQixDQUNsTixRQUNBO1FBQ0V6QixNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHWSxnREFBcUIsQ0FDdEMsUUFDQTtRQUNFekIsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaO0FBRUYsSUFBSWMsbUJBQW1CRDtBQUV2QixpQ0FBaUM7QUFDQTtBQUNqQyxJQUFJRyxlQUFlLENBQUNsakIsUUFBVSxhQUFhLGlCQUFHaWpCLGdEQUFxQixDQUFDLE9BQU96dUIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHaWpCLGdEQUFxQixDQUNuTixRQUNBO1FBQ0U1QixNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHZSxnREFBcUIsQ0FDdEMsUUFDQTtRQUNFNUIsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaO0FBRUYsSUFBSWlCLG9CQUFvQkQ7QUFFeEIsc0NBQXNDO0FBQ0w7QUFDakMsSUFBSUcsb0JBQW9CLENBQUNyakIsUUFBVSxhQUFhLGlCQUFHb2pCLGdEQUFxQixDQUFDLE9BQU81dUIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHb2pCLGdEQUFxQixDQUN4TixRQUNBO1FBQ0UvQixNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1o7QUFFRixJQUFJb0IseUJBQXlCRDtBQUU3Qix1Q0FBdUM7QUFDTjtBQUNqQyxJQUFJRyxxQkFBcUIsQ0FBQ3hqQixRQUFVLGFBQWEsaUJBQUd1akIsZ0RBQXFCLENBQUMsT0FBTy91QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQWUsR0FBR3JoQixRQUFRLGFBQWEsaUJBQUd1akIsZ0RBQXFCLENBQUMsUUFBUTtRQUFFakMsR0FBRztJQUFpWixJQUFJLGFBQWEsaUJBQUdpQyxnREFBcUIsQ0FBQyxRQUFRO1FBQUVqQyxHQUFHO0lBQWlEO0FBQzF1QixJQUFJbUMsMEJBQTBCRDtBQUU5QiwrQkFBK0I7QUFDRTtBQUNqQyxJQUFJRyxhQUFhLENBQUMzakIsUUFBVSxhQUFhLGlCQUFHMGpCLGdEQUFxQixDQUFDLE9BQU9sdkIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFlLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHMGpCLGdEQUFxQixDQUN6TixRQUNBO1FBQ0V6QixVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaLElBQ0MsYUFBYSxpQkFBR3dCLGdEQUFxQixDQUFDLFFBQVE7UUFBRXBDLEdBQUc7SUFBc0M7QUFDNUYsSUFBSXNDLGtCQUFrQkQ7QUFFdEIsNENBQTRDO0FBQ1g7QUFDakMsSUFBSUcsMEJBQTBCLENBQUM5akIsUUFBVSxhQUFhLGlCQUFHNmpCLGdEQUFxQixDQUFDLE9BQU9ydkIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFlLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHNmpCLGdEQUFxQixDQUFDLFFBQVE7UUFBRXZDLEdBQUc7SUFBaVAsSUFBSSxhQUFhLGlCQUFHdUMsZ0RBQXFCLENBQUMsUUFBUTtRQUFFdkMsR0FBRztJQUFpUDtBQUMvd0IsSUFBSXlDLCtCQUErQkQ7QUFFbkMsdUNBQXVDO0FBQ047QUFDakMsSUFBSUcscUJBQXFCLENBQUNqa0IsUUFBVSxhQUFhLGlCQUFHZ2tCLGdEQUFxQixDQUFDLE9BQU94dkIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFlLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHZ2tCLGdEQUFxQixDQUFDLFFBQVE7UUFBRTFDLEdBQUc7SUFBa0ssSUFBSSxhQUFhLGlCQUFHMEMsZ0RBQXFCLENBQUMsUUFBUTtRQUFFMUMsR0FBRztJQUFrSyxJQUFJLGFBQWEsaUJBQUcwQyxnREFBcUIsQ0FBQyxLQUFLO1FBQUVFLFNBQVM7SUFBSyxHQUFHLGFBQWEsaUJBQUdGLGdEQUFxQixDQUFDLFFBQVE7UUFBRTFDLEdBQUc7SUFBb0YsSUFBSSxhQUFhLGlCQUFHMEMsZ0RBQXFCLENBQUMsUUFBUTtRQUFFMUMsR0FBRztJQUFvRjtBQUNoOEIsSUFBSTZDLDBCQUEwQkY7QUFFOUIsdUNBQXVDO0FBQ047QUFDakMsSUFBSUkscUJBQXFCLENBQUNya0IsUUFBVSxhQUFhLGlCQUFHb2tCLGdEQUFxQixDQUFDLE9BQU81dkIsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFlLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHb2tCLGdEQUFxQixDQUFDLFFBQVE7UUFBRTlDLEdBQUc7SUFBb0YsSUFBSSxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQUMsUUFBUTtRQUFFOUMsR0FBRztJQUFvRixJQUFJLGFBQWEsaUJBQUc4QyxnREFBcUIsQ0FBQyxLQUFLO1FBQUVGLFNBQVM7SUFBSyxHQUFHLGFBQWEsaUJBQUdFLGdEQUFxQixDQUFDLFFBQVE7UUFBRTlDLEdBQUc7SUFBbUYsSUFBSSxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQUMsUUFBUTtRQUFFOUMsR0FBRztJQUFrSyxJQUFJLGFBQWEsaUJBQUc4QyxnREFBcUIsQ0FBQyxRQUFRO1FBQUU5QyxHQUFHO0lBQW9GO0FBQzUvQixJQUFJZ0QsMEJBQTBCRDtBQUU5QiwwQ0FBMEM7QUFDVDtBQUNqQyxJQUFJRyx3QkFBd0IsQ0FBQ3hrQixRQUFVLGFBQWEsaUJBQUd1a0IsZ0RBQXFCLENBQUMsT0FBTy92QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQWUsR0FBR3JoQixRQUFRLGFBQWEsaUJBQUd1a0IsZ0RBQXFCLENBQUMsS0FBSztRQUFFTCxTQUFTO0lBQUssR0FBRyxhQUFhLGlCQUFHSyxnREFBcUIsQ0FBQyxRQUFRO1FBQUVqRCxHQUFHO0lBQTBQLElBQUksYUFBYSxpQkFBR2lELGdEQUFxQixDQUFDLFFBQVE7UUFBRWpELEdBQUc7SUFBMFA7QUFDNzFCLElBQUltRCw2QkFBNkJEO0FBRWpDLHVDQUF1QztBQUNOO0FBQ2pDLElBQUlHLHFCQUFxQixDQUFDM2tCLFFBQVUsYUFBYSxpQkFBRzBrQixnREFBcUIsQ0FBQyxPQUFPbHdCLGVBQWU7UUFBRTRzQixPQUFPO1FBQThCN25CLE9BQU87UUFBSUMsUUFBUTtRQUFJNm5CLE1BQU07SUFBTyxHQUFHcmhCLFFBQVEsYUFBYSxpQkFBRzBrQixnREFBcUIsQ0FDek4sUUFDQTtRQUNFckQsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaLElBQ0MsYUFBYSxpQkFBR3dDLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0VyRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1o7QUFFRixJQUFJMEMsMEJBQTBCRDtBQUU5QiwyQ0FBMkM7QUFDVjtBQUNqQyxJQUFJRyx5QkFBeUIsQ0FBQzlrQixRQUFVLGFBQWEsaUJBQUc2a0IsZ0RBQXFCLENBQUMsT0FBT3J3QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQU8sR0FBR3JoQixRQUFRLGFBQWEsaUJBQUc2a0IsZ0RBQXFCLENBQUMsS0FBSztRQUFFeEQsTUFBTTtJQUFlLEdBQUcsYUFBYSxpQkFBR3dELGdEQUFxQixDQUFDLFFBQVE7UUFBRXZELEdBQUc7SUFBd0ssSUFBSSxhQUFhLGlCQUFHdUQsZ0RBQXFCLENBQ2pnQixRQUNBO1FBQ0U1QyxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtJQUNaO0FBRUYsSUFBSTZDLDhCQUE4QkQ7QUFFbEMsbUNBQW1DO0FBQ0Y7QUFDakMsSUFBSUcsaUJBQWlCLENBQUNqbEIsUUFBVSxhQUFhLGlCQUFHZ2xCLGdEQUFxQixDQUFDLE9BQU94d0IsZUFBZTtRQUFFNHNCLE9BQU87UUFBOEI3bkIsT0FBTztRQUFJQyxRQUFRO1FBQUk2bkIsTUFBTTtJQUFPLEdBQUdyaEIsUUFBUSxhQUFhLGlCQUFHZ2xCLGdEQUFxQixDQUNyTixRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRTNELE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7UUFDVmdDLFNBQVM7SUFDWCxJQUNDLGFBQWEsaUJBQUdjLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRTNELE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7UUFDVmdDLFNBQVM7SUFDWCxJQUNDLGFBQWEsaUJBQUdjLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRTNELE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7UUFDVmdDLFNBQVM7SUFDWCxJQUNDLGFBQWEsaUJBQUdjLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO0lBQ1osSUFDQyxhQUFhLGlCQUFHOEMsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRTNELE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7UUFDVmdDLFNBQVM7SUFDWCxJQUNDLGFBQWEsaUJBQUdjLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO1FBQ1ZnQyxTQUFTO0lBQ1gsSUFDQyxhQUFhLGlCQUFHYyxnREFBcUIsQ0FDdEMsUUFDQTtRQUNFM0QsTUFBTTtRQUNOWSxVQUFVO1FBQ1ZYLEdBQUc7UUFDSFksVUFBVTtRQUNWZ0MsU0FBUztJQUNYLElBQ0MsYUFBYSxpQkFBR2MsZ0RBQXFCLENBQ3RDLFFBQ0E7UUFDRTNELE1BQU07UUFDTlksVUFBVTtRQUNWWCxHQUFHO1FBQ0hZLFVBQVU7UUFDVmdDLFNBQVM7SUFDWCxJQUNDLGFBQWEsaUJBQUdjLGdEQUFxQixDQUN0QyxRQUNBO1FBQ0UzRCxNQUFNO1FBQ05ZLFVBQVU7UUFDVlgsR0FBRztRQUNIWSxVQUFVO1FBQ1ZnQyxTQUFTO0lBQ1g7QUFFRixJQUFJZ0Isc0JBQXNCRDtBQUUxQix5Q0FBeUM7QUFDUjtBQUNqQyxJQUFJRyx1QkFBdUIsQ0FBQ3BsQixRQUFVLGFBQWEsaUJBQUdtbEIsZ0RBQXFCLENBQUMsT0FBTzN3QixlQUFlO1FBQUU0c0IsT0FBTztRQUE4QjduQixPQUFPO1FBQUlDLFFBQVE7UUFBSTZuQixNQUFNO0lBQU8sR0FBR3JoQixRQUFRLGFBQWEsaUJBQUdtbEIsZ0RBQXFCLENBQUMsS0FBSztRQUFFMUMsUUFBUTtRQUFnQkMsZUFBZTtRQUFTQyxnQkFBZ0I7UUFBU0MsYUFBYTtJQUFJLEdBQUcsYUFBYSxpQkFBR3VDLGdEQUFxQixDQUFDLFFBQVE7UUFBRTdELEdBQUc7SUFBcUU7QUFDMWIsSUFBSStELDRCQUE0QkQ7QUFFaEMsMENBQTBDO0FBQzFDLFNBQVNFLFlBQVk1c0IsRUFBRTtJQUNyQixJQUFJMEssS0FBSzFLLElBQUksRUFBRW1GLFFBQVEsRUFBRW1GLFdBQVcsRUFBRTlFLFdBQVcsRUFBRSxHQUFHa0YsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUFDO1FBQVk7UUFBZTtLQUFjO0lBQzFILE1BQU1taUIsc0JBQXNCOW5CO0lBQzVCLE1BQU0sRUFBRTRDLFdBQVcsRUFBRTRDLE9BQU8sRUFBRSxHQUFHRixlQUFlO1FBQzlDbEYsVUFBVUEsWUFBWSxPQUFPQSxXQUFXMG5CO1FBQ3hDdmlCO1FBQ0E5RTtRQUNBOEI7SUFDRjtJQUNBLE9BQU8sYUFBYSxpQkFBR2loQixnREFBcUIsQ0FBQ2xsQixjQUFjeXBCLFFBQVEsRUFBRSxNQUFNLENBQUN0cEIsZ0JBQWtCQSxrQkFBa0IsS0FBSyxLQUFLLGFBQWEsaUJBQUcra0IsZ0RBQXFCLENBQUMsVUFBVXpzQixlQUFlLENBQUMsR0FBRzZMLGNBQWNMLE1BQU04TCxRQUFRLEdBQUc5TCxNQUFNOEwsUUFBUSxHQUFHN0ksVUFBVSxhQUFhLGlCQUFHZ2UsZ0RBQXFCLENBQUNvRSwyQkFBMkIsUUFBUSxhQUFhLGlCQUFHcEUsZ0RBQXFCLENBQUM0Qix5QkFBeUI7QUFDalk7QUFFQSxnREFBZ0Q7QUFDZjtBQUN3QjtBQUN6RCxTQUFTOEMsa0JBQWtCanRCLEVBQUU7SUFDM0IsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1gwUixJQUFJLEVBQ0p3YixnQkFBZ0IsRUFDaEJDLG9CQUFvQixFQUNwQkMsa0JBQWtCLEVBQ2xCQyxtQkFBbUIsRUFDbkJDLFVBQVUsRUFDVnJvQixLQUFLLEVBQ0wwTSxrQkFBa0IsRUFDbEJsRSxPQUFPLEVBQ1IsR0FBRy9DLElBQUlwRCxRQUFRbEwsVUFBVXNPLElBQUk7UUFDNUI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxNQUFNdkUsT0FBT0Y7SUFDYixNQUFNc25CLGNBQWNSLDhDQUFtQixDQUNyQyxDQUFDNXZCO1FBQ0MsSUFBSWdKLE1BQU07WUFDUkEsS0FBS3FuQixJQUFJLENBQUNSLHFEQUFVQSxDQUFDaGUsaUJBQWlCLEVBQUU3UjtRQUMxQztRQUNBc1EsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUXRRO0lBQ3JDLEdBQ0E7UUFBQ2dKO1FBQU1zSDtLQUFRO0lBRWpCLE1BQU0sRUFBRXFFLE9BQU8sRUFBRU0sY0FBYyxFQUFFRixvQkFBb0IsRUFBRXhLLFNBQVMsRUFBRSxHQUFHK0oscUJBQXFCO1FBQ3hGQztRQUNBdkw7UUFDQWxCO1FBQ0EwTTtRQUNBbEUsU0FBUzhmO0lBQ1g7SUFDQVIsNENBQWlCLENBQUM7UUFDaEIsSUFBSUcscUJBQXFCLEtBQUssR0FBRztZQUMvQmhiLHFCQUFxQmdiO1FBQ3ZCO0lBQ0YsR0FBRztRQUFDaGI7S0FBcUI7SUFDekI2YSw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJLE9BQU9LLHVCQUF1QixZQUFZO1lBQzVDQSxtQkFBbUJ0YjtRQUNyQjtJQUNGLEdBQUc7UUFBQ3NiO1FBQW9CdGI7S0FBUTtJQUNoQ2liLDRDQUFpQixDQUFDO1FBQ2hCLElBQUkzYSxrQkFBa0JBLG1CQUFtQixJQUFJO1lBQzNDK2Esd0JBQXdCLE9BQU8sS0FBSyxJQUFJQSxxQkFBcUIvYTtRQUMvRDtJQUNGLEdBQUc7UUFBQ0E7S0FBZTtJQUNuQixNQUFNcWIsMkJBQTJCLENBQUN0YixXQUFhMVYsUUFBUSxJQUFJLEVBQUUsTUFBTTtZQUNqRSxJQUFJO2dCQUNGLE1BQU15VixxQkFBcUJDLFVBQVU7b0JBQUV1YixPQUFPSjtnQkFBVztZQUMzRCxFQUFFLE9BQU9ud0IsR0FBRztnQkFDVixJQUFJQSxhQUFhdUcsT0FBTztvQkFDdEIycEIsdUJBQXVCLE9BQU8sS0FBSyxJQUFJQSxvQkFBb0Jsd0I7Z0JBQzdELE9BQU87b0JBQ0wsTUFBTUE7Z0JBQ1I7WUFDRjtRQUNGO0lBQ0EsTUFBTXdLLGNBQWNvbEIsMENBQWUsQ0FDakMsSUFBTTlaLFlBQVkzTCxPQUFPO1lBQUVJO1FBQVUsR0FBRztZQUFFQSxXQUFXO1FBQVUsSUFDL0Q7UUFBQ0E7UUFBV0o7S0FBTTtJQUVwQixTQUFTcW1CLFNBQVN4YixRQUFRLEVBQUV5YixlQUFlLEVBQUVDLEtBQUs7UUFDaEQsT0FBTzFiLGFBQWF5YixtQkFBbUJDLFVBQVUsS0FBS0Qsb0JBQW9CO0lBQzVFO0lBQ0EsT0FBTyxhQUFhLGlCQUFHYixnREFBcUIsQ0FBQyxNQUFNanhCLGVBQWUsQ0FBQyxHQUFHNkwsY0FBY21LLFFBQVF3QixHQUFHLENBQUMsQ0FBQ3dhLFFBQVFELFFBQVUsYUFBYSxpQkFBR2QsZ0RBQXFCLENBQ3RKLE1BQ0E7WUFDRXR4QixLQUFLcXlCLE9BQU8zYixRQUFRO1lBQ3BCNGIsSUFBSUQsT0FBTzNiLFFBQVE7WUFDbkIsa0JBQWtCd2IsU0FBU0csT0FBTzNiLFFBQVEsRUFBRUMsZ0JBQWdCeWI7WUFDNUQsaUJBQWlCRixTQUFTRyxPQUFPM2IsUUFBUSxFQUFFQyxnQkFBZ0J5YjtZQUMzREcsTUFBTTtRQUNSLEdBQ0EsYUFBYSxpQkFBR2pCLGdEQUFxQixDQUFDLFVBQVU7WUFBRXJsQixXQUFXO1lBQWFHLFNBQVMsSUFBTTRsQix5QkFBeUJLLE9BQU8zYixRQUFRO1FBQUUsR0FBRzJiLE9BQU9HLEtBQUs7QUFFdEo7QUFFQSx5Q0FBeUM7QUFDUjtBQUNqQyxTQUFTRSxXQUFXbnVCLEVBQUU7SUFDcEIsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQUVpdUIsUUFBUSxhQUFhLEVBQUUsR0FBR3ZqQixJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7S0FBUTtJQUM1RSxNQUFNdkUsT0FBT0o7SUFDYixNQUFNLEVBQUU0QixXQUFXLEVBQUUsR0FBRzJULGNBQWM7UUFBRW5WO1FBQU1tQjtJQUFNO0lBQ3BELE9BQU8sYUFBYSxpQkFBRzRtQixnREFBcUIsQ0FBQyxVQUFVcHlCLGVBQWUsQ0FBQyxHQUFHNkwsY0FBY3NtQjtBQUMxRjtBQUVBLDBDQUEwQztBQUNUO0FBRWpDLDRCQUE0QjtBQUNLO0FBQ3lEO0FBQzFGLFNBQVNPLGNBQWNueUIsTUFBTSxFQUFFcWpCLE9BQU87SUFDcEMsT0FBUXJqQjtRQUNOLEtBQUtreUIsaURBQU1BLENBQUNuVixNQUFNLENBQUNHLFVBQVU7WUFDM0IsT0FBT21HLFVBQVUsYUFBYSxpQkFBRzJPLGdEQUFxQixDQUFDbkQsaUJBQWlCLFFBQVEsYUFBYSxpQkFBR21ELGdEQUFxQixDQUFDdEQseUJBQXlCO1FBQ2pKLEtBQUt3RCxpREFBTUEsQ0FBQ25WLE1BQU0sQ0FBQ0MsTUFBTTtZQUN2QixPQUFPcUcsVUFBVSxhQUFhLGlCQUFHMk8sZ0RBQXFCLENBQUNyRixvQkFBb0IsUUFBUSxhQUFhLGlCQUFHcUYsZ0RBQXFCLENBQUN4Riw0QkFBNEI7UUFDdkosS0FBSzBGLGlEQUFNQSxDQUFDblYsTUFBTSxDQUFDcUgsV0FBVztZQUM1QixPQUFPZixVQUFVLGFBQWEsaUJBQUcyTyxnREFBcUIsQ0FBQ2hDLDZCQUE2QixRQUFRLGFBQWEsaUJBQUdnQyxnREFBcUIsQ0FBQ25DLHlCQUF5QjtRQUM3SjtZQUNFLE9BQU8sS0FBSztJQUNoQjtBQUNGO0FBQ0EsU0FBU3VDLHlCQUF5QnJtQixPQUFPO0lBQ3ZDLE9BQVFBO1FBQ04sS0FBS2ttQiw2REFBa0JBLENBQUNJLFNBQVM7WUFDL0IsT0FBTyxhQUFhLGlCQUFHTCxnREFBcUIsQ0FBQ2hELDhCQUE4QjtRQUM3RSxLQUFLaUQsNkRBQWtCQSxDQUFDSyxJQUFJO1lBQzFCLE9BQU8sYUFBYSxpQkFBR04sZ0RBQXFCLENBQUM1Qyx5QkFBeUI7UUFDeEUsS0FBSzZDLDZEQUFrQkEsQ0FBQ00sSUFBSTtZQUMxQixPQUFPLGFBQWEsaUJBQUdQLGdEQUFxQixDQUFDekMseUJBQXlCO1FBQ3hFO1lBQ0UsT0FBTyxhQUFhLGlCQUFHeUMsZ0RBQXFCLENBQUN0Qyw0QkFBNEI7SUFDN0U7QUFDRjtBQUVBLDBDQUEwQztBQUMxQyxTQUFTOEMsWUFBWTd1QixFQUFFO0lBQ3JCLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFOHVCLFFBQVEsRUFBRSxHQUFHcGtCLElBQUlwRCxRQUFRbEwsVUFBVXNPLElBQUk7UUFBQztLQUFXO0lBQ2xFLE1BQU0sRUFBRWpELFdBQVcsRUFBRWlZLE9BQU8sRUFBRSxHQUFHVCxlQUFlM1g7SUFDaEQsT0FBTyxhQUFhLGlCQUFHOG1CLGdEQUFxQixDQUFDLFVBQVV0eUIsZUFBZSxDQUFDLEdBQUcyTCxjQUFjLENBQUNxbkIsWUFBWSxPQUFPQSxXQUFXLElBQUcsS0FBTU4sY0FBY2xuQixNQUFNakwsTUFBTSxFQUFFcWpCLFVBQVVwWSxNQUFNOEwsUUFBUTtBQUN0TDtBQUVBLHdDQUF3QztBQUNQO0FBRWpDLGlEQUFpRDtBQUNoQjtBQUNnQjtBQUNtRjtBQUVwSSw0REFBNEQ7QUFDM0I7QUFDakMsU0FBU2ljLDJCQUEyQi9uQixLQUFLO0lBQ3ZDLElBQUl0SDtJQUNKLE1BQU0sRUFBRTBILFNBQVMsRUFBRVUsT0FBTyxFQUFFLEdBQUdILDhCQUE4Qlg7SUFDN0QsTUFBTW9PLGVBQWUwWiwwQ0FBZSxDQUFDO1FBQ25DLE9BQU9qekIsY0FBY0wsZUFBZSxDQUFDLEdBQUdtWCxZQUFZM0wsT0FBTztZQUFFSTtRQUFVLEtBQUs7WUFBRSxtQkFBbUJVO1FBQVE7SUFDM0csR0FBRztRQUFDQTtRQUFTZDtRQUFPSTtLQUFVO0lBQzlCLE9BQU8sYUFBYSxpQkFBRzBuQixnREFBcUIsQ0FBQyxPQUFPdHpCLGVBQWUsQ0FBQyxHQUFHNFosZUFBZSxDQUFDMVYsS0FBS3NILE1BQU04TCxRQUFRLEtBQUssT0FBT3BULEtBQUt5dUIseUJBQXlCcm1CO0FBQ3RKO0FBRUEsaURBQWlEO0FBQ2U7QUFDL0I7QUFDakMsU0FBU29uQixnQkFBZ0J4dkIsRUFBRTtJQUN6QixJQUFJMEssS0FBSzFLLElBQUksRUFBRXdGLFdBQVcsRUFBRSxHQUFHa0YsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUFDO0tBQWM7SUFDeEUsTUFBTTlFLElBQUlGLHFCQUFxQkY7SUFDL0IsTUFBTSxFQUFFa0MsU0FBUyxFQUFFMlEsWUFBWSxFQUFFLEdBQUdrWCwwQ0FBZSxDQUFDO1FBQ2xELE9BQU9ELDhFQUFvQkEsQ0FBQzFwQjtJQUM5QixHQUFHO1FBQUNBO0tBQUU7SUFDTixNQUFNLEVBQUVxUCxRQUFRLEVBQUVZLElBQUksRUFBRSxHQUFHelUsbUJBQW1CaVgsY0FBYztRQUMxRHhDLE1BQU1qUSxFQUFFaVEsSUFBSTtRQUNaWixVQUFVclAsRUFBRXFQLFFBQVE7UUFDcEJxRCxVQUFVMVMsRUFBRTBTLFFBQVE7SUFDdEI7SUFDQSxNQUFNM1EsY0FBYzRuQiwwQ0FBZSxDQUFDO1FBQ2xDLE9BQU90YyxZQUFZM0wsT0FBTztZQUFFSTtZQUFXLDRCQUE0Qm1PO1FBQUs7SUFDMUUsR0FBRztRQUFDdk87UUFBT0k7UUFBV21PO0tBQUs7SUFDM0IsT0FBTyxhQUFhLGlCQUFHMFosZ0RBQXFCLENBQUMsUUFBUXp6QixlQUFlLENBQUMsR0FBRzZMLGNBQWNrTyxTQUFTLEtBQUtBLE9BQU9aLFVBQVUzTixNQUFNOEwsUUFBUTtBQUNySTtBQUVBLHFEQUFxRDtBQUNwQjtBQUNqQyxTQUFTc2Msb0JBQW9CMXZCLEVBQUU7SUFDN0IsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1gzRCxNQUFNLEVBQ05tSixXQUFXLEVBQ1hMLFFBQVEsRUFDUndxQixPQUFPLFFBQVEsRUFDaEIsR0FBR2psQixJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQzVCO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxJQUFJMEssS0FBS3dhO0lBQ1QsTUFBTSxFQUFFbG9CLFNBQVMsRUFBRXFFLE9BQU8sRUFBRSxHQUFHMlMsdUJBQXVCdlosWUFBWSxPQUFPQSxXQUFXOUksUUFBUTtRQUFFbUo7SUFBWTtJQUMxRyxNQUFNcXFCLGdCQUFnQkYsU0FBUyxZQUFZQSxTQUFTLFdBQVc1akIsV0FBVzRqQixTQUFTLGFBQWEsQ0FBQzVqQjtJQUNqRyxNQUFNaUMsWUFBWXloQiwwQ0FBZSxDQUMvQixJQUFNeGMsWUFBWTNMLE9BQU87WUFDdkJJO1FBQ0YsSUFDQTtRQUFDQTtRQUFXSjtLQUFNO0lBRXBCLElBQUksQ0FBQ3VvQixlQUFlO1FBQ2xCLE9BQU87SUFDVDtJQUNBLE9BQU8sYUFBYSxpQkFBR0osZ0RBQXFCLENBQUMsT0FBT3R6QixjQUFjTCxlQUFlLENBQUMsR0FBR2tTLFlBQVk7UUFBRSxpQkFBaUJqQztJQUFRLElBQUksQ0FBQzZqQixNQUFNdG9CLE1BQU04TCxRQUFRLEtBQUssT0FBT3djLE1BQU1wQixjQUFjLENBQUNwWixNQUFNalEsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzlJLE1BQU0sS0FBSyxPQUFPK1ksTUFBTS9ZLFFBQVEsQ0FBQzBQO0FBQ3BRO0FBRUEsK0NBQStDO0FBQ2Q7QUFDakMsSUFBSWdrQiw0QkFBNEIsQ0FBQ3pvQixRQUFVLGFBQWEsaUJBQUd3b0IsZ0RBQXFCLENBQzlFLE9BQ0FoMEIsZUFBZTtRQUNiK0UsT0FBTztRQUNQQyxRQUFRO1FBQ1Jxb0IsU0FBUztRQUNUNkcscUJBQXFCO1FBQ3JCckgsTUFBTTtRQUNORCxPQUFPO0lBQ1QsR0FBR3BoQixRQUNILGFBQWEsaUJBQUd3b0IsZ0RBQXFCLENBQ25DLFFBQ0E7UUFDRWxILEdBQUc7UUFDSEQsTUFBTTtRQUNOc0gsYUFBYTtJQUNmLElBRUYsYUFBYSxpQkFBR0gsZ0RBQXFCLENBQ25DLFFBQ0E7UUFDRWxILEdBQUc7UUFDSEQsTUFBTTtRQUNOc0gsYUFBYTtJQUNmO0FBR0osSUFBSUMsaUNBQWlDSDtBQUVyQyw0Q0FBNEM7QUFHcEI7QUFDUztBQUNPO0FBQ3hDLFNBQVNPLFdBQVd0d0IsRUFBRTtJQUNwQixJQUFJMEssS0FBSzFLLElBQUksRUFDWHV3QixZQUFZLEVBQ1oxb0IsT0FBTyxFQUNQMm9CLDJCQUEyQixFQUMzQnJyQixRQUFRLEVBQ1IwUSxJQUFJLEVBQ0o5TCxXQUFXLEVBQ1gxTixNQUFNLEVBQ05tSixhQUFhSSxDQUFDLEVBQ2Q2cUIsa0JBQWtCLEVBQ25CLEdBQUcvbEIsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELElBQUkwSyxLQUFLd2EsS0FBS2psQixJQUFJQyxJQUFJQyxJQUFJb08sSUFBSXlYLElBQUlDLElBQUlDLElBQUlDO0lBQzFDLE1BQU03WCxnQkFBZ0JqVTtJQUN0QixNQUFNK3JCLFFBQVEsQ0FBQ2xtQixLQUFLLENBQUNELEtBQUssQ0FBQ3lLLE1BQU1qUSxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTNEUsV0FBVyxLQUFLLE9BQU8sS0FBSyxJQUFJcUwsSUFBSTJiLFNBQVMsS0FBSyxPQUFPcG1CLEtBQUssQ0FBQ2lsQixNQUFNNVcsaUJBQWlCLE9BQU8sS0FBSyxJQUFJQSxjQUFjalAsV0FBVyxLQUFLLE9BQU8sS0FBSyxJQUFJNmxCLElBQUltQixTQUFTLEtBQUssT0FBT25tQixLQUFLaUw7SUFDeFAsTUFBTXFELFVBQVUsQ0FBQ0QsS0FBSyxDQUFDcE8sS0FBSzFGLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVM5SSxNQUFNLEtBQUssT0FBT3dPLEtBQUttTyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWMzYyxNQUFNLEtBQUssT0FBTzRjLEtBQUs1YztJQUM5SixNQUFNMjBCLGVBQWUsQ0FBQ0wsS0FBSyxDQUFDRCxLQUFLdnJCLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVM0RSxXQUFXLEtBQUssT0FBTzJtQixLQUFLMVgsaUJBQWlCLE9BQU8sS0FBSyxJQUFJQSxjQUFjalAsV0FBVyxLQUFLLE9BQU80bUIsS0FBSzVtQjtJQUM3SyxNQUFNa25CLGVBQWUsQ0FBQ0osS0FBSyxDQUFDRCxLQUFLenJCLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVNLLFdBQVcsS0FBSyxPQUFPb3JCLEtBQUs1WCxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWN4VCxXQUFXLEtBQUssT0FBT3FyQixLQUFLanJCO0lBQzdLLElBQUlzVCxZQUFZLEtBQUssR0FBRztRQUN0QixNQUFNLElBQUl4VixNQUFNO0lBQ2xCO0lBQ0EsTUFBTThCLGNBQWNFLHFCQUFxQnVyQjtJQUN6QyxNQUFNQyxVQUFVZCx5Q0FBYyxDQUFDO0lBQy9CLE1BQU1lLG9CQUFvQmQsZ0VBQWdDLENBQUNhLFNBQVMsQ0FBQztJQUNyRSxNQUFNRyw2QkFBNkJoQixvREFBb0IsQ0FBQ2MsbUJBQW1CO0lBQzNFZiw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJSyxzQkFBc0JPLHdCQUF3QmIsa0VBQXNCQSxJQUFJLENBQUNrQiw4QkFBOEIsT0FBTyxLQUFLLElBQUlBLDJCQUEyQkUsY0FBYyxNQUFNLFNBQVMsQ0FBQ0oscUJBQXFCLE9BQU8sS0FBSyxJQUFJQSxrQkFBa0JJLGNBQWMsTUFBTSxPQUFPO1lBQ3BRUCxhQUFhdmMsYUFBYSxDQUFDO1FBQzdCO0lBQ0YsR0FBRztRQUFDNGM7UUFBNEJMO1FBQWNQO0tBQW1CO0lBQ2pFTCw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJSyxzQkFBc0JPLHdCQUF3QmIsa0VBQXNCQSxJQUFJLENBQUNnQixxQkFBcUIsT0FBTyxLQUFLLElBQUlBLGtCQUFrQkksY0FBYyxNQUFNLE1BQU07WUFDNUpQLGFBQWF2YyxhQUFhLENBQUM7UUFDN0I7SUFDRixHQUFHO1FBQUMwYztRQUFtQkg7UUFBY1A7S0FBbUI7SUFDeEQsTUFBTSxFQUNKL2EsWUFBWSxFQUNaM0wsYUFBYXVZLEdBQUcsRUFDaEI5TixZQUFZLEVBQ2IsR0FBR0osNEJBQ0Y7UUFBRTVPO1FBQWFxUSxNQUFNaWI7UUFBT3owQixRQUFRNmM7UUFBU25QLGFBQWFpbkI7SUFBYSxHQUN2RTtRQUNFMWIsU0FBUzRiO1FBQ1Q1cEI7SUFDRjtJQUVGOG9CLDRDQUFpQixDQUFDO1FBQ2hCSSwrQkFBK0IsT0FBTyxLQUFLLElBQUlBLDRCQUE0QixDQUFDLENBQUNoYztJQUMvRSxHQUFHO1FBQUNBO1FBQWNnYztLQUE0QjtJQUM5QyxNQUFNM1EsZUFBZSxDQUFDQztRQUNwQmpZLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFpWTtRQUNuQ3lRLGdCQUFnQixPQUFPLEtBQUssSUFBSUEsYUFBYTtZQUFFL3FCO1lBQWFQLE9BQU9xZDtRQUFJO0lBQ3pFO0lBQ0EsT0FBTyxhQUFhLGlCQUFHOE4sZ0RBQXFCLENBQUMsU0FBU2owQixjQUFjTCxlQUFlO1FBQUV1SixLQUFLNnJCO0lBQVEsR0FBR3hiLGVBQWU7UUFBRThiLE9BQU87UUFBTTNwQixTQUFTZ1k7SUFBYTtBQUMzSjtBQUVBLDRDQUE0QztBQUNYO0FBQ3NCO0FBQzhDO0FBQ3JHLFNBQVNnUyxXQUFXN3hCLEVBQUU7SUFDcEIsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1htRixRQUFRLEVBQ1JxckIsMkJBQTJCLEVBQzNCcEwsTUFBTSxFQUNOL29CLE1BQU0sRUFDTndaLElBQUksRUFDSjlMLFdBQVcsRUFDWHZFLGFBQWFJLENBQUMsRUFDZixHQUFHOEUsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsSUFBSTBLLEtBQUt3YSxLQUFLamxCLElBQUlDLElBQUlDLElBQUlvTyxJQUFJeVgsSUFBSUMsSUFBSUMsSUFBSUM7SUFDMUMsTUFBTTdYLGdCQUFnQmpVO0lBQ3RCLE1BQU0rckIsUUFBUSxDQUFDbG1CLEtBQUssQ0FBQ0QsS0FBSyxDQUFDeUssTUFBTWpRLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVM0RSxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUlxTCxJQUFJMmIsU0FBUyxLQUFLLE9BQU9wbUIsS0FBSyxDQUFDaWxCLE1BQU01VyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNqUCxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUk2bEIsSUFBSW1CLFNBQVMsS0FBSyxPQUFPbm1CLEtBQUtpTDtJQUN4UCxNQUFNcUQsVUFBVSxDQUFDRCxLQUFLLENBQUNwTyxLQUFLMUYsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzlJLE1BQU0sS0FBSyxPQUFPd08sS0FBS21PLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBYzNjLE1BQU0sS0FBSyxPQUFPNGMsS0FBSzVjO0lBQzlKLE1BQU0yMEIsZUFBZSxDQUFDTCxLQUFLLENBQUNELEtBQUt2ckIsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzRFLFdBQVcsS0FBSyxPQUFPMm1CLEtBQUsxWCxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNqUCxXQUFXLEtBQUssT0FBTzRtQixLQUFLNW1CO0lBQzdLLE1BQU1rbkIsZUFBZSxDQUFDSixLQUFLLENBQUNELEtBQUt6ckIsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBU0ssV0FBVyxLQUFLLE9BQU9vckIsS0FBSzVYLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY3hULFdBQVcsS0FBSyxPQUFPcXJCLEtBQUtqckI7SUFDN0ssSUFBSXNULFlBQVksS0FBSyxHQUFHO1FBQ3RCLE1BQU0sSUFBSXhWLE1BQU07SUFDbEI7SUFDQSxNQUFNd3RCLFVBQVVPLHlDQUFjLENBQUM7SUFDL0IsTUFBTWpzQixjQUFjRSxxQkFBcUJ1ckI7SUFDekMsTUFBTSxFQUNKdmIsWUFBWSxFQUNabEIsWUFBWSxFQUNadlAsS0FBSyxFQUNMOEUsYUFBYXVZLEdBQUcsRUFDakIsR0FBR2xPLDRCQUNGO1FBQUUvWCxRQUFRNmM7UUFBU3JELE1BQU1pYjtRQUFPdHJCO1FBQWF1RSxhQUFhaW5CO0lBQWEsR0FDdkU7UUFDRTFiLFNBQVM0YjtRQUNUNXBCO0lBQ0Y7SUFFRm1xQiw0Q0FBaUIsQ0FBQztRQUNoQmpCLCtCQUErQixPQUFPLEtBQUssSUFBSUEsNEJBQTRCLENBQUMsQ0FBQ2hjO0lBQy9FLEdBQUc7UUFBQ0E7UUFBY2djO0tBQTRCO0lBQzlDaUIsNENBQWlCLENBQUM7UUFDaEIsSUFBSXhzQixVQUFVLEtBQUssS0FBS21nQixXQUFXLEtBQUssR0FBRztZQUN6QztRQUNGO1FBQ0EsSUFBSW5nQixpQkFBaUIwc0IsNERBQWdCQSxFQUFFO1lBQ3JDMXNCLE1BQU1vZ0IsU0FBUyxDQUFDRDtRQUNsQixPQUFPO1lBQ0xzTSx5REFBSUEsQ0FBQzVqQixJQUFJLENBQUM7UUFDWjtJQUNGLEdBQUc7UUFBQ3NYO1FBQVFuZ0I7S0FBTTtJQUNsQndzQiw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJblAsUUFBUSxLQUFLLEtBQUtoYixNQUFNa3FCLEtBQUssS0FBSyxLQUFLLEdBQUc7WUFDNUM7UUFDRjtRQUNBLElBQUlsUCxlQUFlc1Asa0VBQXVCQSxFQUFFO1lBQzFDdFAsSUFBSXdQLFVBQVUsQ0FBQyxDQUFDeHFCLE1BQU1rcUIsS0FBSztRQUM3QixPQUFPO1lBQ0xFLHlEQUFJQSxDQUFDNWpCLElBQUksQ0FBQztRQUNaO0lBQ0YsR0FBRztRQUFDeEcsTUFBTWtxQixLQUFLO1FBQUVsUDtRQUFLcmQ7S0FBTTtJQUM1QixPQUFPLGFBQWEsaUJBQUd3c0IsZ0RBQXFCLENBQUMsU0FBUzMxQixlQUFlO1FBQUV1SixLQUFLNnJCO0lBQVEsR0FBR3hiO0FBQ3pGO0FBRUEsaURBQWlEO0FBQ2pELFNBQVNxYywyQkFBMkJ6cUIsS0FBSztJQUN2QyxNQUFNMHFCLGFBQWEsQ0FBQyxDQUFDdnNCO0lBQ3JCLE9BQU82QixNQUFNOUIsV0FBVyxJQUFJLENBQUN3c0IsYUFBYSxhQUFhLGlCQUFHaEQsZ0RBQXFCLENBQUMxcEIsbUJBQW1CMnNCLFFBQVEsRUFBRTtRQUFFdjJCLE9BQU80TCxNQUFNOUIsV0FBVztJQUFDLEdBQUc4QixNQUFNOEwsUUFBUSxJQUFJLGFBQWEsaUJBQUc0YixnREFBcUIsQ0FBQ0EsMkNBQWdCLEVBQUUsTUFBTTFuQixNQUFNOEwsUUFBUTtBQUMzTztBQUNBLFNBQVMrZSx3QkFBd0I3cUIsS0FBSztJQUNwQyxNQUFNMHFCLGFBQWEsQ0FBQyxDQUFDanRCO0lBQ3JCLE9BQU91QyxNQUFNbkMsUUFBUSxJQUFJLENBQUM2c0IsYUFBYSxhQUFhLGlCQUFHaEQsZ0RBQXFCLENBQUN0cUIsZ0JBQWdCdXRCLFFBQVEsRUFBRTtRQUFFdjJCLE9BQU80TCxNQUFNbkMsUUFBUTtJQUFDLEdBQUdtQyxNQUFNOEwsUUFBUSxJQUFJLGFBQWEsaUJBQUc0YixnREFBcUIsQ0FBQ0EsMkNBQWdCLEVBQUUsTUFBTTFuQixNQUFNOEwsUUFBUTtBQUNsTztBQUNBLFNBQVNnZixnQkFBZ0JweUIsRUFBRTtJQUN6QixJQUFJMEssS0FBSzFLLElBQUksRUFDWG1GLFFBQVEsRUFDUkssV0FBVyxFQUNYNE4sUUFBUSxFQUNSL1csU0FBUzR5QixpREFBTUEsQ0FBQzdWLE1BQU0sQ0FBQ0MsTUFBTSxFQUM3QlAsa0JBQWtCLEVBQ2xCL08sV0FBVyxFQUNYZ1Asd0JBQXdCLEVBQ3pCLEdBQUdyTyxJQUFJc0QsWUFBWTVSLFVBQVVzTyxJQUFJO1FBQ2hDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxJQUFJMEssS0FBS3dhO0lBQ1QsTUFBTTVXLGdCQUFnQmpVO0lBQ3RCLE1BQU1hLElBQUlGLHFCQUFxQkY7SUFDL0IsTUFBTXBDLGlCQUFpQjRyQiwwQ0FBZSxDQUFDO1FBQ3JDLElBQUlqUCxLQUFLc1MsS0FBSzFuQixJQUFJQyxJQUFJQyxJQUFJb087UUFDMUIsT0FBTztZQUNMelQsYUFBYSxDQUFDNnNCLE1BQU0sQ0FBQ3RTLE1BQU01YSxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTSyxXQUFXLEtBQUssT0FBT3VhLE1BQU0vRyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWN4VCxXQUFXLEtBQUssT0FBTzZzQixNQUFNenNCO1lBQ3pLdkosUUFBUSxDQUFDdU8sS0FBSyxDQUFDRCxLQUFLeEYsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzlJLE1BQU0sS0FBSyxPQUFPc08sS0FBS3FPLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBYzNjLE1BQU0sS0FBSyxPQUFPdU8sS0FBS3ZPO1lBQ3RKME4sYUFBYSxDQUFDa1AsS0FBSyxDQUFDcE8sS0FBSzFGLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVM0RSxXQUFXLEtBQUssT0FBT2MsS0FBS21PLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY2pQLFdBQVcsS0FBSyxPQUFPa1AsS0FBS2xQO1FBQ3ZLO0lBQ0YsR0FBRztRQUFDaVA7UUFBZXBUO1FBQUdtRTtRQUFhMU47UUFBUThJO0tBQVM7SUFDcEQsTUFBTSxFQUFFdVEsWUFBWSxFQUFFLEdBQUdtRCxtQkFBbUI7UUFDMUNyVCxhQUFhcEMsZUFBZW9DLFdBQVc7UUFDdkN3STtRQUNBM1IsUUFBUStHLGVBQWUvRyxNQUFNO1FBQzdCME4sYUFBYTNHLGVBQWUyRyxXQUFXO1FBQ3ZDZ1A7UUFDQUQ7SUFDRjtJQUNBLE1BQU00TCxjQUFjRCxlQUFlN2U7SUFDbkMsTUFBTXBDLGdCQUFnQks7SUFDdEIsTUFBTXl1Qix5QkFBeUIsQ0FBQ2xkLE1BQU03TyxtQkFBa0IsS0FBTSxPQUFPLEtBQUssSUFBSTZPLElBQUltZCxnQkFBZ0I7SUFDbEcsTUFBTUMsa0JBQWtCeEQsOENBQW1CLENBQ3pDLENBQUN5RDtRQUNDLElBQUlydkIsZUFBZS9HLE1BQU0sSUFBSSxDQUFDbzJCLGNBQWNqdkIsaUJBQWlCQSxjQUFjWSxHQUFHLENBQUNDLFFBQVEsSUFBSThxQixnRkFBdUJBLENBQUMvckIsZ0JBQWdCSSxjQUFjWSxHQUFHLENBQUM3QyxLQUFLLEdBQUc7WUFDM0ppQyxjQUFjWSxHQUFHLENBQUNDLFFBQVEsQ0FBQztnQkFBRXZCLEtBQUs7WUFBWTtRQUNoRDtJQUNGLEdBQ0E7UUFBQ007UUFBZ0JJO0tBQWM7SUFFakMsT0FBTyxhQUFhLGlCQUFHd3JCLGdEQUFxQixDQUFDLE9BQU9sekIsZUFBZTtRQUFFc1AsT0FBTztZQUFFc25CLFVBQVU7UUFBVztJQUFFLEdBQUdoZCxlQUFlLGFBQWEsaUJBQUdzWixnREFBcUIsQ0FBQ21ELHlCQUF5QjtRQUFFaHRCLFVBQVUvQjtJQUFlLEdBQUcsYUFBYSxpQkFBRzRyQixnREFBcUIsQ0FBQytDLDRCQUE0QjtRQUFFdnNCLGFBQWFwQyxlQUFlb0MsV0FBVztJQUFDLEdBQUc0TixZQUFZLE9BQU9BLFdBQVcsYUFBYSxpQkFBRzRiLGdEQUFxQixDQUFDQSwyQ0FBZ0IsRUFBRSxNQUFNRSwwRUFBaUJBLENBQUM5ckIsbUJBQW9CLEVBQUMsQ0FBQ3dzQixNQUFNeHNCLGVBQWUyRyxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUk2bEIsSUFBSWxlLElBQUksTUFBTSxXQUFXdE8sZUFBZS9HLE1BQU0sS0FBSzR5QixpREFBTUEsQ0FBQzdWLE1BQU0sQ0FBQ0MsTUFBTSxJQUFJalcsZUFBZS9HLE1BQU0sS0FBSzR5QixpREFBTUEsQ0FBQzdWLE1BQU0sQ0FBQ3FILFdBQVcsSUFBSSxhQUFhLGlCQUFHdU8sZ0RBQXFCLENBQ2pxQnNCLFlBQ0E7UUFDRW5yQixVQUFVL0I7UUFDVm90Qiw2QkFBNkJnQztRQUM3Qi9CLG9CQUFvQjZCO0lBQ3RCLEtBQ0VwRCwwRUFBaUJBLENBQUM5ckIsbUJBQW1CLGFBQWEsaUJBQUc0ckIsZ0RBQXFCLENBQzVFNkMsWUFDQTtRQUNFMXNCLFVBQVUvQjtRQUNWb3RCLDZCQUE2QmdDO0lBQy9CLElBQ0MsYUFBYSxpQkFBR3hELGdEQUFxQixDQUFDLE9BQU87UUFBRXRuQixXQUFXO0lBQTZCLEdBQUcsYUFBYSxpQkFBR3NuQixnREFBcUIsQ0FBQ2tCLGdDQUFnQyxRQUFRLGFBQWEsaUJBQUdsQixnREFBcUIsQ0FBQyxPQUFPO1FBQUV0bkIsV0FBVztJQUEwQixHQUFHLGFBQWEsaUJBQUdzbkIsZ0RBQXFCLENBQUMsT0FBTztRQUFFdG5CLFdBQVc7SUFBK0IsR0FBR3RFLGVBQWUvRyxNQUFNLEtBQUs0eUIsaURBQU1BLENBQUM3VixNQUFNLENBQUNDLE1BQU0sR0FBRyxhQUFhLGlCQUFHMlYsZ0RBQXFCLENBQUNBLDJDQUFnQixFQUFFLE1BQU10SyxlQUFlLGFBQWEsaUJBQUdzSyxnREFBcUIsQ0FBQ3BFLHdCQUF3QjtRQUFFeGYsT0FBTztZQUFFdW5CLGFBQWE7UUFBVTtJQUFFLElBQUksYUFBYSxpQkFBRzNELGdEQUFxQixDQUNybUJVLHFCQUNBO1FBQ0VyekIsUUFBUTR5QixpREFBTUEsQ0FBQzdWLE1BQU0sQ0FBQ0csVUFBVTtRQUNoQ29XLE1BQU07SUFDUixJQUNDLGFBQWEsaUJBQUdYLGdEQUFxQixDQUFDUSxpQkFBaUIsU0FBUyxhQUFhLGlCQUFHUixnREFBcUIsQ0FBQ0EsMkNBQWdCLEVBQUUsTUFBTSxhQUFhLGlCQUFHQSxnREFBcUIsQ0FBQzlDLHlCQUF5QjtRQUFFOWdCLE9BQU87WUFBRXVuQixhQUFhO1FBQVU7SUFBRSxJQUFJLGFBQWEsaUJBQUczRCxnREFBcUIsQ0FBQ1EsaUJBQWlCLE1BQU0sZ0JBQWdCLGFBQWEsaUJBQUdSLGdEQUFxQixDQUFDSyw0QkFBNEI7UUFBRTNuQixXQUFXO0lBQStCLE1BQU0sYUFBYSxpQkFBR3NuQixnREFBcUIsQ0FBQ3BDLGFBQWE7UUFBRXpuQixVQUFVL0I7SUFBZTtBQUN6ZjtBQUVBLHdDQUF3QztBQUN4QyxTQUFTd3ZCLHFCQUFxQnRyQixLQUFLO0lBQ2pDLE1BQU1vTyxlQUFlekMsWUFBWTNMLE9BQU87UUFBRUksV0FBVztJQUFrQjtJQUN2RSxPQUFPLGFBQWEsaUJBQUdxbkIsZ0RBQXFCLENBQUMsT0FBT2p6QixlQUFlLENBQUMsR0FBRzRaLGVBQWVwTyxNQUFNOEwsUUFBUTtBQUN0RztBQUNBLFNBQVN5ZixZQUFZN3lCLEVBQUU7SUFDckIsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQUVtRixRQUFRLEVBQUVGLEtBQUssRUFBRSxHQUFHeUYsSUFBSXNELFlBQVk1UixVQUFVc08sSUFBSTtRQUFDO1FBQVk7S0FBUTtJQUN0RixNQUFNdEgsaUJBQWlCK0IsWUFBWSxPQUFPQSxXQUFXRjtJQUNyRCxPQUFPLGFBQWEsaUJBQUc4cEIsZ0RBQXFCLENBQUNxRCxpQkFBaUJ0MkIsZUFBZUEsZUFBZSxDQUFDLEdBQUdzSCxpQkFBaUI0SztBQUNuSDtBQUVBLHVDQUF1QztBQUNOO0FBRWpDLCtCQUErQjtBQUNFO0FBQ3NEO0FBQ3ZGLFNBQVNpbEIsVUFBVWp6QixFQUFFO0lBQ25CLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFaVksTUFBTSxFQUFFLEdBQUd2TixJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7S0FBUztJQUM5RCxPQUFPLGFBQWEsaUJBQUdxb0IsZ0RBQXFCLENBQUNBLDJDQUFnQixFQUFFLE1BQU05YSxPQUFPM0UsR0FBRyxDQUFDLENBQUNsUTtRQUMvRSxPQUFPLGFBQWEsaUJBQUcydkIsZ0RBQXFCLENBQzFDcnVCLGdCQUFnQnV0QixRQUFRLEVBQ3hCO1lBQ0V2MkIsT0FBTzBIO1lBQ1AzSCxLQUFLdTNCLDZFQUFvQkEsQ0FBQzV2QjtRQUM1QixHQUNBK1AsaUJBQWlCN0wsTUFBTThMLFFBQVE7SUFFbkM7QUFDRjtBQUVBLGdEQUFnRDtBQUNmO0FBQ3NDO0FBQ3ZFLFNBQVNnZ0Isa0JBQWtCLEVBQ3pCbmMsY0FBYyxFQUNkYSxRQUFRLEVBQ1JDLFFBQVEsRUFDUmhCLFdBQVcsRUFDWHNjLGdCQUFnQkMsZ0JBQWdCLEVBQ2pDO0lBQ0MsTUFBTSxDQUFDQyxhQUFhQyxlQUFlLEdBQUdOLDJDQUFnQixDQUFDO0lBQ3ZEQSw0Q0FBaUIsQ0FBQztRQUNoQixJQUFJeHhCO1FBQ0osSUFBSTR4QixrQkFBa0I7WUFDcEI1eEIsZUFBZXl4QixxRkFBMkJBLENBQUNHLGlCQUFpQmgxQixPQUFPLEVBQUUsS0FBS0ksU0FBUyxDQUNqRjgwQjtRQUVKO1FBQ0EsT0FBTztZQUNMLElBQUk5eEIsY0FBYztnQkFDaEJBLGFBQWEvQyxXQUFXO1lBQzFCO1FBQ0Y7SUFDRixHQUFHO1FBQUMyMEI7S0FBaUI7SUFDckIsT0FBTyxhQUFhLGlCQUFHSixnREFBcUIsQ0FBQyxPQUFPO1FBQUV4ckIsV0FBVztRQUF5Qiw0QkFBNEI2ckI7SUFBWSxHQUFHLGFBQWEsaUJBQUdMLGdEQUFxQixDQUFDLFVBQVU7UUFBRXhyQixXQUFXO1FBQWFHLFNBQVNrUTtJQUFTLEdBQUcsYUFBYSxpQkFBR21iLGdEQUFxQixDQUFDdEosaUJBQWlCLFFBQVEsYUFBYSxpQkFBR3NKLGdEQUFxQixDQUFDLFFBQVE7UUFBRXhyQixXQUFXO0lBQXNCLEdBQUcsQ0FBQyxFQUFFcVAsWUFBWSxJQUFJLEVBQUVFLGVBQWUsQ0FBQyxHQUFHLGFBQWEsaUJBQUdpYyxnREFBcUIsQ0FBQyxVQUFVO1FBQUV4ckIsV0FBVztRQUFhRyxTQUFTaVE7SUFBUyxHQUFHLGFBQWEsaUJBQUdvYixnREFBcUIsQ0FBQ3RKLGlCQUFpQjtBQUN2akI7QUFFQSxrREFBa0Q7QUFDakI7QUFDakMsU0FBUzhKLG9CQUFvQixFQUFFemMsY0FBYyxFQUFFRixXQUFXLEVBQUU7SUFDMUQsTUFBTTRjLFVBQVUsSUFBSXRTLE1BQU1wSyxnQkFBZ0IwUixJQUFJLENBQUMsSUFBSXJWLEdBQUcsQ0FBQyxDQUFDc2dCLEdBQUcvRjtRQUN6RCxJQUFJQSxRQUFRLE1BQU05VyxhQUFhO1lBQzdCLE9BQU8sYUFBYSxpQkFBRzBjLGdEQUFxQixDQUFDLFFBQVE7Z0JBQUUsa0JBQWtCO2dCQUFNaDRCLEtBQUtveUI7WUFBTTtRQUM1RixPQUFPO1lBQ0wsT0FBTyxhQUFhLGlCQUFHNEYsZ0RBQXFCLENBQUMsUUFBUTtnQkFBRWg0QixLQUFLb3lCO1lBQU07UUFDcEU7SUFDRjtJQUNBLE9BQU8sYUFBYSxpQkFBRzRGLGdEQUFxQixDQUFDLE9BQU87UUFBRS9yQixXQUFXO0lBQTBCLEdBQUdpc0I7QUFDaEc7QUFFQSx1Q0FBdUM7QUFDdkMsU0FBU0UsV0FBVzd6QixFQUFFO0lBQ3BCLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFaVksTUFBTSxFQUFFLEdBQUd2TixJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7S0FBUztJQUM5RCxNQUFNb3BCLHVCQUFTaEIsNENBQWlCO0lBQ2hDLE1BQU1wZCxlQUFlb2QsMENBQWUsQ0FDbEMsSUFBTTdmLFlBQVkzTCxPQUFPO1lBQUVJLFdBQVc7UUFBaUIsSUFDdkQ7UUFBQ0o7S0FBTTtJQUVULE1BQU0sRUFBRTFELE1BQU0sRUFBRSxHQUFHcUgsY0FBYzZvQixRQUFRN2IsT0FBT3ZZLE1BQU07SUFDdEQsTUFBTXMwQixhQUFhbmQsY0FBY2pULE9BQU9xd0IsUUFBUSxFQUFFaGM7SUFDbERpRSxTQUFTNFgsUUFBUTtRQUNmaFgsYUFBYWtYLFdBQVdsYyxRQUFRO1FBQ2hDaUYsY0FBY2lYLFdBQVdqYyxRQUFRO0lBQ25DO0lBQ0EsT0FBTyxhQUFhLGlCQUFHK2EsZ0RBQXFCLENBQUMsT0FBT2gzQixlQUFlO1FBQUV1SixLQUFLeXVCO1FBQVEsc0JBQXNCRSxXQUFXL2MsY0FBYyxHQUFHO0lBQUUsR0FBR3ZCLGVBQWUsYUFBYSxpQkFBR29kLGdEQUFxQixDQUFDRyxXQUFXO1FBQUVoYixRQUFRK2IsV0FBVy9iLE1BQU07SUFBQyxHQUFHM1EsTUFBTThMLFFBQVEsR0FBRzZFLE9BQU92WSxNQUFNLEdBQUdrRSxPQUFPcXdCLFFBQVEsSUFBSSxhQUFhLGlCQUFHbkIsZ0RBQXFCLENBQUNBLDJDQUFnQixFQUFFLE1BQU0sYUFBYSxpQkFBR0EsZ0RBQXFCLENBQzdYWSxxQkFDQTtRQUNFemMsZ0JBQWdCK2MsV0FBVy9jLGNBQWM7UUFDekNGLGFBQWFpZCxXQUFXamQsV0FBVztJQUNyQyxJQUNDLGFBQWEsaUJBQUcrYixnREFBcUIsQ0FBQ00sbUJBQW1CdDNCLGVBQWU7UUFBRXUzQixnQkFBZ0JTO0lBQU8sR0FBR0U7QUFDekc7QUFFQSwyQ0FBMkM7QUFDa0I7QUFDNUI7QUFDakMsSUFBSUksYUFBYTtBQUNqQixJQUFJQyxZQUFZO0FBQ2hCLElBQUlDLG9CQUFvQjtBQUN4QixJQUFJQyxlQUFlLEtBQUs7QUFDeEIsSUFBSUMsc0JBQXNCLENBQUMsSUFBSUQsWUFBVyxJQUFLLENBQUM7QUFDaEQsSUFBSUUsZUFBZUM7QUFDbkIsU0FBU0EsZUFBZTEwQixFQUFFO0lBQ3hCLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFaVksTUFBTSxFQUFFdEQsV0FBVyxFQUFFLEdBQUdqSyxJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7UUFBVTtLQUFjO0lBQzFGLE1BQU1pcUIsVUFBVVIseUNBQWMsQ0FBQztJQUMvQixNQUFNLENBQUNTLFdBQVdDLGFBQWEsR0FBR1YsMkNBQWdCLENBQUM7SUFDbkQsTUFBTSxFQUFFdHpCLEtBQUssRUFBRUMsTUFBTSxFQUFFLEdBQUdMLFFBQVFrMEI7SUFDbEMsTUFBTUcsc0JBQXNCbmdCLGNBQWNBLGNBQWM3VCxVQUFVRCxRQUFRLGFBQWE7SUFDdkYsTUFBTWswQixXQUFXRCx3QkFBd0IsYUFBYTVkLEtBQUtDLEdBQUcsQ0FBQ3RXLFFBQVEyekIscUJBQXFCSixjQUFjbGQsS0FBS0MsR0FBRyxDQUFDclcsU0FBU3l6QixjQUFjRjtJQUMxSSxNQUFNVyxpQkFBaUJkLDJFQUFpQkE7SUFDeEMsTUFBTWUsZUFBZUgsd0JBQXdCLGFBQWE1ZCxLQUFLQyxHQUFHLENBQUMsQ0FBQ3JXLFNBQVNrMEIsY0FBYSxJQUFLRCxVQUFVVCxxQkFBcUJwZCxLQUFLQyxHQUFHLENBQUMsQ0FBQ3RXLFFBQVFtMEIsY0FBYSxJQUFLRCxVQUFVVDtJQUM1SyxJQUFJWSxrQkFBa0JoZSxLQUFLaWUsS0FBSyxDQUFDRjtJQUNqQyxJQUFJL2QsS0FBS2tlLEdBQUcsQ0FBQ0gsZUFBZUwsYUFBYSxLQUFLO1FBQzVDTSxrQkFBa0JoZSxLQUFLaWUsS0FBSyxDQUFDUDtJQUMvQixPQUFPLElBQUlBLGNBQWNLLGNBQWM7UUFDckNKLGFBQWFJO0lBQ2Y7SUFDQSxNQUFNSSxjQUFjbGYsc0JBQXNCOEIsUUFBUWlkO0lBQ2xEZixrREFBdUIsQ0FBQztRQUN0QixJQUFJUSxRQUFRcjJCLE9BQU8sRUFBRTtZQUNuQnEyQixRQUFRcjJCLE9BQU8sQ0FBQ2czQixPQUFPLENBQUNDLGFBQWEsR0FBR1Q7WUFDeENILFFBQVFyMkIsT0FBTyxDQUFDOE0sS0FBSyxDQUFDQyxXQUFXLENBQUMsMEJBQTBCNnBCLGdCQUFnQjNwQixRQUFRO1FBQ3RGO0lBQ0YsR0FBRztRQUFDMnBCO1FBQWlCSjtLQUFvQjtJQUN6QyxPQUFPLGFBQWEsaUJBQUdYLGdEQUFxQixDQUFDLFNBQVNyNEIsZUFBZTtRQUFFTCxLQUFLcTVCO1FBQXFCcHRCLFdBQVc7UUFBZXJDLEtBQUtzdkI7SUFBUSxHQUFHcnRCLFFBQVEsYUFBYSxpQkFBRzZzQixnREFBcUIsQ0FBQ2xCLFdBQVc7UUFBRWhiLFFBQVFvZDtJQUFZLEdBQUcvdEIsTUFBTThMLFFBQVE7QUFDN087QUFFQSxrREFBa0Q7QUFDTTtBQUN2QjtBQUNqQyxTQUFTc2lCLHNCQUFzQixFQUM3Qmg2QixLQUFLLEVBQ0xpNkIsV0FBVyxFQUNYQyxjQUFjLEVBQ2R4aUIsUUFBUSxFQUNUO0lBQ0MsTUFBTXlpQixxQkFBcUJ0eEIsNkJBQTZCN0k7SUFDeEQrNUIsNENBQWlCLENBQUM7UUFDaEJELHlEQUFLQSxDQUFDcG5CLEtBQUssQ0FBQyxvQkFBb0I7WUFBRTdNLE9BQU9zMEIsbUJBQW1CenhCLEdBQUcsQ0FBQzdDLEtBQUs7UUFBQztRQUN0RSxJQUFJbzBCLGVBQWVFLG1CQUFtQnp4QixHQUFHLENBQUM3QyxLQUFLLEVBQzdDbzBCLFlBQVlFLG1CQUFtQnp4QixHQUFHLENBQUM3QyxLQUFLO0lBQzVDLEdBQUc7UUFBQ3MwQixtQkFBbUJ6eEIsR0FBRyxDQUFDN0MsS0FBSztRQUFFbzBCO0tBQVk7SUFDOUNGLDRDQUFpQixDQUFDO1FBQ2hCRCx5REFBS0EsQ0FBQ3BuQixLQUFLLENBQUMsa0JBQWtCO1lBQUVsSyxhQUFhMnhCLG1CQUFtQnZ4QixNQUFNLENBQUMvQyxLQUFLO1FBQUM7UUFDN0UsSUFBSXEwQixrQkFBa0JDLG1CQUFtQnZ4QixNQUFNLENBQUMvQyxLQUFLLEVBQUU7WUFDckRxMEIsZUFBZUMsbUJBQW1CdnhCLE1BQU0sQ0FBQy9DLEtBQUs7UUFDaEQ7SUFDRixHQUFHO1FBQUNxMEI7UUFBZ0JDLG1CQUFtQnZ4QixNQUFNLENBQUMvQyxLQUFLO0tBQUM7SUFDcEQsT0FBTyxhQUFhLGlCQUFHazBCLGdEQUFxQixDQUFDcHlCLGNBQWM0dUIsUUFBUSxFQUFFO1FBQUV2MkIsT0FBT202QjtJQUFtQixHQUFHemlCO0FBQ3RHO0FBRUEsaUNBQWlDO0FBQ0E7QUFDakMsU0FBUzJpQixZQUFZenVCLEtBQUs7SUFDeEIsTUFBTSxFQUFFbkIsSUFBSSxFQUFFNkgsU0FBUyxFQUFFLEdBQUdmLGVBQWUzRjtJQUMzQyxPQUFPLGFBQWEsaUJBQUd3dUIsZ0RBQXFCLENBQUMsT0FBT2g2QixlQUFlLENBQUMsR0FBR2tTLFlBQVk3SCxRQUFRLGFBQWEsaUJBQUcydkIsZ0RBQXFCLENBQUNod0IsWUFBWW1zQixRQUFRLEVBQUU7UUFBRXYyQixPQUFPeUs7SUFBSyxHQUFHLGFBQWEsaUJBQUcydkIsZ0RBQXFCLENBQUN4dkIsaUJBQWlCMnJCLFFBQVEsRUFBRTtRQUFFdjJCLE9BQU80TCxNQUFNMHVCLFlBQVk7SUFBQyxHQUFHMXVCLE1BQU04TCxRQUFRO0FBQ3hSO0FBRUEsaURBQWlEO0FBQ0E7QUFDaEI7QUFDakMsU0FBUytpQixnQkFBZ0JuMkIsRUFBRTtJQUN6QixJQUFJMEssS0FBSzFLLElBQUksRUFBRXdGLFdBQVcsRUFBRUwsUUFBUSxFQUFFLEdBQUd1RixJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQUM7UUFBZTtLQUFXO0lBQzlGLElBQUkwSyxLQUFLd2E7SUFDVCxNQUFNd0csV0FBVztJQUNqQixNQUFNQyxZQUFZO0lBQ2xCLE1BQU1DLFdBQVc7SUFDakIsTUFBTUMsYUFBYTtJQUNuQixNQUFNQyxnQkFBZ0I7SUFDdEIsTUFBTUMsV0FBVztJQUNqQixNQUFNN3dCLElBQUksQ0FBQ3dQLE1BQU0zUCw0QkFBMkIsS0FBTSxPQUFPMlAsTUFBTTVQO0lBQy9ELElBQUlILE1BQU0sQ0FBQ3VxQixNQUFNN3FCLHlCQUF3QixLQUFNLE9BQU82cUIsTUFBTXpxQjtJQUM1RCxJQUFJLENBQUNFLEtBQUs7UUFDUixJQUFJLENBQUNPLEdBQUc7WUFDTixNQUFNbEMsTUFBTSxDQUFDLDREQUE0RCxDQUFDO1FBQzVFO1FBQ0EyQixNQUFNO1lBQUVHLGFBQWFJO1lBQUd2SixRQUFRNDVCLGlEQUFNQSxDQUFDN2MsTUFBTSxDQUFDRyxVQUFVO1FBQUM7SUFDM0Q7SUFDQSxNQUFNbWQsVUFBVXhQLHdCQUF3QjdoQixLQUFLO1FBQUV3aEIsT0FBTztRQUFHQyxRQUFRO0lBQUk7SUFDckUsT0FBTyxhQUFhLGlCQUFHb1AsZ0RBQXFCLENBQzFDLE9BQ0EvNUIsY0FBY0wsZUFBZTtRQUMzQitFLE9BQU87UUFDUEMsUUFBUTtRQUNScW9CLFNBQVMsQ0FBQyxJQUFJLEVBQUVpTixTQUFTLENBQUMsRUFBRUMsVUFBVSxDQUFDO0lBQ3pDLEdBQUcvdUIsUUFBUTtRQUNUSSxXQUFXO0lBQ2IsSUFDQSxhQUFhLGlCQUFHd3VCLGdEQUFxQixDQUFDLFFBQVE7UUFBRTU0QixHQUFHO1FBQUtxNUIsR0FBRztRQUFLOTFCLE9BQU87UUFBUUMsUUFBUTtJQUFPLElBQzlGLGFBQWEsaUJBQUdvMUIsZ0RBQXFCLENBQ25DLEtBQ0E7UUFDRTlxQixPQUFPO1lBQ0x3ckIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDUixXQUFXSyxXQUFZSCxDQUFBQSxXQUFXQyxVQUFTLENBQUMsSUFBSyxFQUFFLE1BQU0sQ0FBQztRQUNyRjtJQUNGLEdBQ0FHLFFBQVFwakIsR0FBRyxDQUFDLENBQUN1akIsS0FBS0MsTUFBUSxhQUFhLGlCQUFHWixnREFBcUIsQ0FDN0QsUUFDQTtZQUNFejZCLEtBQUtxN0I7WUFDTHg1QixHQUFHdzVCLE1BQU9SLENBQUFBLFdBQVdDLFVBQVM7WUFDOUJJLEdBQUdOLFlBQVksSUFBSVEsTUFBTUwsZ0JBQWdCO1lBQ3pDMzFCLE9BQU95MUI7WUFDUHgxQixRQUFRKzFCLE1BQU1MO1FBQ2hCO0FBSVI7QUFFQSxxQ0FBcUM7QUFDSjtBQUNqQyxTQUFTUSxnQkFBZ0JoM0IsRUFBRTtJQUN6QixJQUFJMEssS0FBSzFLLElBQUksRUFBRW1QLFlBQVksRUFBRSxHQUFHekUsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUFDO0tBQWU7SUFDMUUsT0FBTyxhQUFhLGlCQUFHcXNCLGdEQUFxQixDQUFDQSwyQ0FBZ0IsRUFBRSxNQUFNNW5CLGFBQWFtRSxHQUFHLENBQUMsQ0FBQzlOLGNBQWdCLGFBQWEsaUJBQUd1eEIsZ0RBQXFCLENBQUN6eEIsbUJBQW1CMnNCLFFBQVEsRUFBRTtZQUFFdjJCLE9BQU84SjtZQUFhL0osS0FBSytKLFlBQVl5UCxRQUFRO1FBQUMsR0FBRzlCLGlCQUFpQjdMLE1BQU04TCxRQUFRO0FBQzlQO0FBRUEsdUNBQXVDO0FBQ3FFO0FBQzNEO0FBQ2hCO0FBQ2pDLFNBQVNpa0Isa0JBQWtCLEVBQUVqUyxNQUFNLEVBQUVvTSxLQUFLLEVBQUU7SUFDMUMsTUFBTXZaLFNBQVNzSSxVQUNiO1FBQUM0VyxpREFBTUEsQ0FBQy9kLE1BQU0sQ0FBQ0csVUFBVTtRQUFFNGQsaURBQU1BLENBQUMvZCxNQUFNLENBQUNzSCxnQkFBZ0I7UUFBRXlXLGlEQUFNQSxDQUFDL2QsTUFBTSxDQUFDL1EsT0FBTztLQUFDLEVBQ2pGO1FBQ0V3UixjQUFjLEVBQUU7UUFDaEJpSCxnQkFBZ0I7SUFDbEIsR0FDQTVOLE1BQU0sQ0FBQyxDQUFDN04sTUFBUSxDQUFDNnhCLGlFQUFRQSxDQUFDN3hCLElBQUlHLFdBQVcsS0FBS0gsSUFBSTBFLFdBQVcsQ0FBQzJILElBQUksS0FBS3lsQixpREFBTUEsQ0FBQ0csSUFBSSxDQUFDQyxLQUFLO0lBQzFGSCw0Q0FBaUIsQ0FBQztRQUNoQixLQUFLLE1BQU1ueUIsU0FBU2dULE9BQVE7WUFDMUJoVCxNQUFNOEUsV0FBVyxDQUFDMEssYUFBYSxDQUFDO1FBQ2xDO0lBQ0YsR0FBRztRQUFDd0Q7S0FBTztJQUNYLE9BQU8sYUFBYSxpQkFBR21mLGdEQUFxQixDQUFDLE9BQU87UUFBRWhzQixPQUFPO1lBQUVxUSxTQUFTO1FBQU87SUFBRSxHQUFHeEQsT0FBTzNFLEdBQUcsQ0FBQyxDQUFDbk8sV0FBYSxhQUFhLGlCQUFHaXlCLGdEQUFxQixDQUNoSnZGLFlBQ0E7WUFDRXAyQixLQUFLdzdCLDZFQUFvQkEsQ0FBQzl4QjtZQUMxQkE7WUFDQWlnQjtZQUNBb007UUFDRjtBQUVKO0FBRUEsOEJBQThCO0FBQ0c7QUFDakMsU0FBU2lHLFNBQVN6M0IsRUFBRTtJQUNsQixJQUFJMEssS0FBSzFLLElBQUksRUFDWDAzQixtQkFBbUIsUUFBUSxFQUMzQnRrQixRQUFRLEVBQ1QsR0FBRzFJLElBQUlpdEIsaUJBQWlCdjdCLFVBQVVzTyxJQUFJO1FBQ3JDO1FBQ0E7S0FDRDtJQUNELE1BQU0sRUFBRW1MLElBQUksRUFBRSxHQUFHNEU7SUFDakIsT0FBTyxhQUFhLGlCQUFHK2MsZ0RBQXFCLENBQUMsUUFBUTE3QixlQUFlLENBQUMsR0FBRzY3QixpQkFBaUJELHFCQUFxQixZQUFZdGtCLFVBQVV5QyxNQUFNNmhCLHFCQUFxQixXQUFXdGtCO0FBQzVLO0FBRUEsMkJBQTJCO0FBQ007QUFDakMsU0FBU3lrQixNQUFNdndCLEtBQUs7SUFDbEIsTUFBTTBHLFlBQVk0cEIsMENBQWUsQ0FBQyxJQUFNM2tCLFlBQVkzTCxPQUFPO1lBQUVJLFdBQVc7UUFBVyxJQUFJO1FBQUNKO0tBQU07SUFDOUYsT0FBTyxhQUFhLGlCQUFHc3dCLGdEQUFxQixDQUFDLE9BQU85N0IsZUFBZSxDQUFDLEdBQUdrUyxZQUFZMUcsTUFBTThMLFFBQVE7QUFDbkc7QUFFQSxzREFBc0Q7QUFDckI7QUFDZ0I7QUFDakQsU0FBUzRrQixxQkFBcUJoNEIsRUFBRTtJQUM5QixJQUFJMEssS0FBSzFLLElBQUksRUFDWHdGLFdBQVcsRUFDWDROLFFBQVEsRUFDUi9XLE1BQU0sRUFDTjBOLFdBQVcsRUFDWGdQLHdCQUF3QixFQUN4QkQsa0JBQWtCLEVBQ25CLEdBQUdwTyxJQUFJc0QsWUFBWTVSLFVBQVVzTyxJQUFJO1FBQ2hDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTTlFLElBQUlGLHFCQUFxQkY7SUFDL0IsTUFBTSxFQUFFa1EsWUFBWSxFQUFFLEdBQUdtRCxtQkFBbUI7UUFDMUNyVCxhQUFhSTtRQUNib0k7UUFDQStLO1FBQ0ExYyxRQUFRMDdCLGlEQUFNQSxDQUFDM2UsTUFBTSxDQUFDRyxVQUFVO1FBQ2hDeFA7UUFDQStPO0lBQ0Y7SUFDQSxPQUFPLGFBQWEsaUJBQUdnZixnREFBcUIsQ0FBQyxPQUFPaDhCLGVBQWU7UUFBRXNQLE9BQU87WUFBRXNuQixVQUFVO1FBQVc7SUFBRSxHQUFHaGQsZUFBZSxhQUFhLGlCQUFHb2lCLGdEQUFxQixDQUFDL0YsNEJBQTRCO1FBQUV2c0IsYUFBYUk7SUFBRSxHQUFHd04sWUFBWSxPQUFPQSxXQUFXLGFBQWEsaUJBQUcwa0IsZ0RBQXFCLENBQUNBLDJDQUFnQixFQUFFLE1BQU0sYUFBYSxpQkFBR0EsZ0RBQXFCLENBQUNqRyxZQUFZO1FBQUV4MUIsUUFBUUEsVUFBVSxPQUFPQSxTQUFTMDdCLGlEQUFNQSxDQUFDM2UsTUFBTSxDQUFDRyxVQUFVO0lBQUMsSUFBSSxhQUFhLGlCQUFHdWUsZ0RBQXFCLENBQUMzQixpQkFBaUIsT0FBTyxhQUFhLGlCQUFHMkIsZ0RBQXFCLENBQUMsT0FBTztRQUFFcHdCLFdBQVc7SUFBMEIsR0FBRyxhQUFhLGlCQUFHb3dCLGdEQUFxQixDQUFDLE9BQU87UUFBRXB3QixXQUFXO0lBQStCLEdBQUcsYUFBYSxpQkFBR293QixnREFBcUIsQ0FBQ3BJLHFCQUFxQjtRQUFFcnpCLFFBQVEwN0IsaURBQU1BLENBQUMzZSxNQUFNLENBQUNHLFVBQVU7SUFBQyxJQUFJLGFBQWEsaUJBQUd1ZSxnREFBcUIsQ0FBQ3RJLGlCQUFpQixRQUFRLGFBQWEsaUJBQUdzSSxnREFBcUIsQ0FBQ3pJLDRCQUE0QjtRQUFFM25CLFdBQVc7SUFBK0I7QUFDOTVCO0FBRUEsMENBQTBDO0FBQzJCO0FBQ3BDO0FBQ2pDLFNBQVN5d0IscUJBQXFCN3dCLEtBQUs7SUFDakMsTUFBTSxDQUFDOHdCLGNBQWNDLGdCQUFnQixHQUFHSCwyQ0FBZ0IsQ0FBQyxLQUFLO0lBQzlELE1BQU0zMkIsUUFBUWlILG1CQUFtQmxCLE1BQU1uQixJQUFJO0lBQzNDK3hCLDRDQUFpQixDQUFDO1FBQ2hCLE9BQVEzMkI7WUFDTixLQUFLMDJCLDJEQUFnQkEsQ0FBQ0ssWUFBWTtnQkFDaENELGdCQUNFLGFBQWEsaUJBQUdILGdEQUFxQixDQUFDQSwyQ0FBZ0IsRUFBRSxNQUFNLGFBQWEsaUJBQUdBLGdEQUFxQixDQUFDMUwscUJBQXFCO29CQUFFOWtCLFdBQVc7Z0JBQWEsSUFBSTtnQkFFeko7WUFDRixLQUFLdXdCLDJEQUFnQkEsQ0FBQ00sVUFBVTtnQkFDOUJGLGdCQUNFLGFBQWEsaUJBQUdILGdEQUFxQixDQUFDQSwyQ0FBZ0IsRUFBRSxNQUFNLGFBQWEsaUJBQUdBLGdEQUFxQixDQUFDMUwscUJBQXFCO29CQUFFOWtCLFdBQVc7Z0JBQWEsSUFBSTtnQkFFeko7WUFDRixLQUFLdXdCLDJEQUFnQkEsQ0FBQ3R1QixZQUFZO2dCQUNoQzB1QixnQkFBZ0IsYUFBYSxpQkFBR0gsZ0RBQXFCLENBQUNBLDJDQUFnQixFQUFFLE1BQU07Z0JBQzlFO1lBQ0Y7Z0JBQ0VHLGdCQUFnQixLQUFLO2dCQUNyQjtRQUNKO0lBQ0YsR0FBRztRQUFDOTJCO0tBQU07SUFDVixPQUFPNjJCLGVBQWUsYUFBYSxpQkFBR0YsZ0RBQXFCLENBQUNMLE9BQU87UUFBRW53QixXQUFXO0lBQTRCLEdBQUcwd0IsZ0JBQWdCLGFBQWEsaUJBQUdGLGdEQUFxQixDQUFDQSwyQ0FBZ0IsRUFBRTtBQUN6TDtBQUVBLCtCQUErQjtBQUMyQztBQUN6QztBQUNqQyxTQUFTUyxVQUFVMzRCLEVBQUU7SUFDbkIsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1h4QixLQUFLLEVBQ0xvNkIsV0FBVyxLQUFLLEVBQ2hCQyxnQkFBZ0IsS0FBSyxFQUNyQkMsZ0JBQWdCLEVBQ2pCLEdBQUdwdUIsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsSUFBSTBLLEtBQUt3YSxLQUFLamxCLElBQUlDO0lBQ2xCLE1BQU1tdUIsbUJBQW1CTCwwQ0FBZSxDQUFDO1FBQ3ZDLE9BQU9JLG1CQUFtQkEsaUJBQWlCdDZCLE1BQU0ySyxPQUFPLElBQUkzSyxNQUFNMkssT0FBTztJQUMzRSxHQUFHO1FBQUMzSyxNQUFNMkssT0FBTztRQUFFMnZCO0tBQWlCO0lBQ3BDLE1BQU1FLGdCQUFnQixDQUFDLENBQUN4NkIsTUFBTXk2QixhQUFhO0lBQzNDLE1BQU1DLE9BQU8sSUFBSUMsS0FBSzM2QixNQUFNNDZCLFNBQVM7SUFDckMsTUFBTUMsU0FBU0MsWUFBWUEsVUFBVUMsUUFBUSxHQUFHO0lBQ2hELE9BQU8sYUFBYSxpQkFBR2IsZ0RBQXFCLENBQzFDLE1BQ0E1OEIsZUFBZTtRQUNiNEwsV0FBVztRQUNYOHhCLE9BQU9OLEtBQUtPLGtCQUFrQixDQUFDSixRQUFRO1lBQUVLLFdBQVc7UUFBTztRQUMzRCwwQkFBMEIsQ0FBQyxDQUFDdGtCLE1BQU01VyxNQUFNOGlCLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSWxNLElBQUl6QyxPQUFPLElBQUksVUFBVTtJQUM1RixHQUFHckwsUUFDSCxDQUFDLENBQUN1eEIsaUJBQWlCLENBQUNELFlBQVlJLGFBQVksS0FBTSxhQUFhLGlCQUFHTixnREFBcUIsQ0FBQyxRQUFRO1FBQUVoeEIsV0FBVztJQUFlLEdBQUcsQ0FBQ2t4QixZQUFZLGFBQWEsaUJBQUdGLGdEQUFxQixDQUFDLFVBQVU7UUFBRWh4QixXQUFXO0lBQXNCLEdBQUcsQ0FBQ2tELEtBQUssQ0FBQ2dsQixNQUFNcHhCLE1BQU04aUIsSUFBSSxLQUFLLE9BQU8sS0FBSyxJQUFJc08sSUFBSS9aLElBQUksS0FBSyxPQUFPakwsS0FBSyxDQUFDRCxLQUFLbk0sTUFBTThpQixJQUFJLEtBQUssT0FBTyxLQUFLLElBQUkzVyxHQUFHc0ssUUFBUSxHQUFHLENBQUMsQ0FBQzRqQixpQkFBaUJHLGFBQVksS0FBTSxhQUFhLGlCQUFHTixnREFBcUIsQ0FBQyxRQUFRO1FBQUVoeEIsV0FBVztJQUFlLEdBQUdzeEIsaUJBQWlCLFdBQVdFLEtBQUtPLGtCQUFrQixDQUFDSixRQUFRO1FBQUVLLFdBQVc7SUFBUSxNQUM3aEIsYUFBYSxpQkFBR2hCLGdEQUFxQixDQUFDLFFBQVE7UUFBRWh4QixXQUFXO0lBQWtCLEdBQUdxeEI7QUFFcEY7QUFDQSxTQUFTWSx1QkFBdUJ4d0IsT0FBTztJQUNyQyxPQUFPcXZCLGtFQUFRQSxDQUFDcnZCLFNBQVNzdkIsOEVBQW9CQSxJQUFJbmxCLEdBQUcsQ0FBQyxDQUFDc21CLEtBQUtuNkI7UUFDekQsSUFBSSxPQUFPbTZCLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixPQUFPQTtRQUNULE9BQU87WUFDTCxNQUFNQyxVQUFVRCxJQUFJQyxPQUFPLENBQUN0dUIsUUFBUTtZQUNwQyxNQUFNdXVCLE9BQU9GLElBQUlHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQkMsSUFBSSxDQUFDSCxXQUFXQSxVQUFVLENBQUMsUUFBUSxFQUFFQSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRUEsUUFBUSxDQUFDO1lBQ3ZILE9BQU8sYUFBYSxpQkFBR25CLGdEQUFxQixDQUFDLEtBQUs7Z0JBQUVoeEIsV0FBVztnQkFBZ0JqTSxLQUFLZ0U7Z0JBQUdxNkI7Z0JBQU12OUIsUUFBUTtnQkFBVTA5QixLQUFLO1lBQWEsR0FBR0o7UUFDdEk7SUFDRjtBQUNGO0FBRUEsdUJBQXVCO0FBQ1c7QUFDbEMsU0FBU00sS0FBS242QixFQUFFO0lBQ2QsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1g4NEIsZ0JBQWdCLEVBQ2hCc0IsY0FBYyxFQUNkQyxjQUFjLEVBQ2RDLFlBQVksRUFDYixHQUFHNXZCLElBQUlwRCxRQUFRbEwsVUFBVXNPLElBQUk7UUFDNUI7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU02dkIsV0FBV0wseUNBQWUsQ0FBQztJQUNqQyxNQUFNTSxRQUFRTix5Q0FBZSxDQUFDO0lBQzlCLE1BQU1PLGNBQWNQLDBDQUFnQixDQUFDO1FBQ25DLE9BQU87WUFBRUU7WUFBZ0JDO1lBQWdCQztRQUFhO0lBQ3hELEdBQUc7UUFBQ0Y7UUFBZ0JDO1FBQWdCQztLQUFhO0lBQ2pELE1BQU0sRUFBRXR4QixJQUFJLEVBQUUrWixZQUFZLEVBQUUzWixTQUFTLEVBQUUsR0FBR3daLFFBQVE2WDtJQUNsRCxNQUFNajNCLGdCQUFnQks7SUFDdEIsTUFBTTYyQixnQkFBZ0JSLHlDQUFlLENBQUM7SUFDdEMsU0FBU1MsYUFBYWx3QixLQUFLO1FBQ3pCLE9BQU9oTyxRQUFRLElBQUksRUFBRSxNQUFNO1lBQ3pCZ08sTUFBTW13QixjQUFjO1lBQ3BCLElBQUlMLFNBQVNqOEIsT0FBTyxJQUFJaThCLFNBQVNqOEIsT0FBTyxDQUFDNUMsS0FBSyxDQUFDbS9CLElBQUksT0FBTyxJQUFJO2dCQUM1RCxJQUFJN3hCLE1BQU07b0JBQ1IsTUFBTUEsS0FBS3V4QixTQUFTajhCLE9BQU8sQ0FBQzVDLEtBQUs7b0JBQ2pDNitCLFNBQVNqOEIsT0FBTyxDQUFDNUMsS0FBSyxHQUFHO29CQUN6QjYrQixTQUFTajhCLE9BQU8sQ0FBQ3c4QixLQUFLO2dCQUN4QjtZQUNGO1FBQ0Y7SUFDRjtJQUNBWiw0Q0FBa0IsQ0FBQztRQUNqQixJQUFJOWtCO1FBQ0osSUFBSW9sQixPQUFPO1lBQ1JwbEIsQ0FBQUEsTUFBTW9sQixNQUFNbDhCLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSThXLElBQUkybEIsUUFBUSxDQUFDO2dCQUFFQyxLQUFLUixNQUFNbDhCLE9BQU8sQ0FBQzI4QixZQUFZO1lBQUM7UUFDMUY7SUFDRixHQUFHO1FBQUNUO1FBQU96WDtLQUFhO0lBQ3hCbVgsNENBQWtCLENBQUM7UUFDakIsSUFBSTlrQixLQUFLd2EsS0FBS2psQixJQUFJQyxJQUFJQztRQUN0QixJQUFJLENBQUNySCxpQkFBaUJ1ZixhQUFhcmpCLE1BQU0sS0FBSyxHQUFHO1lBQy9DO1FBQ0Y7UUFDQSxJQUFJLENBQUMsQ0FBQzBWLE1BQU01UixjQUFjYyxNQUFNLENBQUMvQyxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUk2VCxJQUFJclMsUUFBUSxLQUFLZ2dCLGFBQWFyakIsTUFBTSxHQUFHLEtBQUtnN0IsY0FBY3A4QixPQUFPLEtBQU0sRUFBQ3N4QixNQUFNN00sWUFBWSxDQUFDQSxhQUFhcmpCLE1BQU0sR0FBRyxFQUFFLEtBQUssT0FBTyxLQUFLLElBQUlrd0IsSUFBSXdKLFNBQVMsR0FBRztZQUNqTnNCLGNBQWNwOEIsT0FBTyxHQUFHLENBQUNxTSxLQUFLb1ksWUFBWSxDQUFDQSxhQUFhcmpCLE1BQU0sR0FBRyxFQUFFLEtBQUssT0FBTyxLQUFLLElBQUlpTCxHQUFHeXVCLFNBQVM7WUFDcEc7UUFDRjtRQUNBLE1BQU04QixxQkFBcUJuWSxhQUFhN1AsTUFBTSxDQUM1QyxDQUFDcFEsTUFBUSxDQUFDNDNCLGNBQWNwOEIsT0FBTyxJQUFJd0UsSUFBSXMyQixTQUFTLEdBQUdzQixjQUFjcDhCLE9BQU8sRUFDeEVvQixNQUFNO1FBQ1IsTUFBTSxFQUFFNEUsTUFBTSxFQUFFLEdBQUdkO1FBQ25CLElBQUkwM0IscUJBQXFCLEtBQUssQ0FBQyxDQUFDdHdCLEtBQUt0RyxPQUFPL0MsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJcUosR0FBRzVILGNBQWMsTUFBTWs0QixvQkFBb0I7WUFDOUdyd0IsQ0FBQUEsS0FBS3ZHLE9BQU9ELFFBQVEsS0FBSyxPQUFPLEtBQUssSUFBSXdHLEdBQUczTyxJQUFJLENBQUNvSSxRQUFRO2dCQUFFeEIsS0FBSztnQkFBY0ksT0FBT2c0QjtZQUFtQjtRQUMzRztJQUNGLEdBQUc7UUFBQ25ZO1FBQWN2ZixpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNjLE1BQU07S0FBQztJQUN4RSxPQUFPLGFBQWEsaUJBQUc0MUIsZ0RBQXNCLENBQUMsT0FBTy85QixjQUFjTCxlQUFlLENBQUMsR0FBR3dMLFFBQVE7UUFBRUksV0FBVztJQUFVLElBQUksYUFBYSxpQkFBR3d5QixnREFBc0IsQ0FBQyxPQUFPO1FBQUV4eUIsV0FBVztJQUFpQixHQUFHLFlBQVksYUFBYSxpQkFBR3d5QixnREFBc0IsQ0FBQzlSLFlBQVk7UUFBRTFnQixXQUFXO0lBQWtCLEdBQUcsYUFBYSxpQkFBR3d5QixnREFBc0IsQ0FBQzlRLHVCQUF1QixTQUFTLGFBQWEsaUJBQUc4USxnREFBc0IsQ0FBQyxNQUFNO1FBQUV4eUIsV0FBVztRQUE0QnJDLEtBQUttMUI7SUFBTSxHQUFHbHpCLE1BQU04TCxRQUFRLEdBQUcyUCxhQUFhelAsR0FBRyxDQUNuZixDQUFDeFEsS0FBS2cwQjtRQUNKLElBQUkxaEI7UUFDSixPQUFPakMsaUJBQWlCN0wsTUFBTThMLFFBQVEsRUFBRTtZQUN0QzVVLE9BQU9zRTtZQUNQckgsS0FBSyxDQUFDMlosTUFBTXRTLElBQUlpckIsRUFBRSxLQUFLLE9BQU8zWSxNQUFNMGhCO1lBQ3BDZ0M7UUFDRjtJQUNGLEtBQ0UvVixhQUFhelAsR0FBRyxDQUFDLENBQUN4USxLQUFLZzBCLEtBQUtxRTtRQUM5QixJQUFJL2xCO1FBQ0osTUFBTXdqQixXQUFXOUIsT0FBTyxLQUFLcUUsTUFBTSxDQUFDckUsTUFBTSxFQUFFLENBQUN4VixJQUFJLEtBQUt4ZSxJQUFJd2UsSUFBSTtRQUM5RCxNQUFNdVgsZ0JBQWdCL0IsT0FBTyxLQUFLaDBCLElBQUlzMkIsU0FBUyxHQUFHK0IsTUFBTSxDQUFDckUsTUFBTSxFQUFFLENBQUNzQyxTQUFTLEdBQUc7UUFDOUUsT0FBTyxhQUFhLGlCQUFHYyxnREFBc0IsQ0FDM0N2QixXQUNBO1lBQ0VsOUIsS0FBSyxDQUFDMlosTUFBTXRTLElBQUlpckIsRUFBRSxLQUFLLE9BQU8zWSxNQUFNMGhCO1lBQ3BDOEI7WUFDQUMsZUFBZUQsYUFBYSxRQUFRLFFBQVFDO1lBQzVDcjZCLE9BQU9zRTtZQUNQZzJCO1FBQ0Y7SUFFSixLQUFLLGFBQWEsaUJBQUdvQixnREFBc0IsQ0FBQyxRQUFRO1FBQUV4eUIsV0FBVztRQUFnQjB6QixVQUFVVDtJQUFhLEdBQUcsYUFBYSxpQkFBR1QsZ0RBQXNCLENBQy9JLFNBQ0E7UUFDRXh5QixXQUFXO1FBQ1hFLFVBQVV3QjtRQUNWL0QsS0FBS2sxQjtRQUNMUixNQUFNO1FBQ05yWSxhQUFhO0lBQ2YsSUFDQyxhQUFhLGlCQUFHd1ksZ0RBQXNCLENBQUMsVUFBVTtRQUFFSCxNQUFNO1FBQVVyeUIsV0FBVztRQUFpQ0UsVUFBVXdCO0lBQVUsR0FBRztBQUMzSTtBQUVBLDBCQUEwQjtBQVFGO0FBQ1U7QUFFbEMsa0NBQWtDO0FBQzhDO0FBQzlDO0FBQ3NCO0FBQ3hELFNBQVM0eUIsZ0JBQWdCaDhCLEVBQUU7SUFDekIsSUFBSTBLLEtBQUsxSyxJQUFJLEVBQ1gwUixJQUFJLEVBQ0p3YixnQkFBZ0IsRUFDaEJDLG9CQUFvQixFQUNwQmxWLE1BQU0sRUFDTnRHLHFCQUFxQixLQUFLLEVBQzNCLEdBQUdqSCxJQUFJcEQsUUFBUWxMLFVBQVVzTyxJQUFJO1FBQzVCO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUNELE1BQU0sQ0FBQ3V4QixRQUFRQyxVQUFVLEdBQUdKLDJDQUFpQixDQUFDO0lBQzlDLE1BQU0sQ0FBQ2hxQixTQUFTcXFCLFdBQVcsR0FBR0wsMkNBQWlCLENBQUMsRUFBRTtJQUNsRCxNQUFNLENBQUNNLGdCQUFnQkMsa0JBQWtCLEdBQUdQLDJDQUFpQixDQUFDO0lBQzlELE1BQU1yTywyQkFBMkIsQ0FBQzZPLE9BQU9ucUI7UUFDdkM0cEIseURBQUtBLENBQUMzdEIsS0FBSyxDQUFDO1FBQ1o4dEIsVUFBVTtRQUNWL08sd0JBQXdCLE9BQU8sS0FBSyxJQUFJQSxxQkFBcUJtUCxPQUFPbnFCO0lBQ3RFO0lBQ0EsTUFBTW9xQixTQUFTVCx5Q0FBZSxDQUFDO0lBQy9CLE1BQU1VLFVBQVVWLHlDQUFlLENBQUM7SUFDaENBLGtEQUF3QixDQUFDO1FBQ3ZCLElBQUlTLE9BQU9qK0IsT0FBTyxJQUFJaytCLFFBQVFsK0IsT0FBTyxJQUFLd1QsQ0FBQUEsV0FBV3NxQixjQUFhLEdBQUk7WUFDcEVSLDZFQUFtQkEsQ0FBQ1csT0FBT2orQixPQUFPLEVBQUVrK0IsUUFBUWwrQixPQUFPLEVBQUVkLElBQUksQ0FBQyxDQUFDLEVBQUVGLENBQUMsRUFBRXE1QixDQUFDLEVBQUU7Z0JBQ2pFLElBQUk2RixRQUFRbCtCLE9BQU8sRUFBRTtvQkFDbkI1RCxPQUFPK2hDLE1BQU0sQ0FBQ0QsUUFBUWwrQixPQUFPLENBQUM4TSxLQUFLLEVBQUU7d0JBQUVzeEIsTUFBTSxDQUFDLEVBQUVwL0IsRUFBRSxFQUFFLENBQUM7d0JBQUUwOUIsS0FBSyxDQUFDLEVBQUVyRSxFQUFFLEVBQUUsQ0FBQztvQkFBQztnQkFDdkU7WUFDRjtRQUNGO1FBQ0EwRixrQkFBa0I7SUFDcEIsR0FBRztRQUFDRTtRQUFRQztRQUFTMXFCO1FBQVNzcUI7S0FBZTtJQUM3QyxNQUFNTyxxQkFBcUJiLDhDQUFvQixDQUM3QyxDQUFDcnhCO1FBQ0MsSUFBSSxDQUFDK3hCLFFBQVFsK0IsT0FBTyxFQUFFO1lBQ3BCO1FBQ0Y7UUFDQSxJQUFJbU0sTUFBTWxPLE1BQU0sS0FBS2dnQyxPQUFPaitCLE9BQU8sRUFBRTtZQUNuQztRQUNGO1FBQ0EsSUFBSTI5QixVQUFVSix5RUFBZUEsQ0FBQ1csUUFBUWwrQixPQUFPLEVBQUVtTSxRQUFRO1lBQ3JEeXhCLFVBQVU7UUFDWjtJQUNGLEdBQ0E7UUFBQ0Q7UUFBUU87UUFBU0Q7S0FBTztJQUUzQlQsNENBQWtCLENBQUM7UUFDakI5bkIsU0FBUzNSLGdCQUFnQixDQUFDLFNBQVNzNkI7UUFDbkN0OUIsT0FBT2dELGdCQUFnQixDQUFDLFVBQVUsSUFBTWc2QixrQkFBa0I7UUFDMUQsT0FBTztZQUNMcm9CLFNBQVN6UixtQkFBbUIsQ0FBQyxTQUFTbzZCO1lBQ3RDdDlCLE9BQU9rRCxtQkFBbUIsQ0FBQyxVQUFVLElBQU04NUIsa0JBQWtCO1FBQy9EO0lBQ0YsR0FBRztRQUFDTTtRQUFvQk47S0FBa0I7SUFDMUMsT0FBTyxhQUFhLGlCQUFHUCxnREFBc0IsQ0FBQ0EsMkNBQWlCLEVBQUUsTUFBTSxhQUFhLGlCQUFHQSxnREFBc0IsQ0FDM0csVUFDQTMvQixjQUFjTCxlQUFlO1FBQzNCNEwsV0FBVztRQUNYLGdCQUFnQnUwQjtJQUNsQixHQUFHMzBCLFFBQVE7UUFDVE8sU0FBUyxJQUFNcTBCLFVBQVUsQ0FBQ0Q7UUFDMUI1MkIsS0FBS2szQjtJQUNQLElBQ0FqMUIsTUFBTThMLFFBQVEsR0FDYixDQUFDOUwsTUFBTU0sUUFBUSxJQUFJLGFBQWEsaUJBQUdrMEIsZ0RBQXNCLENBQzFELE9BQ0E7UUFDRXAwQixXQUFXO1FBQ1hyQyxLQUFLbTNCO1FBQ0xweEIsT0FBTztZQUFFd3hCLFlBQVlYLFNBQVMsWUFBWTtRQUFTO0lBQ3JELEdBQ0F2cUIsT0FBTyxhQUFhLGlCQUFHb3FCLGdEQUFzQixDQUMzQzdPLG1CQUNBO1FBQ0VDO1FBQ0FDLHNCQUFzQixDQUFDaGIsV0FBYXNiLHlCQUF5Qi9iLE1BQU1TO1FBQ25FaWIsb0JBQW9CK087UUFDcEJ6cUI7UUFDQXpNLE9BQU9nVCxVQUFVLE9BQU8sS0FBSyxJQUFJQSxNQUFNLENBQUN2RyxLQUFLO1FBQzdDQztJQUNGLEtBQ0UsYUFBYSxpQkFBR21xQixnREFBc0IsQ0FBQ0EsMkNBQWlCLEVBQUUsTUFBTSxhQUFhLGlCQUFHQSxnREFBc0IsQ0FBQyxPQUFPO1FBQUVwMEIsV0FBVztJQUF5QixHQUFHLGlCQUFpQixhQUFhLGlCQUFHbzBCLGdEQUFzQixDQUNoTjdPLG1CQUNBO1FBQ0V2YixNQUFNO1FBQ055YixzQkFBc0IsQ0FBQ2hiLFdBQWFzYix5QkFBeUIsY0FBY3RiO1FBQzNFaWIsb0JBQW9CK087UUFDcEJsM0IsT0FBT2dULFVBQVUsT0FBTyxLQUFLLElBQUlBLE9BQU80a0IsVUFBVTtRQUNsRGxyQjtJQUNGLElBQ0MsYUFBYSxpQkFBR21xQixnREFBc0IsQ0FBQyxPQUFPO1FBQUVwMEIsV0FBVztJQUF5QixHQUFHLGlCQUFpQixhQUFhLGlCQUFHbzBCLGdEQUFzQixDQUMvSTdPLG1CQUNBO1FBQ0V2YixNQUFNO1FBQ055YixzQkFBc0IsQ0FBQ2hiLFdBQWFzYix5QkFBeUIsY0FBY3RiO1FBQzNFaWIsb0JBQW9CK087UUFDcEJsM0IsT0FBT2dULFVBQVUsT0FBTyxLQUFLLElBQUlBLE9BQU82a0IsVUFBVTtRQUNsRG5yQjtJQUNGO0FBR047QUFFQSwwQkFBMEI7QUFDOEI7QUFFeEQseUNBQXlDO0FBQ1A7QUFDbEMsU0FBU3NyQjtJQUNQRCw0Q0FBa0IsQ0FBQztRQUNqQnJwQjtJQUNGLEdBQUcsRUFBRTtBQUNQO0FBRUEsMEJBQTBCO0FBQzFCLElBQUl1cEIsdUJBQXVCO0lBQ3pCOVksVUFBVTtJQUNWTixjQUFjO0lBQ2RGLGNBQWM7SUFDZE0sZUFBZTtJQUNmRixlQUFlO0lBQ2ZtWixNQUFNO0lBQ05DLGtCQUFrQjtBQUNwQjtBQUNBLFNBQVNDLGlCQUFpQm4xQixPQUFPLEVBQUV1RixPQUFPO0lBQ3hDLE1BQU0sQ0FBQ3dLLFFBQVFxbEIsVUFBVSxHQUFHM0IsMkNBQWlCO0lBQzdDQSw0Q0FBa0IsQ0FBQztRQUNqQixJQUFJNEIsZUFBZSxLQUFLO1FBQ3hCLElBQUlDLGVBQWU7UUFDbkIsSUFBSXQxQixRQUFRNkUsS0FBSyxJQUFJN0UsUUFBUThFLEtBQUssRUFBRTtZQUNsQ3V3QixlQUFlakMsaUVBQWlCQSxDQUFDcHpCO1lBQ2pDcTFCLGFBQWEvL0IsSUFBSSxDQUFDLENBQUNpZ0M7Z0JBQ2pCLElBQUlELGNBQWM7b0JBQ2hCQyxRQUFRMTlCLE9BQU8sQ0FBQyxDQUFDMjlCLEtBQU9BLEdBQUdDLElBQUk7Z0JBQ2pDLE9BQU87b0JBQ0xMLFVBQVVHO2dCQUNaO1lBQ0YsR0FBR2h2QixLQUFLLENBQUNoQjtRQUNYO1FBQ0EsT0FBTztZQUNMK3ZCLGVBQWU7WUFDZkQsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhLy9CLElBQUksQ0FDL0MsQ0FBQ2lnQyxVQUFZQSxRQUFRMTlCLE9BQU8sQ0FBQyxDQUFDa0Y7b0JBQzVCQSxNQUFNMDRCLElBQUk7Z0JBQ1o7UUFFSjtJQUNGLEdBQUc7UUFBQ3J1QixLQUFLQyxTQUFTLENBQUNySDtLQUFTO0lBQzVCLE9BQU8rUDtBQUNUO0FBQ0EsU0FBUzJsQixpQkFBaUJsZSxPQUFPLEVBQUV2TixRQUFRLEVBQUVULElBQUk7SUFDL0MsTUFBTSxDQUFDbXNCLGFBQWFDLGVBQWUsR0FBR25DLDJDQUFpQixDQUFDO0lBQ3hELE1BQU0sQ0FBQ29DLGlCQUFpQkMsbUJBQW1CLEdBQUdyQywyQ0FBaUIsQ0FBQztJQUNoRSxNQUFNN3BCLFVBQVVTLGdCQUFnQjtRQUFFYjtJQUFLO0lBQ3ZDLE1BQU0sQ0FBQ3VzQixnQkFBZ0JDLGtCQUFrQixHQUFHdkMsMkNBQWlCLENBQzNELEtBQUs7SUFFUCxNQUFNLENBQUMzeEIsWUFBWW0wQixjQUFjLEdBQUd4QywyQ0FBaUI7SUFDckQsTUFBTSxDQUFDeUMsZUFBZUMsaUJBQWlCLEdBQUcxQywyQ0FBaUIsQ0FBQ3hwQjtJQUM1RHdwQiw0Q0FBa0IsQ0FBQztRQUNqQjBDLGlCQUFpQmxzQjtJQUNuQixHQUFHO1FBQUNBO0tBQVM7SUFDYixNQUFNbXNCLGNBQWMsQ0FBQ0MsV0FBV2pDLFFBQVU3L0IsUUFBUSxJQUFJLEVBQUUsTUFBTTtZQUM1RCxJQUFJO2dCQUNGLE1BQU13SSxRQUFRcTNCLFVBQVUsZUFBZSxNQUFNZixxRUFBcUJBLENBQUM7b0JBQ2pFcHBCLFVBQVVvc0I7b0JBQ1ZDLFlBQVk5Qyx3REFBWUEsQ0FBQytDLElBQUksQ0FBQ0QsVUFBVTtnQkFDMUMsS0FBSyxNQUFNbkQscUVBQXFCQSxDQUFDO29CQUFFbHBCLFVBQVVvc0I7Z0JBQVU7Z0JBQ3ZELE1BQU1HLGNBQWMsTUFBTXo1QixNQUFNMDVCLFdBQVc7Z0JBQzNDLElBQUlELGVBQWVILGNBQWNHLGFBQWE7b0JBQzVDRSxhQUFhdGdDLE9BQU8sR0FBR29nQztvQkFDdkJMLGlCQUFpQks7Z0JBQ25CO2dCQUNBUCxjQUFjbDVCO1lBQ2hCLEVBQUUsT0FBTzlILEdBQUc7Z0JBQ1YsSUFBSUEsYUFBYXVHLE9BQU87b0JBQ3RCbzZCLGVBQWUzZ0M7Z0JBQ2pCO1lBQ0Y7UUFDRjtJQUNBLE1BQU0waEMsZUFBZSxDQUFDNTVCLE9BQU84b0IsS0FBT3R4QixRQUFRLElBQUksRUFBRSxNQUFNO1lBQ3RELE1BQU13SSxNQUFNNjVCLFdBQVcsQ0FBQy9RO1lBQ3hCNlEsYUFBYXRnQyxPQUFPLEdBQUd5dkI7UUFDekI7SUFDQSxNQUFNNlEsZUFBZWpELHlDQUFlLENBQUN5QztJQUNyQ3pDLDRDQUFrQixDQUFDO1FBQ2pCLElBQUlqYyxXQUFXLENBQUMxVixjQUFjLENBQUM2ekIsZUFBZSxDQUFDRSxpQkFBaUI7WUFDOURoQix5REFBS0EsQ0FBQzN1QixLQUFLLENBQUMsa0JBQWtCc0Q7WUFDOUJzc0IsbUJBQW1CO1lBQ25CTSxZQUFZRixlQUFlMXNCLE1BQU1zTyxPQUFPLENBQUM7Z0JBQ3ZDZ2UsbUJBQW1CO1lBQ3JCO1FBQ0Y7SUFDRixHQUFHO1FBQUN0ZTtRQUFTMVY7UUFBWTZ6QjtRQUFhRTtLQUFnQjtJQUN0RHBDLDRDQUFrQixDQUFDO1FBQ2pCLElBQUksQ0FBQzN4QixZQUFZO1lBQ2Y7UUFDRjtRQUNBLElBQUksQ0FBQzBWLFNBQVM7WUFDWnFkLHlEQUFLQSxDQUFDM3VCLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRXNELEtBQUssTUFBTSxDQUFDO1lBQ2xDMUgsV0FBVyswQixJQUFJLEdBQUd2aEMsSUFBSSxDQUFDLElBQU11L0IseURBQUtBLENBQUMzdUIsS0FBSyxDQUFDcEUsV0FBV2cxQixnQkFBZ0I7UUFDdEUsT0FBTyxJQUFJLENBQUNmLGtCQUFrQixPQUFPLEtBQUssSUFBSUEsZUFBZTlyQixRQUFRLEtBQUt5c0IsYUFBYXRnQyxPQUFPLEtBQU0yL0IsQ0FBQUEsa0JBQWtCLE9BQU8sS0FBSyxJQUFJQSxlQUFlOXJCLFFBQVEsR0FBRztZQUM5SjRxQix5REFBS0EsQ0FBQzN1QixLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUVzRCxLQUFLLFlBQVksQ0FBQyxFQUFFa3RCLGFBQWF0Z0MsT0FBTyxFQUFFMi9CLGVBQWU5ckIsUUFBUTtZQUMxRjBzQixhQUFhNzBCLFlBQVlpMEIsZUFBZTlyQixRQUFRO1FBQ2xELE9BQU87WUFDTDRxQix5REFBS0EsQ0FBQzN1QixLQUFLLENBQUMsQ0FBQyxlQUFlLEVBQUVzRCxLQUFLLE1BQU0sQ0FBQztZQUMxQzFILFdBQVdpMUIsTUFBTTtRQUNuQjtJQUNGLEdBQUc7UUFBQ2oxQjtRQUFZaTBCO1FBQWdCdmU7UUFBU2hPO0tBQUs7SUFDOUNpcUIsNENBQWtCLENBQUM7UUFDakIsT0FBTztZQUNMLElBQUkzeEIsWUFBWTtnQkFDZCt5Qix5REFBS0EsQ0FBQzN1QixLQUFLLENBQUMsQ0FBQyxlQUFlLEVBQUVzRCxLQUFLLE1BQU0sQ0FBQztnQkFDMUMxSCxXQUFXMnpCLElBQUk7Z0JBQ2YzekIsV0FBVyswQixJQUFJO1lBQ2pCO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFDTHBELDRDQUFrQixDQUFDO1FBQ2pCdUMsa0JBQWtCcHNCLFFBQVEyUCxJQUFJLENBQUMsQ0FBQ3lkLE1BQVFBLElBQUkvc0IsUUFBUSxLQUFLaXNCO0lBQzNELEdBQUc7UUFBQ0E7UUFBZXRzQjtLQUFRO0lBQzNCLE9BQU87UUFDTG1zQjtRQUNBajBCO1FBQ0E2ekI7SUFDRjtBQUNGO0FBQ0EsU0FBU3NCLFFBQVFuL0IsRUFBRTtJQUNqQixJQUFJMEssS0FBSzFLLElBQUksRUFDWHdqQixXQUFXLENBQUMsQ0FBQyxFQUNiNGIsVUFBVSxFQUNWaEUsUUFBUSxFQUNSM3RCLE9BQU8sRUFDUFcsS0FBSyxFQUNMaXhCLFlBQVksV0FBVyxFQUN2QkMsV0FBVyxZQUFZLEVBQ3ZCQyxXQUFXLFFBQVEsRUFDbkJDLFlBQVksVUFBVSxFQUN0QkMsa0JBQWtCLEtBQUssRUFDdkJDLHFCQUFxQixJQUFJLEVBQzFCLEdBQUdoMUIsSUFBSXNELFlBQVk1UixVQUFVc08sSUFBSTtRQUNoQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFDRCxJQUFJMEssS0FBS3dhO0lBQ1QsTUFBTSxDQUFDdE0sYUFBYXFjLGVBQWUsR0FBR2hFLDJDQUFpQixDQUFDdUI7SUFDeEQsTUFBTTBDLGtCQUFrQjlqQyxlQUFlQSxlQUFlQSxlQUFlQSxlQUFlQSxlQUFlLENBQUMsR0FBRzBuQixTQUFTUSxhQUFhLEtBQUssS0FBSyxLQUFLO1FBQUVBLGVBQWVSLFNBQVNRLGFBQWE7SUFBQyxJQUFJUixTQUFTVSxhQUFhLEtBQUssS0FBSyxLQUFLO1FBQUVBLGVBQWVWLFNBQVNVLGFBQWE7SUFBQyxJQUFJVixTQUFTSSxZQUFZLEtBQUssS0FBSyxLQUFLO1FBQUVBLGNBQWNKLFNBQVNJLFlBQVk7SUFBQyxJQUFJSixTQUFTTSxZQUFZLEtBQUssS0FBSyxLQUFLO1FBQUVBLGNBQWNOLFNBQVNNLFlBQVk7SUFBQyxJQUFJTixTQUFTWSxRQUFRLEtBQUssS0FBSyxLQUFLO1FBQUVBLFVBQVVaLFNBQVNZLFFBQVE7SUFBQztJQUNuZSxNQUFNLEVBQ0pkLGFBQWF1YyxrQkFBa0IsRUFDL0I5YixzQkFBc0IsRUFDdEJMLHFCQUFxQixFQUNyQk8sc0JBQXNCLEVBQ3RCSixxQkFBcUIsRUFDckJNLFlBQVksRUFDYixHQUFHZCx5QkFBeUI7UUFDM0JHLFVBQVVvYztRQUNWdmIsYUFBYSxDQUFDcWI7UUFDZGpjLGFBQWEsQ0FBQ2ljO0lBQ2hCO0lBQ0EsTUFBTSxDQUFDOWIsY0FBY2tjLGdCQUFnQixHQUFHbkUsMkNBQWlCLENBQUNrRSxtQkFBbUJqYyxZQUFZO0lBQ3pGLE1BQU0sQ0FBQ0UsY0FBY2ljLGdCQUFnQixHQUFHcEUsMkNBQWlCLENBQUNrRSxtQkFBbUIvYixZQUFZO0lBQ3pGLE1BQU0sQ0FBQ0UsZUFBZWdjLGlCQUFpQixHQUFHckUsMkNBQWlCLENBQ3pEa0UsbUJBQW1CN2IsYUFBYTtJQUVsQyxNQUFNLENBQUNFLGVBQWUrYixpQkFBaUIsR0FBR3RFLDJDQUFpQixDQUN6RGtFLG1CQUFtQjNiLGFBQWE7SUFFbEMsTUFBTSxDQUFDRSxVQUFVOGIsWUFBWSxHQUFHdkUsMkNBQWlCLENBQUNrRSxtQkFBbUJ6YixRQUFRO0lBQzdFLE1BQU0sQ0FBQytZLE1BQU1nRCxRQUFRLEdBQUd4RSwyQ0FBaUIsQ0FBQyxDQUFDdm1CLE1BQU1vTyxTQUFTMlosSUFBSSxLQUFLLE9BQU8vbkIsTUFBTThuQixxQkFBcUJDLElBQUk7SUFDekcsTUFBTSxDQUFDQyxrQkFBa0JnRCxvQkFBb0IsR0FBR3pFLDJDQUFpQixDQUMvRCxDQUFDL0wsTUFBTXBNLFNBQVM0WixnQkFBZ0IsS0FBSyxPQUFPeE4sTUFBTXNOLHFCQUFxQkUsZ0JBQWdCO0lBRXpGekIsNENBQWtCLENBQUM7UUFDakJqWSxzQkFBc0JFO0lBQ3hCLEdBQUc7UUFBQ0E7UUFBY0Y7S0FBc0I7SUFDeENpWSw0Q0FBa0IsQ0FBQztRQUNqQjlYLHNCQUFzQkM7SUFDeEIsR0FBRztRQUFDQTtRQUFjRDtLQUFzQjtJQUN4QzhYLDRDQUFrQixDQUFDO1FBQ2pCNVgsdUJBQXVCQztJQUN6QixHQUFHO1FBQUNBO1FBQWVEO0tBQXVCO0lBQzFDNFgsNENBQWtCLENBQUM7UUFDakIxWCx1QkFBdUJDO0lBQ3pCLEdBQUc7UUFBQ0E7UUFBZUQ7S0FBdUI7SUFDMUMwWCw0Q0FBa0IsQ0FBQztRQUNqQnhYLGFBQWFDO0lBQ2YsR0FBRztRQUFDQTtRQUFVRDtLQUFhO0lBQzNCLE1BQU1sTSxTQUFTb2xCLGlCQUNiO1FBQ0V0d0IsT0FBTzZXLGVBQWU7WUFBRXpSLFVBQVUwdEIsbUJBQW1CN2IsYUFBYTtRQUFDLElBQUk7UUFDdkVoWCxPQUFPOFcsZUFBZTtZQUFFM1IsVUFBVTB0QixtQkFBbUIzYixhQUFhO1FBQUMsSUFBSTtJQUN6RSxHQUNBelc7SUFFRixNQUFNNHlCLFVBQVUxRSx5Q0FBZSxDQUFDO0lBQ2hDLE1BQU0yRSxhQUFhM0UsMENBQWdCLENBQ2pDLElBQU0xakIsVUFBVSxPQUFPLEtBQUssSUFBSUEsT0FBTy9FLE1BQU0sQ0FBQyxDQUFDak8sUUFBVUEsTUFBTXlNLElBQUksS0FBSytwQixpREFBTUEsQ0FBQ25FLElBQUksQ0FBQ2lKLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFDN0Y7UUFBQ3RvQjtLQUFPO0lBRVYsTUFBTWhPLGFBQWEweEIsMENBQWdCLENBQUM7UUFDbEMsSUFBSTJFLFlBQVk7WUFDZCxNQUFNLEVBQUVyMkIsWUFBWXUyQixXQUFXLEVBQUUsR0FBR2hGLHdFQUF5QkEsQ0FBQzhFO1lBQzlELE9BQU9FO1FBQ1QsT0FBTztZQUNMLE9BQU87UUFDVDtJQUNGLEdBQUc7UUFBQ0Y7S0FBVztJQUNmLE1BQU1HLGFBQWE5RSwwQ0FBZ0IsQ0FDakMsSUFBTTFqQixVQUFVLE9BQU8sS0FBSyxJQUFJQSxPQUFPL0UsTUFBTSxDQUFDLENBQUNqTyxRQUFVQSxNQUFNeU0sSUFBSSxLQUFLK3BCLGlEQUFNQSxDQUFDbkUsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQzdGO1FBQUN0ZjtLQUFPO0lBRVYwakIsNENBQWtCLENBQUM7UUFDakIsSUFBSTBFLFFBQVEvaEMsT0FBTyxJQUFJZ2lDLFlBQVk7WUFDakNBLFdBQVdyQixNQUFNO1lBQ2pCcUIsV0FBVy9xQixNQUFNLENBQUM4cUIsUUFBUS9oQyxPQUFPO1FBQ25DO1FBQ0EsT0FBTztZQUNMZ2lDLGNBQWMsT0FBTyxLQUFLLElBQUlBLFdBQVdqckIsTUFBTTtRQUNqRDtJQUNGLEdBQUc7UUFBQ2lyQjtLQUFXO0lBQ2YsTUFBTSxDQUFDSSxTQUFTQyxXQUFXLEdBQUdoRiwyQ0FBaUI7SUFDL0MsTUFBTWlGLG1CQUFtQmpGLDhDQUFvQixDQUMzQyxDQUFDa0Y7UUFDQyxJQUFJLE9BQU96QixlQUFlLFlBQVk7WUFDcEMsT0FBT0EsV0FBV3lCO1FBQ3BCLE9BQU87WUFDTCxPQUFPQSxPQUFPemMsUUFBUSxLQUFLO1FBQzdCO0lBQ0YsR0FDQTtRQUFDZ2I7S0FBVztJQUVkekQsNENBQWtCLENBQUM7UUFDakIsTUFBTW1GLGlCQUFpQjtZQUNyQjFjO1lBQ0FOO1lBQ0FJO1lBQ0FOO1lBQ0FJO1lBQ0FtWjtZQUNBQztRQUNGO1FBQ0F1QyxlQUFlbUI7UUFDZkgsV0FBV0MsaUJBQWlCRTtJQUM5QixHQUFHO1FBQ0QxYztRQUNBTjtRQUNBOGM7UUFDQWhkO1FBQ0FJO1FBQ0FFO1FBQ0FrWjtRQUNBRDtLQUNEO0lBQ0QsU0FBU3hDLGFBQWFsd0IsS0FBSztRQUN6QkEsTUFBTW13QixjQUFjO1FBQ3BCLElBQUlnRyxpQkFBaUJ0ZCxjQUFjO1lBQ2pDLElBQUksT0FBTzhYLGFBQWEsWUFBWTtnQkFDbENBLFNBQVM5WDtZQUNYO1FBQ0YsT0FBTztZQUNMeVoseURBQUtBLENBQUNqdkIsSUFBSSxDQUFDLDRCQUE0QndWO1FBQ3pDO0lBQ0Y7SUFDQTJaO0lBQ0EsT0FBTyxhQUFhLGlCQUFHdEIsZ0RBQXNCLENBQUMsT0FBTzcvQixlQUFlO1FBQUU0TCxXQUFXO0lBQWEsR0FBR3NHLFlBQVksYUFBYSxpQkFBRzJ0QixnREFBc0IsQ0FBQyxPQUFPO1FBQUVqMEIsV0FBVztJQUFxQixHQUFHNDRCLGNBQWMsYUFBYSxpQkFBRzNFLGdEQUFzQixDQUFDLFNBQVM7UUFBRXQyQixLQUFLZzdCO1FBQVN4L0IsT0FBTztRQUFRQyxRQUFRO1FBQU8sdUJBQXVCbUo7SUFBVyxJQUFJLENBQUMsQ0FBQ3EyQixjQUFjLENBQUN4YyxZQUFXLEtBQU0sYUFBYSxpQkFBRzZYLGdEQUFzQixDQUFDLE9BQU87UUFBRWowQixXQUFXO0lBQXFCLEdBQUcsYUFBYSxpQkFBR2kwQixnREFBc0IsQ0FBQ3pMLGdDQUFnQyxTQUFTLGFBQWEsaUJBQUd5TCxnREFBc0IsQ0FBQyxPQUFPO1FBQUVqMEIsV0FBVztJQUE0QixHQUFHLGFBQWEsaUJBQUdpMEIsZ0RBQXNCLENBQUMsT0FBTztRQUFFajBCLFdBQVc7SUFBd0IsR0FBRyxhQUFhLGlCQUFHaTBCLGdEQUFzQixDQUMzdUI5TSxhQUNBO1FBQ0UxUCxjQUFjeUU7UUFDZHZuQixRQUFRby9CLGlEQUFNQSxDQUFDcmlCLE1BQU0sQ0FBQ0csVUFBVTtRQUNoQzJGLFVBQVUsQ0FBQ1EsVUFBWW9nQixnQkFBZ0JwZ0I7SUFDekMsR0FDQTRmLFdBQ0MsYUFBYSxpQkFBRzNELGdEQUFzQixDQUFDLE9BQU87UUFBRWowQixXQUFXO0lBQXVCLEdBQUcsYUFBYSxpQkFBR2kwQixnREFBc0IsQ0FDNUhLLGlCQUNBO1FBQ0U5TyxrQkFBa0JsSjtRQUNsQnRTLE1BQU07UUFDTjlKLFVBQVUsQ0FBQzY0QjtRQUNYeG9CLFFBQVE7WUFBRTRrQixZQUFZNEQ7UUFBVztRQUNqQ3RULHNCQUFzQixDQUFDeUcsR0FBRzdGLEtBQU9pUyxpQkFBaUJqUztJQUNwRCxNQUNHLGFBQWEsaUJBQUc0TixnREFBc0IsQ0FBQyxPQUFPO1FBQUVqMEIsV0FBVztJQUF3QixHQUFHLGFBQWEsaUJBQUdpMEIsZ0RBQXNCLENBQy9IOU0sYUFDQTtRQUNFMVAsY0FBYzJFO1FBQ2R6bkIsUUFBUW8vQixpREFBTUEsQ0FBQ3JpQixNQUFNLENBQUNDLE1BQU07UUFDNUI2RixVQUFVLENBQUNRLFVBQVlxZ0IsZ0JBQWdCcmdCO0lBQ3pDLEdBQ0E2ZixXQUNDLGFBQWEsaUJBQUc1RCxnREFBc0IsQ0FBQyxPQUFPO1FBQUVqMEIsV0FBVztJQUF1QixHQUFHLGFBQWEsaUJBQUdpMEIsZ0RBQXNCLENBQzVISyxpQkFDQTtRQUNFOU8sa0JBQWtCaEo7UUFDbEJ4UyxNQUFNO1FBQ045SixVQUFVLENBQUMwNEI7UUFDWHJvQixRQUFRO1lBQUU2a0IsWUFBWXdEO1FBQVc7UUFDakNuVCxzQkFBc0IsQ0FBQ3lHLEdBQUc3RixLQUFPa1MsaUJBQWlCbFM7SUFDcEQsT0FDSSxhQUFhLGlCQUFHNE4sZ0RBQXNCLENBQUMsUUFBUTtRQUFFajBCLFdBQVc7SUFBd0IsR0FBRyxhQUFhLGlCQUFHaTBCLGdEQUFzQixDQUNqSSxTQUNBO1FBQ0VqMEIsV0FBVztRQUNYcW1CLElBQUk7UUFDSmxZLE1BQU07UUFDTmtrQixNQUFNO1FBQ05nSCxjQUFjM2M7UUFDZDFDLGFBQWE4ZDtRQUNidGdCLFVBQVUsQ0FBQzhoQixVQUFZZCxZQUFZYyxRQUFRemtDLE1BQU0sQ0FBQ2IsS0FBSztRQUN2RHVsQyxjQUFjO0lBQ2hCLElBQ0N4QixtQkFBbUIsYUFBYSxpQkFBRzlELGdEQUFzQixDQUFDLE9BQU87UUFBRXZ3QixPQUFPO1lBQUVxUSxTQUFTO1lBQVF5bEIsZUFBZTtZQUFVQyxLQUFLO1FBQU87SUFBRSxHQUFHLGFBQWEsaUJBQUd4RixnREFBc0IsQ0FBQyxPQUFPO1FBQUV2d0IsT0FBTztZQUFFcVEsU0FBUztZQUFReWxCLGVBQWU7WUFBT0MsS0FBSztRQUFPO0lBQUUsR0FBRyxhQUFhLGlCQUFHeEYsZ0RBQXNCLENBQy9SLFNBQ0E7UUFDRTVOLElBQUk7UUFDSmdNLE1BQU07UUFDTnFILFNBQVNqRTtRQUNUamUsVUFBVSxDQUFDbWlCLEtBQU9sQixRQUFRa0IsR0FBRzlrQyxNQUFNLENBQUM2a0MsT0FBTztJQUM3QyxJQUNDLGFBQWEsaUJBQUd6RixnREFBc0IsQ0FBQyxTQUFTO1FBQUUyRixTQUFTO0lBQVcsR0FBRyxrQ0FBa0NuRSxRQUFRLGFBQWEsaUJBQUd4QixnREFBc0IsQ0FBQyxPQUFPO1FBQUV2d0IsT0FBTztZQUFFcVEsU0FBUztZQUFReWxCLGVBQWU7WUFBT0MsS0FBSztRQUFPO0lBQUUsR0FBRyxhQUFhLGlCQUFHeEYsZ0RBQXNCLENBQUMsU0FBUztRQUFFMkYsU0FBUztJQUFhLEdBQUcsZUFBZSxhQUFhLGlCQUFHM0YsZ0RBQXNCLENBQ3JXLFNBQ0E7UUFDRTVOLElBQUk7UUFDSmdNLE1BQU07UUFDTnIrQixPQUFPMGhDO1FBQ1BsZSxVQUFVLENBQUNtaUIsS0FBT2pCLG9CQUFvQmlCLEdBQUc5a0MsTUFBTSxDQUFDYixLQUFLO0lBQ3ZELE1BQ0csYUFBYSxpQkFBR2lnQyxnREFBc0IsQ0FDekMsVUFDQTtRQUNFajBCLFdBQVc7UUFDWHF5QixNQUFNO1FBQ05seUIsU0FBUzh5QjtRQUNUL3lCLFVBQVUsQ0FBQzg0QjtJQUNiLEdBQ0FyQixhQUNFanhCLFNBQVMsYUFBYSxpQkFBR3V0QixnREFBc0IsQ0FBQ0EsMkNBQWlCLEVBQUUsTUFBTSxhQUFhLGlCQUFHQSxnREFBc0IsQ0FBQyxVQUFVLE1BQU0sa0JBQWtCLGFBQWEsaUJBQUdBLGdEQUFzQixDQUFDLE1BQU07UUFBRWowQixXQUFXO1FBQVcwRCxPQUFPO1lBQUVtMkIsVUFBVTtZQUFVQyxVQUFVO1FBQVE7SUFBRSxHQUFHLGFBQWEsaUJBQUc3RixnREFBc0IsQ0FBQyxNQUFNLE1BQU0sY0FBYyxDQUFDLEVBQUVyWSxZQUFZYyxRQUFRLENBQUMsQ0FBQyxHQUFHLGFBQWEsaUJBQUd1WCxnREFBc0IsQ0FBQyxNQUFNLE1BQU0sbUJBQW1CLENBQUMsRUFBRXJZLFlBQVlRLFlBQVksQ0FBQyxDQUFDLEdBQUcsYUFBYSxpQkFBRzZYLGdEQUFzQixDQUFDLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQyxFQUFFclksWUFBWU0sWUFBWSxDQUFDLENBQUMsR0FBRyxhQUFhLGlCQUFHK1gsZ0RBQXNCLENBQUMsTUFBTSxNQUFNLGtCQUFrQixDQUFDLEVBQUVyWSxZQUFZWSxhQUFhLENBQUMsQ0FBQyxHQUFHLGFBQWEsaUJBQUd5WCxnREFBc0IsQ0FBQyxNQUFNLE1BQU0sa0JBQWtCLENBQUMsRUFBRXJZLFlBQVlVLGFBQWEsQ0FBQyxDQUFDO0FBQ253QjtBQUVBLGtDQUFrQztBQUNxRjtBQUM1QztBQUN6QztBQUVsQyw2QkFBNkI7QUFDcUI7QUFDaEI7QUFDK0I7QUFFakUsK0NBQStDO0FBQ2I7QUFDbEMsU0FBU29lLGlCQUFpQnBpQyxFQUFFO0lBQzFCLElBQUkwSyxLQUFLMUssSUFBSSxFQUFFaXVCLEtBQUssRUFBRSxHQUFHdmpCLElBQUlwRCxRQUFRbEwsVUFBVXNPLElBQUk7UUFBQztLQUFRO0lBQzVELE1BQU12RSxPQUFPSjtJQUNiLE1BQU0sRUFBRTRCLGFBQWEwNkIsVUFBVSxFQUFFeDdCLFlBQVksRUFBRSxHQUFHeVUsY0FBYztRQUFFblY7UUFBTW1CO0lBQU07SUFDOUUsTUFBTSxFQUFFSyxXQUFXLEVBQUVvVSxZQUFZLEVBQUUsR0FBR0gsY0FBYztRQUFFelY7UUFBTW1CLE9BQU8rNkI7SUFBVztJQUM5RSxNQUFNanRCLE1BQU16TixhQUFhLEVBQUV5RCxLQUFLLEVBQUUsR0FBR2dLLEtBQUtrdEIsWUFBWWxtQyxVQUFVZ1osS0FBSztRQUFDO0tBQVE7SUFDOUVoSyxNQUFNcVEsT0FBTyxHQUFHNVUsZ0JBQWdCa1YsZUFBZSxTQUFTO0lBQ3hELE9BQU8sYUFBYSxpQkFBR29tQixnREFBc0IsQ0FBQyxVQUFVcm1DLGVBQWU7UUFBRXNQO0lBQU0sR0FBR2szQixZQUFZclUsU0FBUyxPQUFPQSxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUNwbkIsZUFBZSxVQUFVLFFBQVEsQ0FBQztBQUNwSztBQUVBLDZCQUE2QjtBQUM3QixTQUFTMDdCLFdBQVd2aUMsRUFBRTtJQUNwQixJQUFJMEssS0FBSzFLLElBQUksRUFDWHdpQyxTQUFTLEVBQ1RDLFFBQVEsRUFDUnRmLGlCQUFpQnVmLG1CQUFtQixJQUFJLEVBQ3pDLEdBQUdoNEIsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUM1QjtRQUNBO1FBQ0E7S0FDRDtJQUNELElBQUkwSyxLQUFLd2EsS0FBS2psQixJQUFJQyxJQUFJQztJQUN0QixNQUFNLENBQUM4M0IsWUFBWUMsY0FBYyxHQUFHWCwyQ0FBaUIsQ0FBQztJQUN0RCxNQUFNeitCLGdCQUFnQks7SUFDdEJvK0IsNENBQWtCLENBQUM7UUFDakIsSUFBSWxpQixLQUFLc1M7UUFDVCxJQUFJLENBQUMsQ0FBQ3RTLE1BQU12YyxpQkFBaUIsT0FBTyxLQUFLLElBQUlBLGNBQWNjLE1BQU0sQ0FBQy9DLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSXdlLElBQUloZCxRQUFRLE1BQU0sS0FBSyxHQUFHO1lBQ3BINi9CLGNBQWMsQ0FBQ3ZRLE1BQU03dUIsaUJBQWlCLE9BQU8sS0FBSyxJQUFJQSxjQUFjYyxNQUFNLENBQUMvQyxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUk4d0IsSUFBSXR2QixRQUFRO1FBQ25IO0lBQ0YsR0FBRztRQUFFcVMsQ0FBQUEsTUFBTTVSLGlCQUFpQixPQUFPLEtBQUssSUFBSUEsY0FBY2MsTUFBTSxDQUFDL0MsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJNlQsSUFBSXJTLFFBQVE7S0FBQztJQUN4RyxNQUFNOC9CLG1CQUFtQmpoQyxjQUFjLENBQUMsWUFBWSxFQUFFK2dDLGFBQWEsTUFBTSxJQUFJLEdBQUcsQ0FBQztJQUNqRixNQUFNRyxtQkFBbUJELG1CQUFtQixZQUFZO0lBQ3hETCxhQUFhLE9BQU9BLFlBQVlBLFlBQVlNO0lBQzVDLE1BQU1DLGtCQUFrQmpuQyxlQUFlO1FBQUVrbkMsT0FBTztJQUFLLEdBQUdQO0lBQ3hELE1BQU1RLG1CQUFtQi94QjtJQUN6QixJQUFJLENBQUMreEIsa0JBQWtCO1FBQ3JCRixnQkFBZ0JHLE1BQU0sR0FBRztRQUN6QkgsZ0JBQWdCSSxJQUFJLEdBQUc7UUFDdkJKLGdCQUFnQkssVUFBVSxHQUFHO1FBQzdCTCxnQkFBZ0JNLFdBQVcsR0FBRztJQUNoQyxPQUFPO1FBQ0p6VCxDQUFBQSxNQUFNbVQsZ0JBQWdCRyxNQUFNLEtBQUssT0FBT3RULE1BQU1tVCxnQkFBZ0JHLE1BQU0sR0FBR0QsaUJBQWlCSyxVQUFVO1FBQ2xHMzRCLENBQUFBLEtBQUtvNEIsZ0JBQWdCSyxVQUFVLEtBQUssT0FBT3o0QixLQUFLbzRCLGdCQUFnQkssVUFBVSxHQUFHSCxpQkFBaUJLLFVBQVU7UUFDeEcxNEIsQ0FBQUEsS0FBS200QixnQkFBZ0JNLFdBQVcsS0FBSyxPQUFPejRCLEtBQUttNEIsZ0JBQWdCTSxXQUFXLEdBQUdKLGlCQUFpQkssVUFBVTtRQUMxR3o0QixDQUFBQSxLQUFLazRCLGdCQUFnQkksSUFBSSxLQUFLLE9BQU90NEIsS0FBS2s0QixnQkFBZ0JJLElBQUksR0FBR0YsaUJBQWlCTSxjQUFjLElBQUtkLENBQUFBLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVNVLElBQUk7SUFDako7SUFDQSxNQUFNclUsV0FBV21ULDBDQUFnQixDQUMvQixJQUFNTyxjQUFjLGFBQWFBLGNBQWMsV0FDL0M7UUFBQ0E7S0FBVTtJQUViLE1BQU1nQixXQUFXdkIsMENBQWdCLENBQy9CLElBQU1PLGNBQWMsY0FBY0EsY0FBYyxXQUNoRDtRQUFDQTtLQUFVO0lBRWIsTUFBTWlCLCtCQUErQnZCLCtFQUFxQkE7SUFDMUQsTUFBTSxDQUFDMXhCLHNCQUFzQkMsd0JBQXdCLEdBQUd3eEIsMkNBQWlCLENBQUM7SUFDMUUsTUFBTXlCLHNCQUFzQnpCLDhDQUFvQixDQUM5QyxDQUFDdmlCO1FBQ0NqUCx3QkFBd0JpUDtJQUMxQixHQUNBO1FBQUNqUDtLQUF3QjtJQUUzQixNQUFNekMsWUFBWWlGLFlBQVk7UUFBRXZMLFdBQVc7SUFBaUIsR0FBR0o7SUFDL0QsTUFBTSxFQUNKb2MscUJBQXFCLEVBQ3JCRyxxQkFBcUIsRUFDckJFLHNCQUFzQixFQUN0QkUsc0JBQXNCLEVBQ3ZCLEdBQUdaLHlCQUF5QjtRQUFFZ0IsYUFBYSxDQUFDcWU7SUFBaUI7SUFDOUQsTUFBTWlCLHFCQUFxQjFCLDhDQUFvQixDQUM3QyxDQUFDdmlCLFNBQVNra0Isa0JBQW9CQSxrQkFBa0JsZ0Isc0JBQXNCaEUsV0FBVyxNQUNqRjtRQUFDZ0U7S0FBc0I7SUFFekIsTUFBTW1nQixpQkFBaUI1Qiw4Q0FBb0IsQ0FDekMsQ0FBQ3ZpQixTQUFTa2tCLGtCQUFvQkEsa0JBQWtCL2Ysc0JBQXNCbkUsV0FBVyxNQUNqRjtRQUFDbUU7S0FBc0I7SUFFekIsT0FBTyxhQUFhLGlCQUFHb2UsZ0RBQXNCLENBQUMsT0FBT25tQyxlQUFlLENBQUMsR0FBR2tTLFlBQVkrMEIsZ0JBQWdCSyxVQUFVLElBQUksYUFBYSxpQkFBR25CLGdEQUFzQixDQUFDLE9BQU87UUFBRXY2QixXQUFXO0lBQWtCLEdBQUcsYUFBYSxpQkFBR3U2QixnREFBc0IsQ0FDdE9wVCxhQUNBO1FBQ0V4eUIsUUFBUTJsQyxpREFBT0EsQ0FBQzVvQixNQUFNLENBQUNHLFVBQVU7UUFDakN1VjtRQUNBNVAsVUFBVXlrQjtJQUNaLEdBQ0FILFlBQVksZUFDWCxhQUFhLGlCQUFHdkIsZ0RBQXNCLENBQUMsT0FBTztRQUFFdjZCLFdBQVc7SUFBdUIsR0FBRyxhQUFhLGlCQUFHdTZCLGdEQUFzQixDQUM1SGpHLGlCQUNBO1FBQ0V0cUIsTUFBTTtRQUNOeWIsc0JBQXNCLENBQUMyVyxPQUFPM3hCLFdBQWE0Uix1QkFBdUI1UixZQUFZLE9BQU9BLFdBQVc7SUFDbEcsTUFDRzR3QixnQkFBZ0JHLE1BQU0sSUFBSSxhQUFhLGlCQUFHakIsZ0RBQXNCLENBQUMsT0FBTztRQUFFdjZCLFdBQVc7SUFBa0IsR0FBRyxhQUFhLGlCQUFHdTZCLGdEQUFzQixDQUFDcFQsYUFBYTtRQUFFeHlCLFFBQVEybEMsaURBQU9BLENBQUM1b0IsTUFBTSxDQUFDQyxNQUFNO1FBQUV5VjtRQUFVNVAsVUFBVTJrQjtJQUFlLEdBQUdMLFlBQVksV0FBVyxhQUFhLGlCQUFHdkIsZ0RBQXNCLENBQUMsT0FBTztRQUFFdjZCLFdBQVc7SUFBdUIsR0FBRyxhQUFhLGlCQUFHdTZCLGdEQUFzQixDQUMxWGpHLGlCQUNBO1FBQ0V0cUIsTUFBTTtRQUNOeWIsc0JBQXNCLENBQUMyVyxPQUFPM3hCLFdBQWE4Uix1QkFBdUI5UixZQUFZLE9BQU9BLFdBQVc7SUFDbEcsTUFDRzR3QixnQkFBZ0JNLFdBQVcsSUFBSUksZ0NBQWdDLGFBQWEsaUJBQUd4QixnREFBc0IsQ0FDeEdwVCxhQUNBO1FBQ0V4eUIsUUFBUTJsQyxpREFBT0EsQ0FBQzVvQixNQUFNLENBQUNxSCxXQUFXO1FBQ2xDckIsZ0JBQWdCO1lBQUVyUyxPQUFPO1lBQU1nM0Isb0JBQW9CO1FBQVU7UUFDN0RqVjtRQUNBNVAsVUFBVXdrQjtJQUNaLEdBQ0FGLFlBQWFoekIsQ0FBQUEsdUJBQXVCLHNCQUFzQixjQUFhLElBQ3RFdXlCLGdCQUFnQkksSUFBSSxJQUFJLGFBQWEsaUJBQUdsQixnREFBc0IsQ0FBQzdaLFlBQVksTUFBTTBHLFlBQVksYUFBYSxpQkFBR21ULGdEQUFzQixDQUFDeFksa0JBQWtCLE9BQU8rWixZQUFZLFNBQVNULGdCQUFnQkMsS0FBSyxJQUFJLGFBQWEsaUJBQUdmLGdEQUFzQixDQUFDM1osa0JBQWtCLE1BQU13RyxZQUFZLGFBQWEsaUJBQUdtVCxnREFBc0IsQ0FBQ3hYLG1CQUFtQixPQUFPK1ksWUFBWSxVQUFVLGFBQWEsaUJBQUd2QixnREFBc0IsQ0FBQ0csa0JBQWtCO0FBQzNhO0FBRUEsa0NBQWtDO0FBQ2xDLFNBQVM0QixnQkFBZ0Joa0MsRUFBRTtJQUN6QixJQUFJMEssS0FBSzFLLElBQUksRUFDWGlrQyxvQkFBb0IsRUFDcEJDLGtCQUFrQixFQUNsQkMsa0JBQWtCLEVBQ25CLEdBQUd6NUIsSUFBSXBELFFBQVFsTCxVQUFVc08sSUFBSTtRQUM1QjtRQUNBO1FBQ0E7S0FDRDtJQUNELElBQUkwSyxLQUFLd2E7SUFDVCxNQUFNLENBQUMxckIsYUFBYWtnQyxlQUFlLEdBQUdyQywyQ0FBaUIsQ0FBQztRQUN0RGgvQixVQUFVO1FBQ1ZDLGdCQUFnQjtJQUNsQjtJQUNBLE1BQU1xaEMsa0NBQWtDdEMseUNBQWUsQ0FBQztJQUN4RCxNQUFNOXBCLFNBQVNzSSxVQUNiO1FBQ0U7WUFBRWxrQixRQUFReWxDLGlEQUFPQSxDQUFDMW9CLE1BQU0sQ0FBQ0MsTUFBTTtZQUFFOEksaUJBQWlCO1FBQUs7UUFDdkQ7WUFBRTlsQixRQUFReWxDLGlEQUFPQSxDQUFDMW9CLE1BQU0sQ0FBQ3FILFdBQVc7WUFBRTBCLGlCQUFpQjtRQUFNO0tBQzlELEVBQ0Q7UUFBRXRJLGNBQWM7WUFBQ2dvQixxREFBVUEsQ0FBQ3lDLHFCQUFxQjtTQUFDO1FBQUV4akIsZ0JBQWdCO0lBQU07SUFFNUUsTUFBTXlqQixlQUFlLENBQUNoakM7UUFDcEJxZ0MseURBQUtBLENBQUN4ekIsS0FBSyxDQUFDLHlCQUF5QjdNO1FBQ3JDNmlDLGVBQWU3aUM7SUFDakI7SUFDQSxNQUFNaUMsZ0JBQWdCTTtJQUN0QixNQUFNMGdDLG9CQUFvQnZzQixPQUFPL0UsTUFBTSxDQUFDd3VCLHNFQUFpQkEsRUFBRXh1QixNQUFNLENBQUMsQ0FBQ2pPLFFBQVVBLE1BQU04RSxXQUFXLENBQUMxTixNQUFNLEtBQUt5bEMsaURBQU9BLENBQUMxb0IsTUFBTSxDQUFDcUgsV0FBVztJQUNwSSxNQUFNZ2tCLGFBQWEsQ0FBQ3J2QixNQUFNNkUsZ0JBQWdCelcsY0FBYSxLQUFNLE9BQU8sS0FBSyxJQUFJNFIsR0FBRyxDQUFDLEVBQUU7SUFDbkYsTUFBTXN2QixpQkFBaUJ6c0IsT0FBTy9FLE1BQU0sQ0FBQyxDQUFDak8sUUFBVSxDQUFDdzhCLHlFQUFlQSxDQUFDeDhCLE9BQU93L0I7SUFDeEUxQyw0Q0FBa0IsQ0FBQztRQUNqQixJQUFJaGlCLEtBQUtzUyxLQUFLMW5CLElBQUlDO1FBQ2xCLElBQUk0NUIsa0JBQWtCRyxJQUFJLENBQUMsQ0FBQzEvQixRQUFVQSxNQUFNOEUsV0FBVyxDQUFDeUssWUFBWSxLQUFLNnZCLGdDQUFnQy9sQyxPQUFPLEtBQUssTUFBTTtZQUN6SHNqQyx5REFBS0EsQ0FBQ3h6QixLQUFLLENBQUMsZ0NBQWdDO2dCQUFFdzJCLHFCQUFxQkosaUJBQWlCLENBQUMsRUFBRTtZQUFDO1lBQ3ZGblMsQ0FBQUEsTUFBTSxDQUFDdFMsTUFBTXZjLGNBQWNZLEdBQUcsRUFBRUMsUUFBUSxLQUFLLE9BQU8sS0FBSyxJQUFJZ3VCLElBQUluMkIsSUFBSSxDQUFDNmpCLEtBQUs7Z0JBQUVqZCxLQUFLO2dCQUFXTSxnQkFBZ0JvaEMsaUJBQWlCLENBQUMsRUFBRTtZQUFDO1lBQ25JSCxnQ0FBZ0MvbEMsT0FBTyxHQUFHa21DLGlCQUFpQixDQUFDLEVBQUU7UUFDaEUsT0FBTyxJQUFJSCxnQ0FBZ0MvbEMsT0FBTyxJQUFJLENBQUNrbUMsa0JBQWtCRyxJQUFJLENBQzNFLENBQUMxL0I7WUFDQyxJQUFJNC9CLEtBQUtDO1lBQ1QsT0FBTzcvQixNQUFNOEUsV0FBVyxDQUFDbUwsUUFBUSxLQUFNLEVBQUM0dkIsTUFBTSxDQUFDRCxNQUFNUixnQ0FBZ0MvbEMsT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJdW1DLElBQUk5NkIsV0FBVyxLQUFLLE9BQU8sS0FBSyxJQUFJKzZCLElBQUk1dkIsUUFBUTtRQUNuSyxJQUNDO1lBQ0Qwc0IseURBQUtBLENBQUN4ekIsS0FBSyxDQUFDO1lBQ1h4RCxDQUFBQSxLQUFLLENBQUNELEtBQUtuSCxjQUFjWSxHQUFHLEVBQUVDLFFBQVEsS0FBSyxPQUFPLEtBQUssSUFBSXVHLEdBQUcxTyxJQUFJLENBQUN5TyxJQUFJO2dCQUFFN0gsS0FBSztZQUFZO1lBQzNGdWhDLGdDQUFnQy9sQyxPQUFPLEdBQUc7UUFDNUM7SUFDRixHQUFHO1FBQ0RrbUMsa0JBQWtCbHhCLEdBQUcsQ0FBQyxDQUFDak8sTUFBUSxDQUFDLEVBQUVBLElBQUkwRSxXQUFXLENBQUNtTCxRQUFRLENBQUMsQ0FBQyxFQUFFN1AsSUFBSTBFLFdBQVcsQ0FBQ3lLLFlBQVksQ0FBQyxDQUFDLEVBQUV1d0IsSUFBSTtRQUNqR25WLENBQUFBLE1BQU02VSxjQUFjLE9BQU8sS0FBSyxJQUFJQSxXQUFXMTZCLFdBQVcsS0FBSyxPQUFPLEtBQUssSUFBSTZsQixJQUFJMWEsUUFBUTtLQUM3RjtJQUNEK25CO0lBQ0EsT0FBTyxhQUFhLGlCQUFHOEUsZ0RBQXNCLENBQUMsT0FBT2ptQyxlQUFlO1FBQUU0TCxXQUFXO0lBQXNCLEdBQUdKLFFBQVFxNkIsK0RBQUtBLE1BQU0sYUFBYSxpQkFBR0ksZ0RBQXNCLENBQ2pLck0sdUJBQ0E7UUFDRWg2QixPQUFPOEg7UUFDUG95QixnQkFBZ0IyTztJQUNsQixHQUNBLGFBQWEsaUJBQUd4QyxnREFBc0IsQ0FBQyxPQUFPO1FBQUVyNkIsV0FBVztJQUE0QixHQUFHLENBQUMrOEIsYUFBYSxhQUFhLGlCQUFHMUMsZ0RBQXNCLENBQUMsT0FBTztRQUFFcjZCLFdBQVc7SUFBeUIsR0FBRyxhQUFhLGlCQUFHcTZCLGdEQUFzQixDQUFDbE8sWUFBWTtRQUFFNWI7SUFBTyxHQUFHLGFBQWEsaUJBQUc4cEIsZ0RBQXNCLENBQUMzUCxpQkFBaUIsVUFBVSxhQUFhLGlCQUFHMlAsZ0RBQXNCLENBQUMsT0FBTztRQUFFcjZCLFdBQVc7SUFBMEIsR0FBRyxhQUFhLGlCQUFHcTZCLGdEQUFzQixDQUFDblAsc0JBQXNCLE1BQU0sYUFBYSxpQkFBR21QLGdEQUFzQixDQUFDck4sZ0JBQWdCO1FBQUV6YyxRQUFReXNCO0lBQWUsR0FBRyxhQUFhLGlCQUFHM0MsZ0RBQXNCLENBQUMzUCxpQkFBaUIsUUFBUXFTLGNBQWMsYUFBYSxpQkFBRzFDLGdEQUFzQixDQUFDbFAsYUFBYTtRQUFFMXRCLFVBQVVzL0I7SUFBVyxNQUFNLGFBQWEsaUJBQUcxQyxnREFBc0IsQ0FBQ1EsWUFBWTtRQUFFRSxVQUFVO1lBQUVVLE1BQU07UUFBSztJQUFFLEtBQzN4QixhQUFhLGlCQUFHcEIsZ0RBQXNCLENBQ3BDNUgsTUFDQTtRQUNFL3VCLE9BQU87WUFBRXFRLFNBQVN2WCxZQUFZbkIsUUFBUSxHQUFHLFNBQVM7UUFBTztRQUN6RCsxQixrQkFBa0JtTDtRQUNsQjVKLGdCQUFnQjhKO1FBQ2hCL0osZ0JBQWdCOEo7SUFDbEIsS0FFRCxhQUFhLGlCQUFHbkMsZ0RBQXNCLENBQUMxSyxtQkFBbUIsT0FBTyxhQUFhLGlCQUFHMEssZ0RBQXNCLENBQUM1SixzQkFBc0I7QUFDbkk7QUFFQSxrQ0FBa0M7QUFDQTtBQUNnQjtBQUNsRCxTQUFTK00sZ0JBQWdCbGxDLEVBQUU7SUFDekIsSUFBSXNILFFBQVFsTCxVQUFVNEQsSUFBSSxFQUFFO0lBQzVCLE1BQU0sQ0FBQ2tFLGFBQWFrZ0MsZUFBZSxHQUFHWSwyQ0FBaUIsQ0FBQztRQUN0RGppQyxVQUFVO1FBQ1ZDLGdCQUFnQjtJQUNsQjtJQUNBLE1BQU1taUMsY0FBYzVrQixVQUFVO1FBQUMwa0IsaURBQU9BLENBQUM3ckIsTUFBTSxDQUFDRyxVQUFVO0tBQUM7SUFDekQwakI7SUFDQSxPQUFPLGFBQWEsaUJBQUcrSCxnREFBc0IsQ0FBQ3RQLHVCQUF1QjtRQUFFRSxnQkFBZ0J3TztJQUFlLEdBQUcsYUFBYSxpQkFBR1ksZ0RBQXNCLENBQUMsT0FBT2xwQyxlQUFlO1FBQUU0TCxXQUFXO0lBQXNCLEdBQUdKLFFBQVEsYUFBYSxpQkFBRzA5QixnREFBc0IsQ0FBQyxPQUFPO1FBQUV0OUIsV0FBVztJQUE0QixHQUFHLGFBQWEsaUJBQUdzOUIsZ0RBQXNCLENBQUMvUixXQUFXO1FBQUVoYixRQUFRa3RCO0lBQVksR0FBRyxhQUFhLGlCQUFHSCxnREFBc0IsQ0FBQ2hOLHNCQUFzQixTQUFTLGFBQWEsaUJBQUdnTixnREFBc0IsQ0FDbmV6QyxZQUNBO1FBQ0VFLFVBQVU7WUFBRVcsWUFBWTtZQUFNQyxhQUFhO1lBQU9ILFFBQVE7WUFBT0MsTUFBTTtRQUFLO0lBQzlFLElBQ0NqL0IsWUFBWW5CLFFBQVEsSUFBSSxhQUFhLGlCQUFHaWlDLGdEQUFzQixDQUFDN0ssTUFBTTtBQUMxRTtBQUVBLGVBQWU7QUFDZ0c7QUFzSTdHLENBQ0Ysa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL0BsaXZla2l0L2NvbXBvbmVudHMtcmVhY3QvZGlzdC9pbmRleC5tanM/MDdmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX29ialJlc3QgPSAoc291cmNlLCBleGNsdWRlKSA9PiB7XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpXG4gICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKHNvdXJjZSwgcHJvcCkgJiYgZXhjbHVkZS5pbmRleE9mKHByb3ApIDwgMClcbiAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgaWYgKHNvdXJjZSAhPSBudWxsICYmIF9fZ2V0T3duUHJvcFN5bWJvbHMpXG4gICAgZm9yICh2YXIgcHJvcCBvZiBfX2dldE93blByb3BTeW1ib2xzKHNvdXJjZSkpIHtcbiAgICAgIGlmIChleGNsdWRlLmluZGV4T2YocHJvcCkgPCAwICYmIF9fcHJvcElzRW51bS5jYWxsKHNvdXJjZSwgcHJvcCkpXG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHgpID0+IHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XG4gIH0pO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvY29udHJvbHMvQ2xlYXJQaW5CdXR0b24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDQ5IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvaG9va3MvdXNlQXVkaW9QbGF5YmFjay50c1xuaW1wb3J0ICogYXMgUmVhY3Q5IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvaG9va3MvaW50ZXJuYWwvdXNlUmVzaXplT2JzZXJ2ZXIudHNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHVzZUxhdGVzdCBmcm9tIFwiQHJlYWN0LWhvb2svbGF0ZXN0XCI7XG5mdW5jdGlvbiB1c2VSZXNpemVPYnNlcnZlcih0YXJnZXQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc2l6ZU9ic2VydmVyID0gZ2V0UmVzaXplT2JzZXJ2ZXIoKTtcbiAgY29uc3Qgc3RvcmVkQ2FsbGJhY2sgPSB1c2VMYXRlc3QoY2FsbGJhY2spO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICAgIGNvbnN0IHRhcmdldEVsID0gdGFyZ2V0LmN1cnJlbnQ7XG4gICAgaWYgKCF0YXJnZXRFbClcbiAgICAgIHJldHVybjtcbiAgICBmdW5jdGlvbiBjYihlbnRyeSwgb2JzZXJ2ZXIpIHtcbiAgICAgIGlmIChkaWRVbnN1YnNjcmliZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgc3RvcmVkQ2FsbGJhY2suY3VycmVudChlbnRyeSwgb2JzZXJ2ZXIpO1xuICAgIH1cbiAgICByZXNpemVPYnNlcnZlciA9PSBudWxsID8gdm9pZCAwIDogcmVzaXplT2JzZXJ2ZXIuc3Vic2NyaWJlKHRhcmdldEVsLCBjYik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgIHJlc2l6ZU9ic2VydmVyID09IG51bGwgPyB2b2lkIDAgOiByZXNpemVPYnNlcnZlci51bnN1YnNjcmliZSh0YXJnZXRFbCwgY2IpO1xuICAgIH07XG4gIH0sIFt0YXJnZXQuY3VycmVudCwgcmVzaXplT2JzZXJ2ZXIsIHN0b3JlZENhbGxiYWNrXSk7XG4gIHJldHVybiByZXNpemVPYnNlcnZlciA9PSBudWxsID8gdm9pZCAwIDogcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNpemVPYnNlcnZlcigpIHtcbiAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgbGV0IGFsbEVudHJpZXMgPSBbXTtcbiAgY29uc3QgY2FsbGJhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9icykgPT4ge1xuICAgIGFsbEVudHJpZXMgPSBhbGxFbnRyaWVzLmNvbmNhdChlbnRyaWVzKTtcbiAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB0cmlnZ2VyZWQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHJpZ2dlcmVkLmhhcyhhbGxFbnRyaWVzW2ldLnRhcmdldCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB0cmlnZ2VyZWQuYWRkKGFsbEVudHJpZXNbaV0udGFyZ2V0KTtcbiAgICAgICAgICBjb25zdCBjYnMgPSBjYWxsYmFja3MuZ2V0KGFsbEVudHJpZXNbaV0udGFyZ2V0KTtcbiAgICAgICAgICBjYnMgPT0gbnVsbCA/IHZvaWQgMCA6IGNicy5mb3JFYWNoKChjYikgPT4gY2IoYWxsRW50cmllc1tpXSwgb2JzKSk7XG4gICAgICAgIH1cbiAgICAgICAgYWxsRW50cmllcyA9IFtdO1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGlja2luZyA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG9ic2VydmVyLFxuICAgIHN1YnNjcmliZSh0YXJnZXQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX2E7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCk7XG4gICAgICBjb25zdCBjYnMgPSAoX2EgPSBjYWxsYmFja3MuZ2V0KHRhcmdldCkpICE9IG51bGwgPyBfYSA6IFtdO1xuICAgICAgY2JzLnB1c2goY2FsbGJhY2spO1xuICAgICAgY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNicyk7XG4gICAgfSxcbiAgICB1bnN1YnNjcmliZSh0YXJnZXQsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBjYnMgPSAoX2EgPSBjYWxsYmFja3MuZ2V0KHRhcmdldCkpICE9IG51bGwgPyBfYSA6IFtdO1xuICAgICAgaWYgKGNicy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHRhcmdldCk7XG4gICAgICAgIGNhbGxiYWNrcy5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2JJbmRleCA9IGNicy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgIGlmIChjYkluZGV4ICE9PSAtMSlcbiAgICAgICAgY2JzLnNwbGljZShjYkluZGV4LCAxKTtcbiAgICAgIGNhbGxiYWNrcy5zZXQodGFyZ2V0LCBjYnMpO1xuICAgIH1cbiAgfTtcbn1cbnZhciBfcmVzaXplT2JzZXJ2ZXI7XG52YXIgZ2V0UmVzaXplT2JzZXJ2ZXIgPSAoKSA9PiAhX3Jlc2l6ZU9ic2VydmVyID8gX3Jlc2l6ZU9ic2VydmVyID0gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoKSA6IF9yZXNpemVPYnNlcnZlcjtcbnZhciB1c2VTaXplID0gKHRhcmdldCkgPT4ge1xuICBjb25zdCBbc2l6ZSwgc2V0U2l6ZV0gPSBSZWFjdC51c2VTdGF0ZSh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHRhcmdldC5jdXJyZW50KSB7XG4gICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRhcmdldC5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgc2V0U2l6ZSh7IHdpZHRoLCBoZWlnaHQgfSk7XG4gICAgfVxuICB9LCBbdGFyZ2V0LmN1cnJlbnRdKTtcbiAgY29uc3QgcmVzaXplQ2FsbGJhY2sgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZW50cnkpID0+IHNldFNpemUoZW50cnkuY29udGVudFJlY3QpLFxuICAgIFtdXG4gICk7XG4gIHVzZVJlc2l6ZU9ic2VydmVyKHRhcmdldCwgcmVzaXplQ2FsbGJhY2spO1xuICByZXR1cm4gc2l6ZTtcbn07XG5cbi8vIHNyYy9ob29rcy9pbnRlcm5hbC91c2VPYnNlcnZhYmxlU3RhdGUudHNcbmltcG9ydCAqIGFzIFJlYWN0MiBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZU9ic2VydmFibGVTdGF0ZShvYnNlcnZhYmxlLCBzdGFydFdpdGgpIHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdDIudXNlU3RhdGUoc3RhcnRXaXRoKTtcbiAgUmVhY3QyLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgfHwgIW9ic2VydmFibGUpXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoc2V0U3RhdGUpO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfSwgW29ic2VydmFibGVdKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vLyBzcmMvaG9va3MvaW50ZXJuYWwvdXNlTWVkaWFRdWVyeS50c1xuaW1wb3J0ICogYXMgUmVhY3QzIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlTWVkaWFRdWVyeShxdWVyeSkge1xuICBjb25zdCBnZXRNYXRjaGVzID0gKHF1ZXJ5MikgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkyKS5tYXRjaGVzO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGNvbnN0IFttYXRjaGVzLCBzZXRNYXRjaGVzXSA9IFJlYWN0My51c2VTdGF0ZShnZXRNYXRjaGVzKHF1ZXJ5KSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZSgpIHtcbiAgICBzZXRNYXRjaGVzKGdldE1hdGNoZXMocXVlcnkpKTtcbiAgfVxuICBSZWFjdDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBtYXRjaE1lZGlhID0gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpO1xuICAgIGhhbmRsZUNoYW5nZSgpO1xuICAgIGlmIChtYXRjaE1lZGlhLmFkZExpc3RlbmVyKSB7XG4gICAgICBtYXRjaE1lZGlhLmFkZExpc3RlbmVyKGhhbmRsZUNoYW5nZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoTWVkaWEuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBoYW5kbGVDaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1hdGNoTWVkaWEucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgbWF0Y2hNZWRpYS5yZW1vdmVMaXN0ZW5lcihoYW5kbGVDaGFuZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0Y2hNZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZUNoYW5nZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3F1ZXJ5XSk7XG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlQXVkaW9QbGF5YmFjay50c1xuaW1wb3J0IHsgcm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZSB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcblxuLy8gc3JjL2NvbnRleHQvbGF5b3V0LWNvbnRleHQudHNcbmltcG9ydCB7IFBJTl9ERUZBVUxUX1NUQVRFLCBXSURHRVRfREVGQVVMVF9TVEFURSB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0NCBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2NvbnRleHQvY2hhdC1jb250ZXh0LnRzXG5mdW5jdGlvbiBjaGF0UmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24ubXNnID09PSBcInNob3dfY2hhdFwiKSB7XG4gICAgcmV0dXJuIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHN0YXRlKSwgeyBzaG93Q2hhdDogdHJ1ZSwgdW5yZWFkTWVzc2FnZXM6IDAgfSk7XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm1zZyA9PT0gXCJoaWRlX2NoYXRcIikge1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBzdGF0ZSksIHsgc2hvd0NoYXQ6IGZhbHNlIH0pO1xuICB9IGVsc2UgaWYgKGFjdGlvbi5tc2cgPT09IFwidG9nZ2xlX2NoYXRcIikge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgc3RhdGUpLCB7IHNob3dDaGF0OiAhc3RhdGUuc2hvd0NoYXQgfSk7XG4gICAgaWYgKG5ld1N0YXRlLnNob3dDaGF0ID09PSB0cnVlKSB7XG4gICAgICBuZXdTdGF0ZS51bnJlYWRNZXNzYWdlcyA9IDA7XG4gICAgfVxuICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgfSBlbHNlIGlmIChhY3Rpb24ubXNnID09PSBcInVucmVhZF9tc2dcIikge1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBzdGF0ZSksIHsgdW5yZWFkTWVzc2FnZXM6IGFjdGlvbi5jb3VudCB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoe30sIHN0YXRlKTtcbiAgfVxufVxuXG4vLyBzcmMvY29udGV4dC9waW4tY29udGV4dC50c1xuZnVuY3Rpb24gcGluUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24ubXNnID09PSBcInNldF9waW5cIikge1xuICAgIHJldHVybiBbYWN0aW9uLnRyYWNrUmVmZXJlbmNlXTtcbiAgfSBlbHNlIGlmIChhY3Rpb24ubXNnID09PSBcImNsZWFyX3BpblwiKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyh7fSwgc3RhdGUpO1xuICB9XG59XG5cbi8vIHNyYy9jb250ZXh0L2xheW91dC1jb250ZXh0LnRzXG52YXIgTGF5b3V0Q29udGV4dCA9IFJlYWN0NC5jcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5mdW5jdGlvbiB1c2VMYXlvdXRDb250ZXh0KCkge1xuICBjb25zdCBsYXlvdXRDb250ZXh0ID0gUmVhY3Q0LnVzZUNvbnRleHQoTGF5b3V0Q29udGV4dCk7XG4gIGlmICghbGF5b3V0Q29udGV4dCkge1xuICAgIHRocm93IEVycm9yKFwiVHJpZWQgdG8gYWNjZXNzIExheW91dENvbnRleHQgY29udGV4dCBvdXRzaWRlIGEgTGF5b3V0Q29udGV4dFByb3ZpZGVyIHByb3ZpZGVyLlwiKTtcbiAgfVxuICByZXR1cm4gbGF5b3V0Q29udGV4dDtcbn1cbmZ1bmN0aW9uIHVzZUVuc3VyZUxheW91dENvbnRleHQobGF5b3V0Q29udGV4dCkge1xuICBjb25zdCBsYXlvdXQgPSB1c2VNYXliZUxheW91dENvbnRleHQoKTtcbiAgbGF5b3V0Q29udGV4dCAhPSBudWxsID8gbGF5b3V0Q29udGV4dCA6IGxheW91dENvbnRleHQgPSBsYXlvdXQ7XG4gIGlmICghbGF5b3V0Q29udGV4dCkge1xuICAgIHRocm93IEVycm9yKFwiVHJpZWQgdG8gYWNjZXNzIExheW91dENvbnRleHQgY29udGV4dCBvdXRzaWRlIGEgTGF5b3V0Q29udGV4dFByb3ZpZGVyIHByb3ZpZGVyLlwiKTtcbiAgfVxuICByZXR1cm4gbGF5b3V0Q29udGV4dDtcbn1cbmZ1bmN0aW9uIHVzZUNyZWF0ZUxheW91dENvbnRleHQoKSB7XG4gIGNvbnN0IFtwaW5TdGF0ZSwgcGluRGlzcGF0Y2hdID0gUmVhY3Q0LnVzZVJlZHVjZXIocGluUmVkdWNlciwgUElOX0RFRkFVTFRfU1RBVEUpO1xuICBjb25zdCBbd2lkZ2V0U3RhdGUsIHdpZGdldERpc3BhdGNoXSA9IFJlYWN0NC51c2VSZWR1Y2VyKGNoYXRSZWR1Y2VyLCBXSURHRVRfREVGQVVMVF9TVEFURSk7XG4gIHJldHVybiB7XG4gICAgcGluOiB7IGRpc3BhdGNoOiBwaW5EaXNwYXRjaCwgc3RhdGU6IHBpblN0YXRlIH0sXG4gICAgd2lkZ2V0OiB7IGRpc3BhdGNoOiB3aWRnZXREaXNwYXRjaCwgc3RhdGU6IHdpZGdldFN0YXRlIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHVzZUVuc3VyZUNyZWF0ZUxheW91dENvbnRleHQobGF5b3V0Q29udGV4dCkge1xuICBjb25zdCBbcGluU3RhdGUsIHBpbkRpc3BhdGNoXSA9IFJlYWN0NC51c2VSZWR1Y2VyKHBpblJlZHVjZXIsIFBJTl9ERUZBVUxUX1NUQVRFKTtcbiAgY29uc3QgW3dpZGdldFN0YXRlLCB3aWRnZXREaXNwYXRjaF0gPSBSZWFjdDQudXNlUmVkdWNlcihjaGF0UmVkdWNlciwgV0lER0VUX0RFRkFVTFRfU1RBVEUpO1xuICByZXR1cm4gbGF5b3V0Q29udGV4dCAhPSBudWxsID8gbGF5b3V0Q29udGV4dCA6IHtcbiAgICBwaW46IHsgZGlzcGF0Y2g6IHBpbkRpc3BhdGNoLCBzdGF0ZTogcGluU3RhdGUgfSxcbiAgICB3aWRnZXQ6IHsgZGlzcGF0Y2g6IHdpZGdldERpc3BhdGNoLCBzdGF0ZTogd2lkZ2V0U3RhdGUgfVxuICB9O1xufVxuZnVuY3Rpb24gdXNlTWF5YmVMYXlvdXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3Q0LnVzZUNvbnRleHQoTGF5b3V0Q29udGV4dCk7XG59XG5cbi8vIHNyYy9jb250ZXh0L3BhcnRpY2lwYW50LWNvbnRleHQudHNcbmltcG9ydCAqIGFzIFJlYWN0NiBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2NvbnRleHQvdHJhY2stcmVmZXJlbmNlLWNvbnRleHQudHNcbmltcG9ydCAqIGFzIFJlYWN0NSBmcm9tIFwicmVhY3RcIjtcbnZhciBUcmFja1JlZkNvbnRleHQgPSBSZWFjdDUuY3JlYXRlQ29udGV4dChcbiAgdm9pZCAwXG4pO1xudmFyIFRyYWNrQ29udGV4dCA9IFRyYWNrUmVmQ29udGV4dDtcbmZ1bmN0aW9uIHVzZVRyYWNrQ29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZVRyYWNrUmVmQ29udGV4dCgpO1xufVxuZnVuY3Rpb24gdXNlVHJhY2tSZWZDb250ZXh0KCkge1xuICBjb25zdCB0cmFja1JlZmVyZW5jZSA9IFJlYWN0NS51c2VDb250ZXh0KFRyYWNrUmVmQ29udGV4dCk7XG4gIGlmICghdHJhY2tSZWZlcmVuY2UpIHtcbiAgICB0aHJvdyBFcnJvcihcInRyaWVkIHRvIGFjY2VzcyB0cmFjayBjb250ZXh0IG91dHNpZGUgb2YgdHJhY2sgY29udGV4dCBwcm92aWRlclwiKTtcbiAgfVxuICByZXR1cm4gdHJhY2tSZWZlcmVuY2U7XG59XG5mdW5jdGlvbiB1c2VNYXliZVRyYWNrQ29udGV4dCgpIHtcbiAgcmV0dXJuIHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG59XG5mdW5jdGlvbiB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0NS51c2VDb250ZXh0KFRyYWNrUmVmQ29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VFbnN1cmVUcmFja1JlZmVyZW5jZSh0cmFjaykge1xuICByZXR1cm4gdXNlRW5zdXJlVHJhY2tSZWYodHJhY2spO1xufVxuZnVuY3Rpb24gdXNlRW5zdXJlVHJhY2tSZWYodHJhY2tSZWYpIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IHJlZiA9IHRyYWNrUmVmICE9IG51bGwgPyB0cmFja1JlZiA6IGNvbnRleHQ7XG4gIGlmICghcmVmKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJObyBUcmFja1JlZiwgbWFrZSBzdXJlIHlvdSBhcmUgaW5zaWRlIGEgVHJhY2tSZWZDb250ZXh0IG9yIHBhc3MgdGhlIFRyYWNrUmVmIGV4cGxpY2l0bHlcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlZjtcbn1cblxuLy8gc3JjL2NvbnRleHQvcGFydGljaXBhbnQtY29udGV4dC50c1xudmFyIFBhcnRpY2lwYW50Q29udGV4dCA9IFJlYWN0Ni5jcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5mdW5jdGlvbiB1c2VQYXJ0aWNpcGFudENvbnRleHQoKSB7XG4gIGNvbnN0IHBhcnRpY2lwYW50ID0gUmVhY3Q2LnVzZUNvbnRleHQoUGFydGljaXBhbnRDb250ZXh0KTtcbiAgaWYgKCFwYXJ0aWNpcGFudCkge1xuICAgIHRocm93IEVycm9yKFwidHJpZWQgdG8gYWNjZXNzIHBhcnRpY2lwYW50IGNvbnRleHQgb3V0c2lkZSBvZiBwYXJ0aWNpcGFudCBjb250ZXh0IHByb3ZpZGVyXCIpO1xuICB9XG4gIHJldHVybiBwYXJ0aWNpcGFudDtcbn1cbmZ1bmN0aW9uIHVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3Q2LnVzZUNvbnRleHQoUGFydGljaXBhbnRDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZUVuc3VyZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50KSB7XG4gIHZhciBfYTtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0KCk7XG4gIGNvbnN0IHRyYWNrQ29udGV4dCA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IHAgPSAoX2EgPSBwYXJ0aWNpcGFudCAhPSBudWxsID8gcGFydGljaXBhbnQgOiBjb250ZXh0KSAhPSBudWxsID8gX2EgOiB0cmFja0NvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrQ29udGV4dC5wYXJ0aWNpcGFudDtcbiAgaWYgKCFwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJObyBwYXJ0aWNpcGFudCBwcm92aWRlZCwgbWFrZSBzdXJlIHlvdSBhcmUgaW5zaWRlIGEgcGFydGljaXBhbnQgY29udGV4dCBvciBwYXNzIHRoZSBwYXJ0aWNpcGFudCBleHBsaWNpdGx5XCJcbiAgICApO1xuICB9XG4gIHJldHVybiBwO1xufVxuXG4vLyBzcmMvY29udGV4dC9yb29tLWNvbnRleHQudHNcbmltcG9ydCAqIGFzIFJlYWN0NyBmcm9tIFwicmVhY3RcIjtcbnZhciBSb29tQ29udGV4dCA9IFJlYWN0Ny5jcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5mdW5jdGlvbiB1c2VSb29tQ29udGV4dCgpIHtcbiAgY29uc3QgY3R4ID0gUmVhY3Q3LnVzZUNvbnRleHQoUm9vbUNvbnRleHQpO1xuICBpZiAoIWN0eCkge1xuICAgIHRocm93IEVycm9yKFwidHJpZWQgdG8gYWNjZXNzIHJvb20gY29udGV4dCBvdXRzaWRlIG9mIGxpdmVraXQgcm9vbSBjb21wb25lbnRcIik7XG4gIH1cbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZU1heWJlUm9vbUNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdDcudXNlQ29udGV4dChSb29tQ29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VFbnN1cmVSb29tKHJvb20pIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZU1heWJlUm9vbUNvbnRleHQoKTtcbiAgY29uc3QgciA9IHJvb20gIT0gbnVsbCA/IHJvb20gOiBjb250ZXh0O1xuICBpZiAoIXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIk5vIHJvb20gcHJvdmlkZWQsIG1ha2Ugc3VyZSB5b3UgYXJlIGluc2lkZSBhIFJvb20gY29udGV4dCBvciBwYXNzIHRoZSByb29tIGV4cGxpY2l0bHlcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbi8vIHNyYy9jb250ZXh0L2ZlYXR1cmUtY29udGV4dC50c1xuaW1wb3J0ICogYXMgUmVhY3Q4IGZyb20gXCJyZWFjdFwiO1xudmFyIExLRmVhdHVyZUNvbnRleHQgPSBSZWFjdDguY3JlYXRlQ29udGV4dCh2b2lkIDApO1xuZnVuY3Rpb24gdXNlRmVhdHVyZUNvbnRleHQocmVxdWlyZTIpIHtcbiAgY29uc3QgY3R4ID0gUmVhY3Q4LnVzZUNvbnRleHQoTEtGZWF0dXJlQ29udGV4dCk7XG4gIGlmIChyZXF1aXJlMiA9PT0gdHJ1ZSkge1xuICAgIGlmIChjdHgpIHtcbiAgICAgIHJldHVybiBjdHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKFwidHJpZWQgdG8gYWNjZXNzIGZlYXR1cmUgY29udGV4dCwgYnV0IG5vbmUgaXMgcHJlc2VudFwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGN0eDtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZUF1ZGlvUGxheWJhY2sudHNcbmZ1bmN0aW9uIHVzZUF1ZGlvUGxheWJhY2socm9vbSkge1xuICBjb25zdCByb29tRW5zdXJlZCA9IHVzZUVuc3VyZVJvb20ocm9vbSk7XG4gIGNvbnN0IHN0YXJ0QXVkaW8gPSBSZWFjdDkudXNlQ2FsbGJhY2soKCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHlpZWxkIHJvb21FbnN1cmVkLnN0YXJ0QXVkaW8oKTtcbiAgfSksIFtyb29tRW5zdXJlZF0pO1xuICBjb25zdCBvYnNlcnZhYmxlID0gUmVhY3Q5LnVzZU1lbW8oXG4gICAgKCkgPT4gcm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZShyb29tRW5zdXJlZCksXG4gICAgW3Jvb21FbnN1cmVkXVxuICApO1xuICBjb25zdCB7IGNhblBsYXlBdWRpbyB9ID0gdXNlT2JzZXJ2YWJsZVN0YXRlKG9ic2VydmFibGUsIHtcbiAgICBjYW5QbGF5QXVkaW86IHJvb21FbnN1cmVkLmNhblBsYXliYWNrQXVkaW9cbiAgfSk7XG4gIHJldHVybiB7IGNhblBsYXlBdWRpbywgc3RhcnRBdWRpbyB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlQ2xlYXJQaW5CdXR0b24udHNcbmltcG9ydCB7IHNldHVwQ2xlYXJQaW5CdXR0b24gfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDEwIGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvbWVyZ2VQcm9wcy50c1xuaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcbmZ1bmN0aW9uIGNoYWluKC4uLmNhbGxiYWNrcykge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykge1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xuICBjb25zdCByZXN1bHQgPSBfX3NwcmVhZFZhbHVlcyh7fSwgYXJnc1swXSk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb3BzID0gYXJnc1tpXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgY29uc3QgYSA9IHJlc3VsdFtrZXldO1xuICAgICAgY29uc3QgYiA9IHByb3BzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGEgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYiA9PT0gXCJmdW5jdGlvblwiICYmIC8vIFRoaXMgaXMgYSBsb3QgZmFzdGVyIHRoYW4gYSByZWdleC5cbiAgICAgIGtleVswXSA9PT0gXCJvXCIgJiYga2V5WzFdID09PSBcIm5cIiAmJiBrZXkuY2hhckNvZGVBdCgyKSA+PSAvKiAnQScgKi9cbiAgICAgIDY1ICYmIGtleS5jaGFyQ29kZUF0KDIpIDw9IC8qICdaJyAqL1xuICAgICAgOTApIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBjaGFpbihhLCBiKTtcbiAgICAgIH0gZWxzZSBpZiAoKGtleSA9PT0gXCJjbGFzc05hbWVcIiB8fCBrZXkgPT09IFwiVU5TQUZFX2NsYXNzTmFtZVwiKSAmJiB0eXBlb2YgYSA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgYiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGNsc3goYSwgYik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRba2V5XSA9IGIgIT09IHZvaWQgMCA/IGIgOiBhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlQ2xlYXJQaW5CdXR0b24udHNcbmZ1bmN0aW9uIHVzZUNsZWFyUGluQnV0dG9uKHByb3BzKSB7XG4gIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB1c2VMYXlvdXRDb250ZXh0KCkucGluO1xuICBjb25zdCBidXR0b25Qcm9wcyA9IFJlYWN0MTAudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHNldHVwQ2xlYXJQaW5CdXR0b24oKTtcbiAgICBjb25zdCBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkOiAhKHN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0ZS5sZW5ndGgpLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgZGlzcGF0Y2goeyBtc2c6IFwiY2xlYXJfcGluXCIgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9LCBbcHJvcHMsIGRpc3BhdGNoLCBzdGF0ZV0pO1xuICByZXR1cm4geyBidXR0b25Qcm9wcyB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IudHNcbmltcG9ydCB7IHNldHVwQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uUXVhbGl0eSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0ICogYXMgUmVhY3QxMSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNvbm5lY3Rpb25RdWFsaXR5SW5kaWNhdG9yKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBwID0gdXNlRW5zdXJlUGFydGljaXBhbnQob3B0aW9ucy5wYXJ0aWNpcGFudCk7XG4gIGNvbnN0IHsgY2xhc3NOYW1lLCBjb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyIH0gPSBSZWFjdDExLnVzZU1lbW8oXG4gICAgKCkgPT4gc2V0dXBDb25uZWN0aW9uUXVhbGl0eUluZGljYXRvcihwKSxcbiAgICBbcF1cbiAgKTtcbiAgY29uc3QgcXVhbGl0eSA9IHVzZU9ic2VydmFibGVTdGF0ZShjb25uZWN0aW9uUXVhbGl0eU9ic2VydmVyLCBDb25uZWN0aW9uUXVhbGl0eS5Vbmtub3duKTtcbiAgcmV0dXJuIHsgY2xhc3NOYW1lLCBxdWFsaXR5IH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VDb25uZWN0aW9uU3RhdHVzLnRzXG5pbXBvcnQgeyBjb25uZWN0aW9uU3RhdGVPYnNlcnZlciB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0MTIgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VDb25uZWN0aW9uU3RhdGUocm9vbSkge1xuICBjb25zdCByID0gdXNlRW5zdXJlUm9vbShyb29tKTtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IFJlYWN0MTIudXNlTWVtbygoKSA9PiBjb25uZWN0aW9uU3RhdGVPYnNlcnZlcihyKSwgW3JdKTtcbiAgY29uc3QgY29ubmVjdGlvblN0YXRlID0gdXNlT2JzZXJ2YWJsZVN0YXRlKG9ic2VydmFibGUsIHIuc3RhdGUpO1xuICByZXR1cm4gY29ubmVjdGlvblN0YXRlO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlRGF0YUNoYW5uZWwudHNcbmltcG9ydCB7IHNldHVwRGF0YU1lc3NhZ2VIYW5kbGVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QxMyBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZURhdGFDaGFubmVsKHRvcGljT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgY29uc3Qgb25NZXNzYWdlID0gdHlwZW9mIHRvcGljT3JDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gdG9waWNPckNhbGxiYWNrIDogY2FsbGJhY2s7XG4gIGNvbnN0IHRvcGljID0gdHlwZW9mIHRvcGljT3JDYWxsYmFjayA9PT0gXCJzdHJpbmdcIiA/IHRvcGljT3JDYWxsYmFjayA6IHZvaWQgMDtcbiAgY29uc3Qgcm9vbSA9IHVzZVJvb21Db250ZXh0KCk7XG4gIGNvbnN0IHsgc2VuZCwgbWVzc2FnZU9ic2VydmFibGUsIGlzU2VuZGluZ09ic2VydmFibGUgfSA9IFJlYWN0MTMudXNlTWVtbyhcbiAgICAoKSA9PiBzZXR1cERhdGFNZXNzYWdlSGFuZGxlcihyb29tLCB0b3BpYywgb25NZXNzYWdlKSxcbiAgICBbcm9vbSwgdG9waWMsIG9uTWVzc2FnZV1cbiAgKTtcbiAgY29uc3QgbWVzc2FnZSA9IHVzZU9ic2VydmFibGVTdGF0ZShtZXNzYWdlT2JzZXJ2YWJsZSwgdm9pZCAwKTtcbiAgY29uc3QgaXNTZW5kaW5nID0gdXNlT2JzZXJ2YWJsZVN0YXRlKGlzU2VuZGluZ09ic2VydmFibGUsIGZhbHNlKTtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlLFxuICAgIHNlbmQsXG4gICAgaXNTZW5kaW5nXG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VEaXNjb25uZWN0QnV0dG9uLnRzXG5pbXBvcnQgeyBzZXR1cERpc2Nvbm5lY3RCdXR0b24gfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgeyBDb25uZWN0aW9uU3RhdGUgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCAqIGFzIFJlYWN0MTQgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VEaXNjb25uZWN0QnV0dG9uKHByb3BzKSB7XG4gIGNvbnN0IHJvb20gPSB1c2VSb29tQ29udGV4dCgpO1xuICBjb25zdCBjb25uZWN0aW9uU3RhdGUgPSB1c2VDb25uZWN0aW9uU3RhdGUocm9vbSk7XG4gIGNvbnN0IGJ1dHRvblByb3BzID0gUmVhY3QxNC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCB7IGNsYXNzTmFtZSwgZGlzY29ubmVjdCB9ID0gc2V0dXBEaXNjb25uZWN0QnV0dG9uKHJvb20pO1xuICAgIGNvbnN0IG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhwcm9wcywge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBkaXNjb25uZWN0KChfYSA9IHByb3BzLnN0b3BUcmFja3MpICE9IG51bGwgPyBfYSA6IHRydWUpO1xuICAgICAgfSxcbiAgICAgIGRpc2FibGVkOiBjb25uZWN0aW9uU3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWRcbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH0sIFtyb29tLCBwcm9wcywgY29ubmVjdGlvblN0YXRlXSk7XG4gIHJldHVybiB7IGJ1dHRvblByb3BzIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VGYWNpbmdNb2RlLnRzXG5pbXBvcnQgeyBMb2NhbFRyYWNrUHVibGljYXRpb24sIGZhY2luZ01vZGVGcm9tTG9jYWxUcmFjayB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gdXNlRmFjaW5nTW9kZSh0cmFja1JlZmVyZW5jZSkge1xuICBpZiAodHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24gaW5zdGFuY2VvZiBMb2NhbFRyYWNrUHVibGljYXRpb24pIHtcbiAgICBjb25zdCBsb2NhbFRyYWNrID0gdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24udHJhY2s7XG4gICAgaWYgKGxvY2FsVHJhY2spIHtcbiAgICAgIGNvbnN0IHsgZmFjaW5nTW9kZSB9ID0gZmFjaW5nTW9kZUZyb21Mb2NhbFRyYWNrKGxvY2FsVHJhY2spO1xuICAgICAgcmV0dXJuIGZhY2luZ01vZGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBcInVuZGVmaW5lZFwiO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlRm9jdXNUb2dnbGUudHNcbmltcG9ydCB7IHNldHVwRm9jdXNUb2dnbGUsIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDE1IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlRm9jdXNUb2dnbGUoeyB0cmFja1JlZiwgdHJhY2tTb3VyY2UsIHBhcnRpY2lwYW50LCBwcm9wcyB9KSB7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudCk7XG4gIGlmICghdHJhY2tSZWYgJiYgIXRyYWNrU291cmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidHJhY2tSZWYgb3IgdHJhY2tTb3VyY2UgbXVzdCBiZSBkZWZpbmVkLlwiKTtcbiAgfVxuICBjb25zdCBsYXlvdXRDb250ZXh0ID0gdXNlTWF5YmVMYXlvdXRDb250ZXh0KCk7XG4gIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSBSZWFjdDE1LnVzZU1lbW8oKCkgPT4gc2V0dXBGb2N1c1RvZ2dsZSgpLCBbXSk7XG4gIGNvbnN0IGluRm9jdXMgPSBSZWFjdDE1LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICh0cmFja1JlZikge1xuICAgICAgcmV0dXJuIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQodHJhY2tSZWYsIGxheW91dENvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IGxheW91dENvbnRleHQucGluLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHRyYWNrU291cmNlKSB7XG4gICAgICBjb25zdCB0cmFjayA9IHAuZ2V0VHJhY2sodHJhY2tTb3VyY2UpO1xuICAgICAgaWYgKChsYXlvdXRDb250ZXh0ID09IG51bGwgPyB2b2lkIDAgOiBsYXlvdXRDb250ZXh0LnBpbi5zdGF0ZSkgJiYgdHJhY2spIHtcbiAgICAgICAgcmV0dXJuIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQoXG4gICAgICAgICAgeyBwYXJ0aWNpcGFudDogcCwgc291cmNlOiB0cmFja1NvdXJjZSwgcHVibGljYXRpb246IHRyYWNrIH0sXG4gICAgICAgICAgbGF5b3V0Q29udGV4dC5waW4uc3RhdGVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJhY2tSZWYgb3IgdHJhY2tTb3VyY2UgYW5kIHBhcnRpY2lwYW50IG11c3QgYmUgZGVmaW5lZC5cIik7XG4gICAgfVxuICB9LCBbdHJhY2tSZWYsIGxheW91dENvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IGxheW91dENvbnRleHQucGluLnN0YXRlLCBwLCB0cmFja1NvdXJjZV0pO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IFJlYWN0MTUudXNlTWVtbyhcbiAgICAoKSA9PiBtZXJnZVByb3BzKHByb3BzLCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBvbkNsaWNrOiAoZXZlbnQpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgKF9hID0gcHJvcHMub25DbGljaykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwocHJvcHMsIGV2ZW50KTtcbiAgICAgICAgaWYgKHRyYWNrUmVmKSB7XG4gICAgICAgICAgaWYgKGluRm9jdXMpIHtcbiAgICAgICAgICAgIChfYyA9IGxheW91dENvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IChfYiA9IGxheW91dENvbnRleHQucGluKS5kaXNwYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIHtcbiAgICAgICAgICAgICAgbXNnOiBcImNsZWFyX3BpblwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKF9lID0gbGF5b3V0Q29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogKF9kID0gbGF5b3V0Q29udGV4dC5waW4pLmRpc3BhdGNoKSA9PSBudWxsID8gdm9pZCAwIDogX2UuY2FsbChfZCwge1xuICAgICAgICAgICAgICBtc2c6IFwic2V0X3BpblwiLFxuICAgICAgICAgICAgICB0cmFja1JlZmVyZW5jZTogdHJhY2tSZWZcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0cmFja1NvdXJjZSkge1xuICAgICAgICAgIGNvbnN0IHRyYWNrID0gcC5nZXRUcmFjayh0cmFja1NvdXJjZSk7XG4gICAgICAgICAgaWYgKChsYXlvdXRDb250ZXh0ID09IG51bGwgPyB2b2lkIDAgOiBsYXlvdXRDb250ZXh0LnBpbi5kaXNwYXRjaCkgJiYgdHJhY2spIHtcbiAgICAgICAgICAgIGlmIChpbkZvY3VzKSB7XG4gICAgICAgICAgICAgIGxheW91dENvbnRleHQucGluLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICBtc2c6IFwiY2xlYXJfcGluXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsYXlvdXRDb250ZXh0LnBpbi5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgbXNnOiBcInNldF9waW5cIixcbiAgICAgICAgICAgICAgICB0cmFja1JlZmVyZW5jZToge1xuICAgICAgICAgICAgICAgICAgcGFydGljaXBhbnQ6IHAsXG4gICAgICAgICAgICAgICAgICBwdWJsaWNhdGlvbjogdHJhY2ssXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHRyYWNrLnNvdXJjZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksXG4gICAgW3Byb3BzLCBjbGFzc05hbWUsIHRyYWNrUmVmLCB0cmFja1NvdXJjZSwgaW5Gb2N1cywgbGF5b3V0Q29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogbGF5b3V0Q29udGV4dC5waW4sIHBdXG4gICk7XG4gIHJldHVybiB7IG1lcmdlZFByb3BzLCBpbkZvY3VzIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VHcmlkTGF5b3V0LnRzXG5pbXBvcnQgeyBHUklEX0xBWU9VVFMsIHNlbGVjdEdyaWRMYXlvdXQgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDE2IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlR3JpZExheW91dChncmlkRWxlbWVudCwgdHJhY2tDb3VudCkge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHVzZVNpemUoZ3JpZEVsZW1lbnQpO1xuICBjb25zdCBsYXlvdXQgPSB3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMCA/IHNlbGVjdEdyaWRMYXlvdXQoR1JJRF9MQVlPVVRTLCB0cmFja0NvdW50LCB3aWR0aCwgaGVpZ2h0KSA6IEdSSURfTEFZT1VUU1swXTtcbiAgUmVhY3QxNi51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChncmlkRWxlbWVudC5jdXJyZW50ICYmIGxheW91dCkge1xuICAgICAgZ3JpZEVsZW1lbnQuY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tbGstY29sLWNvdW50XCIsIGxheW91dCA9PSBudWxsID8gdm9pZCAwIDogbGF5b3V0LmNvbHVtbnMudG9TdHJpbmcoKSk7XG4gICAgICBncmlkRWxlbWVudC5jdXJyZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1say1yb3ctY291bnRcIiwgbGF5b3V0ID09IG51bGwgPyB2b2lkIDAgOiBsYXlvdXQucm93cy50b1N0cmluZygpKTtcbiAgICB9XG4gIH0sIFtncmlkRWxlbWVudCwgbGF5b3V0XSk7XG4gIHJldHVybiB7XG4gICAgbGF5b3V0XG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VJc011dGVkLnRzXG5pbXBvcnQge1xuICBnZXRUcmFja1JlZmVyZW5jZUlkLFxuICBtdXRlZE9ic2VydmVyXG59IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0MTcgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VJc011dGVkKHNvdXJjZU9yVHJhY2tSZWYsIG9wdGlvbnMgPSB7fSkge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBwYXNzZWRQYXJ0aWNpcGFudCA9IHR5cGVvZiBzb3VyY2VPclRyYWNrUmVmID09PSBcInN0cmluZ1wiID8gb3B0aW9ucy5wYXJ0aWNpcGFudCA6IHNvdXJjZU9yVHJhY2tSZWYucGFydGljaXBhbnQ7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChwYXNzZWRQYXJ0aWNpcGFudCk7XG4gIGNvbnN0IHJlZiA9IHR5cGVvZiBzb3VyY2VPclRyYWNrUmVmID09PSBcInN0cmluZ1wiID8geyBwYXJ0aWNpcGFudDogcCwgc291cmNlOiBzb3VyY2VPclRyYWNrUmVmIH0gOiBzb3VyY2VPclRyYWNrUmVmO1xuICBjb25zdCBbaXNNdXRlZCwgc2V0SXNNdXRlZF0gPSBSZWFjdDE3LnVzZVN0YXRlKFxuICAgICEhKCgoX2EgPSByZWYucHVibGljYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYS5pc011dGVkKSB8fCAoKF9iID0gcC5nZXRUcmFjayhyZWYuc291cmNlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmlzTXV0ZWQpKVxuICApO1xuICBSZWFjdDE3LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBtdXRlZE9ic2VydmVyKHJlZikuc3Vic2NyaWJlKHNldElzTXV0ZWQpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lci51bnN1YnNjcmliZSgpO1xuICB9LCBbZ2V0VHJhY2tSZWZlcmVuY2VJZChyZWYpXSk7XG4gIHJldHVybiBpc011dGVkO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlSXNTcGVha2luZy50c1xuaW1wb3J0IHsgY3JlYXRlSXNTcGVha2luZ09ic2VydmVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QxOCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUlzU3BlYWtpbmcocGFydGljaXBhbnQpIHtcbiAgY29uc3QgcCA9IHVzZUVuc3VyZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50KTtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IFJlYWN0MTgudXNlTWVtbygoKSA9PiBjcmVhdGVJc1NwZWFraW5nT2JzZXJ2ZXIocCksIFtwXSk7XG4gIGNvbnN0IGlzU3BlYWtpbmcgPSB1c2VPYnNlcnZhYmxlU3RhdGUob2JzZXJ2YWJsZSwgcC5pc1NwZWFraW5nKTtcbiAgcmV0dXJuIGlzU3BlYWtpbmc7XG59XG5cbi8vIHNyYy9ob29rcy91c2VMaXZlS2l0Um9vbS50c1xuaW1wb3J0IHsgbG9nLCBzZXR1cExpdmVLaXRSb29tIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0IHsgUm9vbSwgTWVkaWFEZXZpY2VGYWlsdXJlLCBSb29tRXZlbnQsIENvbm5lY3Rpb25TdGF0ZSBhcyBDb25uZWN0aW9uU3RhdGUyIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDE5IGZyb20gXCJyZWFjdFwiO1xudmFyIGRlZmF1bHRSb29tUHJvcHMgPSB7XG4gIGNvbm5lY3Q6IHRydWUsXG4gIGF1ZGlvOiBmYWxzZSxcbiAgdmlkZW86IGZhbHNlXG59O1xuZnVuY3Rpb24gdXNlTGl2ZUtpdFJvb20ocHJvcHMpIHtcbiAgY29uc3QgX2EgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZGVmYXVsdFJvb21Qcm9wcyksIHByb3BzKSwge1xuICAgIHRva2VuLFxuICAgIHNlcnZlclVybCxcbiAgICBvcHRpb25zLFxuICAgIHJvb206IHBhc3NlZFJvb20sXG4gICAgY29ubmVjdE9wdGlvbnMsXG4gICAgY29ubmVjdCxcbiAgICBhdWRpbyxcbiAgICB2aWRlbyxcbiAgICBzY3JlZW4sXG4gICAgb25Db25uZWN0ZWQsXG4gICAgb25EaXNjb25uZWN0ZWQsXG4gICAgb25FcnJvcixcbiAgICBvbk1lZGlhRGV2aWNlRmFpbHVyZSxcbiAgICBvbkVuY3J5cHRpb25FcnJvcixcbiAgICBzaW11bGF0ZVBhcnRpY2lwYW50c1xuICB9ID0gX2EsIHJlc3QgPSBfX29ialJlc3QoX2EsIFtcbiAgICBcInRva2VuXCIsXG4gICAgXCJzZXJ2ZXJVcmxcIixcbiAgICBcIm9wdGlvbnNcIixcbiAgICBcInJvb21cIixcbiAgICBcImNvbm5lY3RPcHRpb25zXCIsXG4gICAgXCJjb25uZWN0XCIsXG4gICAgXCJhdWRpb1wiLFxuICAgIFwidmlkZW9cIixcbiAgICBcInNjcmVlblwiLFxuICAgIFwib25Db25uZWN0ZWRcIixcbiAgICBcIm9uRGlzY29ubmVjdGVkXCIsXG4gICAgXCJvbkVycm9yXCIsXG4gICAgXCJvbk1lZGlhRGV2aWNlRmFpbHVyZVwiLFxuICAgIFwib25FbmNyeXB0aW9uRXJyb3JcIixcbiAgICBcInNpbXVsYXRlUGFydGljaXBhbnRzXCJcbiAgXSk7XG4gIGlmIChvcHRpb25zICYmIHBhc3NlZFJvb20pIHtcbiAgICBsb2cud2FybihcbiAgICAgIFwid2hlbiB1c2luZyBhIG1hbnVhbGx5IGNyZWF0ZWQgcm9vbSwgdGhlIG9wdGlvbnMgb2JqZWN0IHdpbGwgYmUgaWdub3JlZC4gc2V0IHRoZSBkZXNpcmVkIG9wdGlvbnMgZGlyZWN0bHkgd2hlbiBjcmVhdGluZyB0aGUgcm9vbSBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuICBjb25zdCBbcm9vbSwgc2V0Um9vbV0gPSBSZWFjdDE5LnVzZVN0YXRlKCk7XG4gIFJlYWN0MTkudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRSb29tKHBhc3NlZFJvb20gIT0gbnVsbCA/IHBhc3NlZFJvb20gOiBuZXcgUm9vbShvcHRpb25zKSk7XG4gIH0sIFtwYXNzZWRSb29tXSk7XG4gIGNvbnN0IGh0bWxQcm9wcyA9IFJlYWN0MTkudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgeyBjbGFzc05hbWUgfSA9IHNldHVwTGl2ZUtpdFJvb20oKTtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhyZXN0LCB7IGNsYXNzTmFtZSB9KTtcbiAgfSwgW3Jlc3RdKTtcbiAgUmVhY3QxOS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcm9vbSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBvblNpZ25hbENvbm5lY3RlZCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGxvY2FsUCA9IHJvb20ubG9jYWxQYXJ0aWNpcGFudDtcbiAgICAgIGxvZy5kZWJ1ZyhcInRyeWluZyB0byBwdWJsaXNoIGxvY2FsIHRyYWNrc1wiKTtcbiAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgbG9jYWxQLnNldE1pY3JvcGhvbmVFbmFibGVkKCEhYXVkaW8sIHR5cGVvZiBhdWRpbyAhPT0gXCJib29sZWFuXCIgPyBhdWRpbyA6IHZvaWQgMCksXG4gICAgICAgIGxvY2FsUC5zZXRDYW1lcmFFbmFibGVkKCEhdmlkZW8sIHR5cGVvZiB2aWRlbyAhPT0gXCJib29sZWFuXCIgPyB2aWRlbyA6IHZvaWQgMCksXG4gICAgICAgIGxvY2FsUC5zZXRTY3JlZW5TaGFyZUVuYWJsZWQoISFzY3JlZW4sIHR5cGVvZiBzY3JlZW4gIT09IFwiYm9vbGVhblwiID8gc2NyZWVuIDogdm9pZCAwKVxuICAgICAgXSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgbG9nLndhcm4oZSk7XG4gICAgICAgIG9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IG9uRXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1lZGlhRGV2aWNlRXJyb3IgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgbWVkaWFEZXZpY2VGYWlsdXJlID0gTWVkaWFEZXZpY2VGYWlsdXJlLmdldEZhaWx1cmUoZSk7XG4gICAgICBvbk1lZGlhRGV2aWNlRmFpbHVyZSA9PSBudWxsID8gdm9pZCAwIDogb25NZWRpYURldmljZUZhaWx1cmUobWVkaWFEZXZpY2VGYWlsdXJlKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUVuY3J5cHRpb25FcnJvciA9IChlKSA9PiB7XG4gICAgICBvbkVuY3J5cHRpb25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogb25FbmNyeXB0aW9uRXJyb3IoZSk7XG4gICAgfTtcbiAgICByb29tLm9uKFJvb21FdmVudC5TaWduYWxDb25uZWN0ZWQsIG9uU2lnbmFsQ29ubmVjdGVkKS5vbihSb29tRXZlbnQuTWVkaWFEZXZpY2VzRXJyb3IsIGhhbmRsZU1lZGlhRGV2aWNlRXJyb3IpLm9uKFJvb21FdmVudC5FbmNyeXB0aW9uRXJyb3IsIGhhbmRsZUVuY3J5cHRpb25FcnJvcik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJvb20ub2ZmKFJvb21FdmVudC5TaWduYWxDb25uZWN0ZWQsIG9uU2lnbmFsQ29ubmVjdGVkKS5vZmYoUm9vbUV2ZW50Lk1lZGlhRGV2aWNlc0Vycm9yLCBoYW5kbGVNZWRpYURldmljZUVycm9yKS5vZmYoUm9vbUV2ZW50LkVuY3J5cHRpb25FcnJvciwgaGFuZGxlRW5jcnlwdGlvbkVycm9yKTtcbiAgICB9O1xuICB9LCBbcm9vbSwgYXVkaW8sIHZpZGVvLCBzY3JlZW4sIG9uRXJyb3IsIG9uRW5jcnlwdGlvbkVycm9yLCBvbk1lZGlhRGV2aWNlRmFpbHVyZV0pO1xuICBSZWFjdDE5LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFyb29tKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChzaW11bGF0ZVBhcnRpY2lwYW50cykge1xuICAgICAgcm9vbS5zaW11bGF0ZVBhcnRpY2lwYW50cyh7XG4gICAgICAgIHBhcnRpY2lwYW50czoge1xuICAgICAgICAgIGNvdW50OiBzaW11bGF0ZVBhcnRpY2lwYW50c1xuICAgICAgICB9LFxuICAgICAgICBwdWJsaXNoOiB7XG4gICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgdXNlUmVhbFRyYWNrczogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgbG9nLmRlYnVnKFwibm8gdG9rZW4geWV0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXNlcnZlclVybCkge1xuICAgICAgbG9nLndhcm4oXCJubyBsaXZla2l0IHVybCBwcm92aWRlZFwiKTtcbiAgICAgIG9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IG9uRXJyb3IoRXJyb3IoXCJubyBsaXZla2l0IHVybCBwcm92aWRlZFwiKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjb25uZWN0KSB7XG4gICAgICBsb2cuZGVidWcoXCJjb25uZWN0aW5nXCIpO1xuICAgICAgcm9vbS5jb25uZWN0KHNlcnZlclVybCwgdG9rZW4sIGNvbm5lY3RPcHRpb25zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBsb2cud2FybihlKTtcbiAgICAgICAgb25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogb25FcnJvcihlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cuZGVidWcoXCJkaXNjb25uZWN0aW5nIGJlY2F1c2UgY29ubmVjdCBpcyBmYWxzZVwiKTtcbiAgICAgIHJvb20uZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfSwgW1xuICAgIGNvbm5lY3QsXG4gICAgdG9rZW4sXG4gICAgSlNPTi5zdHJpbmdpZnkoY29ubmVjdE9wdGlvbnMpLFxuICAgIHJvb20sXG4gICAgb25FcnJvcixcbiAgICBzZXJ2ZXJVcmwsXG4gICAgc2ltdWxhdGVQYXJ0aWNpcGFudHNcbiAgXSk7XG4gIFJlYWN0MTkudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXJvb20pXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgY29ubmVjdGlvblN0YXRlQ2hhbmdlTGlzdGVuZXIgPSAoc3RhdGUpID0+IHtcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBDb25uZWN0aW9uU3RhdGUyLkRpc2Nvbm5lY3RlZDpcbiAgICAgICAgICBpZiAob25EaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICBvbkRpc2Nvbm5lY3RlZCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZTIuQ29ubmVjdGVkOlxuICAgICAgICAgIGlmIChvbkNvbm5lY3RlZClcbiAgICAgICAgICAgIG9uQ29ubmVjdGVkKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcbiAgICByb29tLm9uKFJvb21FdmVudC5Db25uZWN0aW9uU3RhdGVDaGFuZ2VkLCBjb25uZWN0aW9uU3RhdGVDaGFuZ2VMaXN0ZW5lcik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJvb20ub2ZmKFJvb21FdmVudC5Db25uZWN0aW9uU3RhdGVDaGFuZ2VkLCBjb25uZWN0aW9uU3RhdGVDaGFuZ2VMaXN0ZW5lcik7XG4gICAgfTtcbiAgfSwgW3Rva2VuLCBvbkNvbm5lY3RlZCwgb25EaXNjb25uZWN0ZWQsIHJvb21dKTtcbiAgUmVhY3QxOS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghcm9vbSlcbiAgICAgIHJldHVybjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbG9nLmluZm8oXCJkaXNjb25uZWN0aW5nIG9uIG9ubW91bnRcIik7XG4gICAgICByb29tLmRpc2Nvbm5lY3QoKTtcbiAgICB9O1xuICB9LCBbcm9vbV0pO1xuICByZXR1cm4geyByb29tLCBodG1sUHJvcHMgfTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZUxvY2FsUGFydGljaXBhbnQudHNcbmltcG9ydCB7IG9ic2VydmVQYXJ0aWNpcGFudE1lZGlhIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QyMCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUxvY2FsUGFydGljaXBhbnQob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJvb20gPSB1c2VFbnN1cmVSb29tKG9wdGlvbnMucm9vbSk7XG4gIGNvbnN0IFtsb2NhbFBhcnRpY2lwYW50LCBzZXRMb2NhbFBhcnRpY2lwYW50XSA9IFJlYWN0MjAudXNlU3RhdGUocm9vbS5sb2NhbFBhcnRpY2lwYW50KTtcbiAgY29uc3QgW2lzTWljcm9waG9uZUVuYWJsZWQsIHNldElzTWljcm9waG9uZUVuYWJsZWRdID0gUmVhY3QyMC51c2VTdGF0ZShcbiAgICBsb2NhbFBhcnRpY2lwYW50LmlzTWljcm9waG9uZUVuYWJsZWRcbiAgKTtcbiAgY29uc3QgW2lzQ2FtZXJhRW5hYmxlZCwgc2V0SXNDYW1lcmFFbmFibGVkXSA9IFJlYWN0MjAudXNlU3RhdGUoXG4gICAgbG9jYWxQYXJ0aWNpcGFudC5pc01pY3JvcGhvbmVFbmFibGVkXG4gICk7XG4gIGNvbnN0IFtsYXN0TWljcm9waG9uZUVycm9yLCBzZXRMYXN0TWljcm9waG9uZUVycm9yXSA9IFJlYWN0MjAudXNlU3RhdGUoXG4gICAgbG9jYWxQYXJ0aWNpcGFudC5sYXN0TWljcm9waG9uZUVycm9yXG4gICk7XG4gIGNvbnN0IFtsYXN0Q2FtZXJhRXJyb3IsIHNldExhc3RDYW1lcmFFcnJvcl0gPSBSZWFjdDIwLnVzZVN0YXRlKGxvY2FsUGFydGljaXBhbnQubGFzdENhbWVyYUVycm9yKTtcbiAgY29uc3QgW2lzU2NyZWVuU2hhcmVFbmFibGVkLCBzZXRJc1NjcmVlblNoYXJlRW5hYmxlZF0gPSBSZWFjdDIwLnVzZVN0YXRlKFxuICAgIGxvY2FsUGFydGljaXBhbnQuaXNNaWNyb3Bob25lRW5hYmxlZFxuICApO1xuICBjb25zdCBbbWljcm9waG9uZVRyYWNrLCBzZXRNaWNyb3Bob25lVHJhY2tdID0gUmVhY3QyMC51c2VTdGF0ZShcbiAgICB2b2lkIDBcbiAgKTtcbiAgY29uc3QgW2NhbWVyYVRyYWNrLCBzZXRDYW1lcmFUcmFja10gPSBSZWFjdDIwLnVzZVN0YXRlKHZvaWQgMCk7XG4gIGNvbnN0IGhhbmRsZVVwZGF0ZSA9IChtZWRpYSkgPT4ge1xuICAgIHNldElzQ2FtZXJhRW5hYmxlZChtZWRpYS5pc0NhbWVyYUVuYWJsZWQpO1xuICAgIHNldElzTWljcm9waG9uZUVuYWJsZWQobWVkaWEuaXNNaWNyb3Bob25lRW5hYmxlZCk7XG4gICAgc2V0SXNTY3JlZW5TaGFyZUVuYWJsZWQobWVkaWEuaXNTY3JlZW5TaGFyZUVuYWJsZWQpO1xuICAgIHNldENhbWVyYVRyYWNrKG1lZGlhLmNhbWVyYVRyYWNrKTtcbiAgICBzZXRNaWNyb3Bob25lVHJhY2sobWVkaWEubWljcm9waG9uZVRyYWNrKTtcbiAgICBzZXRMYXN0TWljcm9waG9uZUVycm9yKG1lZGlhLnBhcnRpY2lwYW50Lmxhc3RNaWNyb3Bob25lRXJyb3IpO1xuICAgIHNldExhc3RDYW1lcmFFcnJvcihtZWRpYS5wYXJ0aWNpcGFudC5sYXN0Q2FtZXJhRXJyb3IpO1xuICAgIHNldExvY2FsUGFydGljaXBhbnQobWVkaWEucGFydGljaXBhbnQpO1xuICB9O1xuICBSZWFjdDIwLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBvYnNlcnZlUGFydGljaXBhbnRNZWRpYShyb29tLmxvY2FsUGFydGljaXBhbnQpLnN1YnNjcmliZShoYW5kbGVVcGRhdGUpO1xuICAgIHJldHVybiAoKSA9PiBsaXN0ZW5lci51bnN1YnNjcmliZSgpO1xuICB9LCBbcm9vbV0pO1xuICByZXR1cm4ge1xuICAgIGlzTWljcm9waG9uZUVuYWJsZWQsXG4gICAgaXNTY3JlZW5TaGFyZUVuYWJsZWQsXG4gICAgaXNDYW1lcmFFbmFibGVkLFxuICAgIG1pY3JvcGhvbmVUcmFjayxcbiAgICBjYW1lcmFUcmFjayxcbiAgICBsYXN0TWljcm9waG9uZUVycm9yLFxuICAgIGxhc3RDYW1lcmFFcnJvcixcbiAgICBsb2NhbFBhcnRpY2lwYW50XG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VMb2NhbFBhcnRpY2lwYW50UGVybWlzc2lvbnMudHNcbmltcG9ydCB7IHBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QyMSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucygpIHtcbiAgY29uc3Qgcm9vbSA9IHVzZVJvb21Db250ZXh0KCk7XG4gIGNvbnN0IHBlcm1pc3Npb25PYnNlcnZlciA9IFJlYWN0MjEudXNlTWVtbyhcbiAgICAoKSA9PiBwYXJ0aWNpcGFudFBlcm1pc3Npb25PYnNlcnZlcihyb29tLmxvY2FsUGFydGljaXBhbnQpLFxuICAgIFtyb29tXVxuICApO1xuICBjb25zdCBwZXJtaXNzaW9ucyA9IHVzZU9ic2VydmFibGVTdGF0ZShwZXJtaXNzaW9uT2JzZXJ2ZXIsIHJvb20ubG9jYWxQYXJ0aWNpcGFudC5wZXJtaXNzaW9ucyk7XG4gIHJldHVybiBwZXJtaXNzaW9ucztcbn1cblxuLy8gc3JjL2hvb2tzL3VzZU1lZGlhRGV2aWNlU2VsZWN0LnRzXG5pbXBvcnQgeyBjcmVhdGVNZWRpYURldmljZU9ic2VydmVyLCBzZXR1cERldmljZVNlbGVjdG9yLCBsb2cgYXMgbG9nMiB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0MjIgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VNZWRpYURldmljZVNlbGVjdCh7XG4gIGtpbmQsXG4gIHJvb20sXG4gIHRyYWNrLFxuICByZXF1ZXN0UGVybWlzc2lvbnMsXG4gIG9uRXJyb3Jcbn0pIHtcbiAgY29uc3Qgcm9vbUNvbnRleHQgPSB1c2VNYXliZVJvb21Db250ZXh0KCk7XG4gIGNvbnN0IGRldmljZU9ic2VydmVyID0gUmVhY3QyMi51c2VNZW1vKFxuICAgICgpID0+IGNyZWF0ZU1lZGlhRGV2aWNlT2JzZXJ2ZXIoa2luZCwgb25FcnJvciwgcmVxdWVzdFBlcm1pc3Npb25zKSxcbiAgICBba2luZCwgcmVxdWVzdFBlcm1pc3Npb25zLCBvbkVycm9yXVxuICApO1xuICBjb25zdCBkZXZpY2VzID0gdXNlT2JzZXJ2YWJsZVN0YXRlKGRldmljZU9ic2VydmVyLCBbXSk7XG4gIGNvbnN0IFtjdXJyZW50RGV2aWNlSWQsIHNldEN1cnJlbnREZXZpY2VJZF0gPSBSZWFjdDIyLnVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCB7IGNsYXNzTmFtZSwgYWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSwgc2V0QWN0aXZlTWVkaWFEZXZpY2UgfSA9IFJlYWN0MjIudXNlTWVtbyhcbiAgICAoKSA9PiBzZXR1cERldmljZVNlbGVjdG9yKGtpbmQsIHJvb20gIT0gbnVsbCA/IHJvb20gOiByb29tQ29udGV4dCwgdHJhY2spLFxuICAgIFtraW5kLCByb29tLCByb29tQ29udGV4dCwgdHJhY2tdXG4gICk7XG4gIFJlYWN0MjIudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IGFjdGl2ZURldmljZU9ic2VydmFibGUuc3Vic2NyaWJlKChkZXZpY2VJZCkgPT4ge1xuICAgICAgbG9nMi5pbmZvKFwic2V0Q3VycmVudERldmljZUlkXCIsIGRldmljZUlkKTtcbiAgICAgIGlmIChkZXZpY2VJZClcbiAgICAgICAgc2V0Q3VycmVudERldmljZUlkKGRldmljZUlkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbGlzdGVuZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxpc3RlbmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2FjdGl2ZURldmljZU9ic2VydmFibGVdKTtcbiAgcmV0dXJuIHsgZGV2aWNlcywgY2xhc3NOYW1lLCBhY3RpdmVEZXZpY2VJZDogY3VycmVudERldmljZUlkLCBzZXRBY3RpdmVNZWRpYURldmljZSB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlTWVkaWFEZXZpY2VzLnRzXG5pbXBvcnQgKiBhcyBSZWFjdDIzIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlTWVkaWFEZXZpY2VPYnNlcnZlciBhcyBjcmVhdGVNZWRpYURldmljZU9ic2VydmVyMiB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmZ1bmN0aW9uIHVzZU1lZGlhRGV2aWNlcyh7IGtpbmQgfSkge1xuICBjb25zdCBkZXZpY2VPYnNlcnZlciA9IFJlYWN0MjMudXNlTWVtbygoKSA9PiBjcmVhdGVNZWRpYURldmljZU9ic2VydmVyMihraW5kKSwgW2tpbmRdKTtcbiAgY29uc3QgZGV2aWNlcyA9IHVzZU9ic2VydmFibGVTdGF0ZShkZXZpY2VPYnNlcnZlciwgW10pO1xuICByZXR1cm4gZGV2aWNlcztcbn1cblxuLy8gc3JjL2hvb2tzL3VzZU1lZGlhVHJhY2tCeVNvdXJjZU9yTmFtZS50c1xuaW1wb3J0IHsgaXNUcmFja1JlZmVyZW5jZSB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCB7IHNldHVwTWVkaWFUcmFjaywgbG9nIGFzIGxvZzQsIGlzTG9jYWwsIGdldFRyYWNrQnlJZGVudGlmaWVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QyNSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL3V0aWxzLnRzXG5pbXBvcnQgKiBhcyBSZWFjdDI0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgbG9nIGFzIGxvZzMgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5mdW5jdGlvbiBpc1Byb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gdm9pZCAwO1xufVxuZnVuY3Rpb24gbWVyZ2VQcm9wczIoLi4ucHJvcHMpIHtcbiAgcmV0dXJuIG1lcmdlUHJvcHMoLi4ucHJvcHMuZmlsdGVyKGlzUHJvcCkpO1xufVxuZnVuY3Rpb24gY2xvbmVTaW5nbGVDaGlsZChjaGlsZHJlbiwgcHJvcHMsIGtleSkge1xuICByZXR1cm4gUmVhY3QyNC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIChjaGlsZCkgPT4ge1xuICAgIGlmIChSZWFjdDI0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBSZWFjdDI0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pKSB7XG4gICAgICByZXR1cm4gUmVhY3QyNC5jbG9uZUVsZW1lbnQoY2hpbGQsIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHByb3BzKSwgeyBrZXkgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ1N0eWxlcyhlbCkge1xuICB2YXIgX2EsIF9iO1xuICBpZiAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHR1cmJvL25vLXVuZGVjbGFyZWQtZW52LXZhcnNcbiAgICAoKChfYSA9IHByb2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IHByb2Nlc3MuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2EuTk9ERV9FTlYpID09PSBcImRldlwiIHx8ICgoX2IgPSBwcm9jZXNzID09IG51bGwgPyB2b2lkIDAgOiBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLk5PREVfRU5WKSA9PT0gXCJkZXZlbG9wbWVudFwiKSAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG4gICkge1xuICAgIGNvbnN0IHRhcmdldCA9IGVsICE9IG51bGwgPyBlbCA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGstcm9vbS1jb250YWluZXJcIik7XG4gICAgaWYgKHRhcmdldCAmJiAhZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmdldFByb3BlcnR5VmFsdWUoXCItLWxrLWhhcy1pbXBvcnRlZC1zdHlsZXNcIikpIHtcbiAgICAgIGxvZzMud2FybihcbiAgICAgICAgXCJJdCBsb29rcyBsaWtlIHlvdSdyZSBub3QgdXNpbmcgdGhlIGBAbGl2ZWtpdC9jb21wb25lbnRzLXN0eWxlcyBwYWNrYWdlYC4gVG8gcmVuZGVyIHRoZSBVSSB3aXRoIHRoZSBkZWZhdWx0IHN0eWxpbmcsIHBsZWFzZSBpbXBvcnQgaXQgaW4geW91ciBsYXlvdXQgb3IgcGFnZS5cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL2hvb2tzL3VzZU1lZGlhVHJhY2tCeVNvdXJjZU9yTmFtZS50c1xuZnVuY3Rpb24gdXNlTWVkaWFUcmFja0J5U291cmNlT3JOYW1lKG9ic2VydmVyT3B0aW9ucywgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYTtcbiAgY29uc3QgW3B1YmxpY2F0aW9uLCBzZXRQdWJsaWNhdGlvbl0gPSBSZWFjdDI1LnVzZVN0YXRlKGdldFRyYWNrQnlJZGVudGlmaWVyKG9ic2VydmVyT3B0aW9ucykpO1xuICBjb25zdCBbaXNNdXRlZCwgc2V0TXV0ZWRdID0gUmVhY3QyNS51c2VTdGF0ZShwdWJsaWNhdGlvbiA9PSBudWxsID8gdm9pZCAwIDogcHVibGljYXRpb24uaXNNdXRlZCk7XG4gIGNvbnN0IFtpc1N1YnNjcmliZWQsIHNldFN1YnNjcmliZWRdID0gUmVhY3QyNS51c2VTdGF0ZShwdWJsaWNhdGlvbiA9PSBudWxsID8gdm9pZCAwIDogcHVibGljYXRpb24uaXNTdWJzY3JpYmVkKTtcbiAgY29uc3QgW3RyYWNrLCBzZXRUcmFja10gPSBSZWFjdDI1LnVzZVN0YXRlKHB1YmxpY2F0aW9uID09IG51bGwgPyB2b2lkIDAgOiBwdWJsaWNhdGlvbi50cmFjayk7XG4gIGNvbnN0IFtvcmllbnRhdGlvbiwgc2V0T3JpZW50YXRpb25dID0gUmVhY3QyNS51c2VTdGF0ZShcImxhbmRzY2FwZVwiKTtcbiAgY29uc3QgcHJldmlvdXNFbGVtZW50ID0gUmVhY3QyNS51c2VSZWYoKTtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHRyYWNrT2JzZXJ2ZXIgfSA9IFJlYWN0MjUudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHNldHVwTWVkaWFUcmFjayhvYnNlcnZlck9wdGlvbnMpO1xuICB9LCBbXG4gICAgKF9hID0gb2JzZXJ2ZXJPcHRpb25zLnBhcnRpY2lwYW50LnNpZCkgIT0gbnVsbCA/IF9hIDogb2JzZXJ2ZXJPcHRpb25zLnBhcnRpY2lwYW50LmlkZW50aXR5LFxuICAgIG9ic2VydmVyT3B0aW9ucy5zb3VyY2UsXG4gICAgaXNUcmFja1JlZmVyZW5jZShvYnNlcnZlck9wdGlvbnMpICYmIG9ic2VydmVyT3B0aW9ucy5wdWJsaWNhdGlvbi50cmFja1NpZFxuICBdKTtcbiAgUmVhY3QyNS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRyYWNrT2JzZXJ2ZXIuc3Vic2NyaWJlKChwdWJsaWNhdGlvbjIpID0+IHtcbiAgICAgIGxvZzQuZGVidWcoXCJ1cGRhdGUgdHJhY2tcIiwgcHVibGljYXRpb24yKTtcbiAgICAgIHNldFB1YmxpY2F0aW9uKHB1YmxpY2F0aW9uMik7XG4gICAgICBzZXRNdXRlZChwdWJsaWNhdGlvbjIgPT0gbnVsbCA/IHZvaWQgMCA6IHB1YmxpY2F0aW9uMi5pc011dGVkKTtcbiAgICAgIHNldFN1YnNjcmliZWQocHVibGljYXRpb24yID09IG51bGwgPyB2b2lkIDAgOiBwdWJsaWNhdGlvbjIuaXNTdWJzY3JpYmVkKTtcbiAgICAgIHNldFRyYWNrKHB1YmxpY2F0aW9uMiA9PSBudWxsID8gdm9pZCAwIDogcHVibGljYXRpb24yLnRyYWNrKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaXB0aW9uID09IG51bGwgPyB2b2lkIDAgOiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfSwgW3RyYWNrT2JzZXJ2ZXJdKTtcbiAgUmVhY3QyNS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhciBfYTIsIF9iO1xuICAgIGlmICh0cmFjaykge1xuICAgICAgaWYgKHByZXZpb3VzRWxlbWVudC5jdXJyZW50KSB7XG4gICAgICAgIHRyYWNrLmRldGFjaChwcmV2aW91c0VsZW1lbnQuY3VycmVudCk7XG4gICAgICB9XG4gICAgICBpZiAoKChfYTIgPSBvcHRpb25zLmVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuY3VycmVudCkgJiYgIShpc0xvY2FsKG9ic2VydmVyT3B0aW9ucy5wYXJ0aWNpcGFudCkgJiYgKHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5raW5kKSA9PT0gXCJhdWRpb1wiKSkge1xuICAgICAgICB0cmFjay5hdHRhY2gob3B0aW9ucy5lbGVtZW50LmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBwcmV2aW91c0VsZW1lbnQuY3VycmVudCA9IChfYiA9IG9wdGlvbnMuZWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmN1cnJlbnQ7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQuY3VycmVudCkge1xuICAgICAgICB0cmFjayA9PSBudWxsID8gdm9pZCAwIDogdHJhY2suZGV0YWNoKHByZXZpb3VzRWxlbWVudC5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbdHJhY2ssIG9wdGlvbnMuZWxlbWVudF0pO1xuICBSZWFjdDI1LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9hMiwgX2I7XG4gICAgaWYgKHR5cGVvZiAoKF9hMiA9IHB1YmxpY2F0aW9uID09IG51bGwgPyB2b2lkIDAgOiBwdWJsaWNhdGlvbi5kaW1lbnNpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLndpZHRoKSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgKChfYiA9IHB1YmxpY2F0aW9uID09IG51bGwgPyB2b2lkIDAgOiBwdWJsaWNhdGlvbi5kaW1lbnNpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2IuaGVpZ2h0KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29uc3Qgb3JpZW50YXRpb25fID0gcHVibGljYXRpb24uZGltZW5zaW9ucy53aWR0aCA+IHB1YmxpY2F0aW9uLmRpbWVuc2lvbnMuaGVpZ2h0ID8gXCJsYW5kc2NhcGVcIiA6IFwicG9ydHJhaXRcIjtcbiAgICAgIHNldE9yaWVudGF0aW9uKG9yaWVudGF0aW9uXyk7XG4gICAgfVxuICB9LCBbcHVibGljYXRpb25dKTtcbiAgcmV0dXJuIHtcbiAgICBwdWJsaWNhdGlvbixcbiAgICBpc011dGVkLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cmFjayxcbiAgICBlbGVtZW50UHJvcHM6IG1lcmdlUHJvcHMyKG9wdGlvbnMucHJvcHMsIF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIFwiZGF0YS1say1sb2NhbC1wYXJ0aWNpcGFudFwiOiBvYnNlcnZlck9wdGlvbnMucGFydGljaXBhbnQuaXNMb2NhbCxcbiAgICAgIFwiZGF0YS1say1zb3VyY2VcIjogcHVibGljYXRpb24gPT0gbnVsbCA/IHZvaWQgMCA6IHB1YmxpY2F0aW9uLnNvdXJjZVxuICAgIH0sIChwdWJsaWNhdGlvbiA9PSBudWxsID8gdm9pZCAwIDogcHVibGljYXRpb24ua2luZCkgPT09IFwidmlkZW9cIiAmJiB7IFwiZGF0YS1say1vcmllbnRhdGlvblwiOiBvcmllbnRhdGlvbiB9KSlcbiAgfTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZU1lZGlhVHJhY2sudHNcbmZ1bmN0aW9uIHVzZU1lZGlhVHJhY2soc291cmNlLCBwYXJ0aWNpcGFudCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudCk7XG4gIHJldHVybiB1c2VNZWRpYVRyYWNrQnlTb3VyY2VPck5hbWUoeyBzb3VyY2UsIHBhcnRpY2lwYW50OiBwIH0sIG9wdGlvbnMpO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlTWVkaWFUcmFja0J5TmFtZS50c1xuZnVuY3Rpb24gdXNlTWVkaWFUcmFja0J5TmFtZShuYW1lLCBwYXJ0aWNpcGFudCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChwYXJ0aWNpcGFudCk7XG4gIHJldHVybiB1c2VNZWRpYVRyYWNrQnlTb3VyY2VPck5hbWUoeyBuYW1lLCBwYXJ0aWNpcGFudDogcCB9LCBvcHRpb25zKTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVBhZ2luYXRpb24udHNcbmltcG9ydCAqIGFzIFJlYWN0MjcgZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9ob29rcy91c2VWaXN1YWxTdGFibGVVcGRhdGUudHNcbmltcG9ydCB7IGxvZyBhcyBsb2c1LCBzb3J0VHJhY2tSZWZlcmVuY2VzLCB1cGRhdGVQYWdlcyB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0MjYgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VWaXN1YWxTdGFibGVVcGRhdGUodHJhY2tSZWZlcmVuY2VzLCBtYXhJdGVtc09uUGFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGxhc3RUcmFja1JlZnMgPSBSZWFjdDI2LnVzZVJlZihbXSk7XG4gIGNvbnN0IGxhc3RNYXhJdGVtc09uUGFnZSA9IFJlYWN0MjYudXNlUmVmKC0xKTtcbiAgY29uc3QgbGF5b3V0Q2hhbmdlZCA9IG1heEl0ZW1zT25QYWdlICE9PSBsYXN0TWF4SXRlbXNPblBhZ2UuY3VycmVudDtcbiAgY29uc3Qgc29ydGVkVHJhY2tSZWZzID0gdHlwZW9mIG9wdGlvbnMuY3VzdG9tU29ydEZ1bmN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmN1c3RvbVNvcnRGdW5jdGlvbih0cmFja1JlZmVyZW5jZXMpIDogc29ydFRyYWNrUmVmZXJlbmNlcyh0cmFja1JlZmVyZW5jZXMpO1xuICBsZXQgdXBkYXRlZFRyYWNrUmVmcyA9IFsuLi5zb3J0ZWRUcmFja1JlZnNdO1xuICBpZiAobGF5b3V0Q2hhbmdlZCA9PT0gZmFsc2UpIHtcbiAgICB0cnkge1xuICAgICAgdXBkYXRlZFRyYWNrUmVmcyA9IHVwZGF0ZVBhZ2VzKGxhc3RUcmFja1JlZnMuY3VycmVudCwgc29ydGVkVHJhY2tSZWZzLCBtYXhJdGVtc09uUGFnZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZzUuZXJyb3IoXCJFcnJvciB3aGlsZSBydW5uaW5nIHVwZGF0ZVBhZ2VzKCk6IFwiLCBlcnJvcik7XG4gICAgfVxuICB9XG4gIGlmIChsYXlvdXRDaGFuZ2VkKSB7XG4gICAgbGFzdFRyYWNrUmVmcy5jdXJyZW50ID0gc29ydGVkVHJhY2tSZWZzO1xuICB9IGVsc2Uge1xuICAgIGxhc3RUcmFja1JlZnMuY3VycmVudCA9IHVwZGF0ZWRUcmFja1JlZnM7XG4gIH1cbiAgbGFzdE1heEl0ZW1zT25QYWdlLmN1cnJlbnQgPSBtYXhJdGVtc09uUGFnZTtcbiAgcmV0dXJuIHVwZGF0ZWRUcmFja1JlZnM7XG59XG5cbi8vIHNyYy9ob29rcy91c2VQYWdpbmF0aW9uLnRzXG5mdW5jdGlvbiB1c2VQYWdpbmF0aW9uKGl0ZW1QZXJQYWdlLCB0cmFja1JlZmVyZW5jZXMpIHtcbiAgY29uc3QgW2N1cnJlbnRQYWdlLCBzZXRDdXJyZW50UGFnZV0gPSBSZWFjdDI3LnVzZVN0YXRlKDEpO1xuICBjb25zdCB0b3RhbFBhZ2VDb3VudCA9IE1hdGgubWF4KE1hdGguY2VpbCh0cmFja1JlZmVyZW5jZXMubGVuZ3RoIC8gaXRlbVBlclBhZ2UpLCAxKTtcbiAgaWYgKGN1cnJlbnRQYWdlID4gdG90YWxQYWdlQ291bnQpIHtcbiAgICBzZXRDdXJyZW50UGFnZSh0b3RhbFBhZ2VDb3VudCk7XG4gIH1cbiAgY29uc3QgbGFzdEl0ZW1JbmRleCA9IGN1cnJlbnRQYWdlICogaXRlbVBlclBhZ2U7XG4gIGNvbnN0IGZpcnN0SXRlbUluZGV4ID0gbGFzdEl0ZW1JbmRleCAtIGl0ZW1QZXJQYWdlO1xuICBjb25zdCBjaGFuZ2VQYWdlID0gKGRpcmVjdGlvbikgPT4ge1xuICAgIHNldEN1cnJlbnRQYWdlKChzdGF0ZSkgPT4ge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSB0b3RhbFBhZ2VDb3VudCkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGUgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZSAtIDE7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdvVG9QYWdlID0gKG51bSkgPT4ge1xuICAgIGlmIChudW0gPiB0b3RhbFBhZ2VDb3VudCkge1xuICAgICAgc2V0Q3VycmVudFBhZ2UodG90YWxQYWdlQ291bnQpO1xuICAgIH0gZWxzZSBpZiAobnVtIDwgMSkge1xuICAgICAgc2V0Q3VycmVudFBhZ2UoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEN1cnJlbnRQYWdlKG51bSk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVkVHJhY2tSZWZlcmVuY2VzID0gdXNlVmlzdWFsU3RhYmxlVXBkYXRlKHRyYWNrUmVmZXJlbmNlcywgaXRlbVBlclBhZ2UpO1xuICBjb25zdCB0cmFja3NPblBhZ2UgPSB1cGRhdGVkVHJhY2tSZWZlcmVuY2VzLnNsaWNlKGZpcnN0SXRlbUluZGV4LCBsYXN0SXRlbUluZGV4KTtcbiAgcmV0dXJuIHtcbiAgICB0b3RhbFBhZ2VDb3VudCxcbiAgICBuZXh0UGFnZTogKCkgPT4gY2hhbmdlUGFnZShcIm5leHRcIiksXG4gICAgcHJldlBhZ2U6ICgpID0+IGNoYW5nZVBhZ2UoXCJwcmV2aW91c1wiKSxcbiAgICBzZXRQYWdlOiBnb1RvUGFnZSxcbiAgICBmaXJzdEl0ZW1JbmRleCxcbiAgICBsYXN0SXRlbUluZGV4LFxuICAgIHRyYWNrczogdHJhY2tzT25QYWdlLFxuICAgIGN1cnJlbnRQYWdlXG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VQYXJ0aWNpcGFudEluZm8udHNcbmltcG9ydCB7IHBhcnRpY2lwYW50SW5mb09ic2VydmVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QyOCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVBhcnRpY2lwYW50SW5mbyhwcm9wcyA9IHt9KSB7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChwcm9wcy5wYXJ0aWNpcGFudCk7XG4gIGNvbnN0IGluZm9PYnNlcnZlciA9IFJlYWN0MjgudXNlTWVtbygoKSA9PiBwYXJ0aWNpcGFudEluZm9PYnNlcnZlcihwKSwgW3BdKTtcbiAgY29uc3QgeyBpZGVudGl0eSwgbmFtZSwgbWV0YWRhdGEgfSA9IHVzZU9ic2VydmFibGVTdGF0ZShpbmZvT2JzZXJ2ZXIsIHtcbiAgICBuYW1lOiBwLm5hbWUsXG4gICAgaWRlbnRpdHk6IHAuaWRlbnRpdHksXG4gICAgbWV0YWRhdGE6IHAubWV0YWRhdGFcbiAgfSk7XG4gIHJldHVybiB7IGlkZW50aXR5LCBuYW1lLCBtZXRhZGF0YSB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlUGFydGljaXBhbnRQZXJtaXNzaW9ucy50c1xuaW1wb3J0ICogYXMgUmVhY3QyOSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyIGFzIHBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyMiB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmZ1bmN0aW9uIHVzZVBhcnRpY2lwYW50UGVybWlzc2lvbnMob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHAgPSB1c2VFbnN1cmVQYXJ0aWNpcGFudChvcHRpb25zLnBhcnRpY2lwYW50KTtcbiAgY29uc3QgcGVybWlzc2lvbk9ic2VydmVyID0gUmVhY3QyOS51c2VNZW1vKCgpID0+IHBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyMihwKSwgW3BdKTtcbiAgY29uc3QgcGVybWlzc2lvbnMgPSB1c2VPYnNlcnZhYmxlU3RhdGUocGVybWlzc2lvbk9ic2VydmVyLCBwLnBlcm1pc3Npb25zKTtcbiAgcmV0dXJuIHBlcm1pc3Npb25zO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlUGFydGljaXBhbnRUaWxlLnRzXG5pbXBvcnQgeyBzZXR1cFBhcnRpY2lwYW50VGlsZSB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCB7IFRyYWNrIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDMwIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlUGFydGljaXBhbnRUaWxlKHtcbiAgdHJhY2tSZWYsXG4gIHBhcnRpY2lwYW50LFxuICBzb3VyY2UsXG4gIHB1YmxpY2F0aW9uLFxuICBvblBhcnRpY2lwYW50Q2xpY2ssXG4gIGRpc2FibGVTcGVha2luZ0luZGljYXRvcixcbiAgaHRtbFByb3BzXG59KSB7XG4gIGNvbnN0IG1heWJlVHJhY2tSZWYgPSB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpO1xuICBjb25zdCBwID0gdXNlRW5zdXJlUGFydGljaXBhbnQocGFydGljaXBhbnQpO1xuICBjb25zdCB0cmFja1JlZmVyZW5jZSA9IFJlYWN0MzAudXNlTWVtbygoKSA9PiB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgY29uc3QgX3NvdXJjZSA9IChfYiA9IChfYSA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5zb3VyY2UpICE9IG51bGwgPyBfYSA6IG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYuc291cmNlKSAhPSBudWxsID8gX2IgOiBzb3VyY2U7XG4gICAgaWYgKF9zb3VyY2UgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIk1pc3NpbmcgdHJhY2sgYHNvdXJjZWAsIHByb3ZpZGVkIGl0IHZpYSBgdHJhY2tSZWZgLCBgc291cmNlYCBwcm9wZXJ0eSBvciB2aWEgYFRyYWNrUmVmQ29udGV4dGAuXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBwYXJ0aWNpcGFudDogKF9kID0gKF9jID0gdHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrUmVmLnBhcnRpY2lwYW50KSAhPSBudWxsID8gX2MgOiBtYXliZVRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiBtYXliZVRyYWNrUmVmLnBhcnRpY2lwYW50KSAhPSBudWxsID8gX2QgOiBwLFxuICAgICAgcHVibGljYXRpb246IChfZiA9IChfZSA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9lIDogbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9mIDogcHVibGljYXRpb24sXG4gICAgICBzb3VyY2U6IF9zb3VyY2VcbiAgICB9O1xuICB9LCBbXG4gICAgdHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrUmVmLnBhcnRpY2lwYW50LFxuICAgIHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5zb3VyY2UsXG4gICAgdHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrUmVmLnB1YmxpY2F0aW9uLFxuICAgIG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYucGFydGljaXBhbnQsXG4gICAgbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5zb3VyY2UsXG4gICAgbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wdWJsaWNhdGlvbixcbiAgICBwLFxuICAgIHNvdXJjZSxcbiAgICBwdWJsaWNhdGlvblxuICBdKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBSZWFjdDMwLnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSBzZXR1cFBhcnRpY2lwYW50VGlsZSgpO1xuICAgIHJldHVybiBtZXJnZVByb3BzKGh0bWxQcm9wcywge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgb25DbGljazogKGV2ZW50KSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYSA9IGh0bWxQcm9wcy5vbkNsaWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChodG1sUHJvcHMsIGV2ZW50KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvblBhcnRpY2lwYW50Q2xpY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnN0IHRyYWNrID0gKF9iID0gdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24pICE9IG51bGwgPyBfYiA6IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmdldFRyYWNrKHRyYWNrUmVmZXJlbmNlLnNvdXJjZSk7XG4gICAgICAgICAgb25QYXJ0aWNpcGFudENsaWNrKHsgcGFydGljaXBhbnQ6IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LCB0cmFjayB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LCBbXG4gICAgaHRtbFByb3BzLFxuICAgIG9uUGFydGljaXBhbnRDbGljayxcbiAgICB0cmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbixcbiAgICB0cmFja1JlZmVyZW5jZS5zb3VyY2UsXG4gICAgdHJhY2tSZWZlcmVuY2UucGFydGljaXBhbnRcbiAgXSk7XG4gIGNvbnN0IGlzVmlkZW9NdXRlZCA9IHVzZUlzTXV0ZWQoVHJhY2suU291cmNlLkNhbWVyYSwgeyBwYXJ0aWNpcGFudDogdHJhY2tSZWZlcmVuY2UucGFydGljaXBhbnQgfSk7XG4gIGNvbnN0IGlzQXVkaW9NdXRlZCA9IHVzZUlzTXV0ZWQoVHJhY2suU291cmNlLk1pY3JvcGhvbmUsIHtcbiAgICBwYXJ0aWNpcGFudDogdHJhY2tSZWZlcmVuY2UucGFydGljaXBhbnRcbiAgfSk7XG4gIGNvbnN0IGlzU3BlYWtpbmcgPSB1c2VJc1NwZWFraW5nKHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50KTtcbiAgY29uc3QgZmFjaW5nTW9kZSA9IHVzZUZhY2luZ01vZGUodHJhY2tSZWZlcmVuY2UpO1xuICByZXR1cm4ge1xuICAgIGVsZW1lbnRQcm9wczogX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgXCJkYXRhLWxrLWF1ZGlvLW11dGVkXCI6IGlzQXVkaW9NdXRlZCxcbiAgICAgIFwiZGF0YS1say12aWRlby1tdXRlZFwiOiBpc1ZpZGVvTXV0ZWQsXG4gICAgICBcImRhdGEtbGstc3BlYWtpbmdcIjogZGlzYWJsZVNwZWFraW5nSW5kaWNhdG9yID09PSB0cnVlID8gZmFsc2UgOiBpc1NwZWFraW5nLFxuICAgICAgXCJkYXRhLWxrLWxvY2FsLXBhcnRpY2lwYW50XCI6IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LmlzTG9jYWwsXG4gICAgICBcImRhdGEtbGstc291cmNlXCI6IHRyYWNrUmVmZXJlbmNlLnNvdXJjZSxcbiAgICAgIFwiZGF0YS1say1mYWNpbmctbW9kZVwiOiBmYWNpbmdNb2RlXG4gICAgfSwgbWVyZ2VkUHJvcHMpXG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VSZW1vdGVQYXJ0aWNpcGFudHMudHNcbmltcG9ydCB7IGNvbm5lY3RlZFBhcnRpY2lwYW50c09ic2VydmVyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QzMSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVJlbW90ZVBhcnRpY2lwYW50cyhvcHRpb25zID0ge30pIHtcbiAgY29uc3Qgcm9vbSA9IHVzZUVuc3VyZVJvb20ob3B0aW9ucy5yb29tKTtcbiAgY29uc3QgW3BhcnRpY2lwYW50cywgc2V0UGFydGljaXBhbnRzXSA9IFJlYWN0MzEudXNlU3RhdGUoW10pO1xuICBSZWFjdDMxLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbGlzdGVuZXIgPSBjb25uZWN0ZWRQYXJ0aWNpcGFudHNPYnNlcnZlcihyb29tLCB7XG4gICAgICBhZGRpdGlvbmFsUm9vbUV2ZW50czogb3B0aW9ucy51cGRhdGVPbmx5T25cbiAgICB9KS5zdWJzY3JpYmUoc2V0UGFydGljaXBhbnRzKTtcbiAgICByZXR1cm4gKCkgPT4gbGlzdGVuZXIudW5zdWJzY3JpYmUoKTtcbiAgfSwgW3Jvb20sIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMudXBkYXRlT25seU9uKV0pO1xuICByZXR1cm4gcGFydGljaXBhbnRzO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlUGFydGljaXBhbnRzLnRzXG5mdW5jdGlvbiB1c2VQYXJ0aWNpcGFudHMob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJlbW90ZVBhcnRpY2lwYW50cyA9IHVzZVJlbW90ZVBhcnRpY2lwYW50cyhvcHRpb25zKTtcbiAgY29uc3QgeyBsb2NhbFBhcnRpY2lwYW50IH0gPSB1c2VMb2NhbFBhcnRpY2lwYW50KG9wdGlvbnMpO1xuICByZXR1cm4gW2xvY2FsUGFydGljaXBhbnQsIC4uLnJlbW90ZVBhcnRpY2lwYW50c107XG59XG5cbi8vIHNyYy9ob29rcy91c2VQaW5uZWRUcmFja3MudHNcbmltcG9ydCAqIGFzIFJlYWN0MzIgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VQaW5uZWRUcmFja3MobGF5b3V0Q29udGV4dCkge1xuICBsYXlvdXRDb250ZXh0ID0gdXNlRW5zdXJlTGF5b3V0Q29udGV4dChsYXlvdXRDb250ZXh0KTtcbiAgcmV0dXJuIFJlYWN0MzIudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKChsYXlvdXRDb250ZXh0ID09IG51bGwgPyB2b2lkIDAgOiBsYXlvdXRDb250ZXh0LnBpbi5zdGF0ZSkgIT09IHZvaWQgMCAmJiBsYXlvdXRDb250ZXh0LnBpbi5zdGF0ZS5sZW5ndGggPj0gMSkge1xuICAgICAgcmV0dXJuIGxheW91dENvbnRleHQucGluLnN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH0sIFtsYXlvdXRDb250ZXh0LnBpbi5zdGF0ZV0pO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlUmVtb3RlUGFydGljaXBhbnQudHNcbmltcG9ydCB7IGNvbm5lY3RlZFBhcnRpY2lwYW50T2JzZXJ2ZXIgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDMzIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlUmVtb3RlUGFydGljaXBhbnQoaWRlbnRpdHksIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCByb29tID0gdXNlUm9vbUNvbnRleHQoKTtcbiAgY29uc3QgW3VwZGF0ZU9ubHlPbl0gPSBSZWFjdDMzLnVzZVN0YXRlKG9wdGlvbnMudXBkYXRlT25seU9uKTtcbiAgY29uc3Qgb2JzZXJ2YWJsZSA9IFJlYWN0MzMudXNlTWVtbyhcbiAgICAoKSA9PiBjb25uZWN0ZWRQYXJ0aWNpcGFudE9ic2VydmVyKHJvb20sIGlkZW50aXR5LCB7IGFkZGl0aW9uYWxFdmVudHM6IHVwZGF0ZU9ubHlPbiB9KSxcbiAgICBbcm9vbSwgaWRlbnRpdHksIHVwZGF0ZU9ubHlPbl1cbiAgKTtcbiAgY29uc3QgcGFydGljaXBhbnQgPSB1c2VPYnNlcnZhYmxlU3RhdGUoXG4gICAgb2JzZXJ2YWJsZSxcbiAgICByb29tLmdldFBhcnRpY2lwYW50QnlJZGVudGl0eShpZGVudGl0eSlcbiAgKTtcbiAgcmV0dXJuIHBhcnRpY2lwYW50O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlUm9vbUluZm8udHNcbmltcG9ydCB7IHJvb21JbmZvT2JzZXJ2ZXIgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDM0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlUm9vbUluZm8ob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHJvb20gPSB1c2VFbnN1cmVSb29tKG9wdGlvbnMucm9vbSk7XG4gIGNvbnN0IGluZm9PYnNlcnZlciA9IFJlYWN0MzQudXNlTWVtbygoKSA9PiByb29tSW5mb09ic2VydmVyKHJvb20pLCBbcm9vbV0pO1xuICBjb25zdCB7IG5hbWUsIG1ldGFkYXRhIH0gPSB1c2VPYnNlcnZhYmxlU3RhdGUoaW5mb09ic2VydmVyLCB7XG4gICAgbmFtZTogcm9vbS5uYW1lLFxuICAgIG1ldGFkYXRhOiByb29tLm1ldGFkYXRhXG4gIH0pO1xuICByZXR1cm4geyBuYW1lLCBtZXRhZGF0YSB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU29ydGVkUGFydGljaXBhbnRzLnRzXG5pbXBvcnQgeyBzb3J0UGFydGljaXBhbnRzIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QzNiBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2hvb2tzL3VzZVNwZWFraW5nUGFydGljaXBhbnRzLnRzXG5pbXBvcnQgeyBhY3RpdmVTcGVha2VyT2JzZXJ2ZXIgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDM1IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlU3BlYWtpbmdQYXJ0aWNpcGFudHMoKSB7XG4gIGNvbnN0IHJvb20gPSB1c2VSb29tQ29udGV4dCgpO1xuICBjb25zdCBzcGVha2VyT2JzZXJ2ZXIgPSBSZWFjdDM1LnVzZU1lbW8oKCkgPT4gYWN0aXZlU3BlYWtlck9ic2VydmVyKHJvb20pLCBbcm9vbV0pO1xuICBjb25zdCBhY3RpdmVTcGVha2VycyA9IHVzZU9ic2VydmFibGVTdGF0ZShzcGVha2VyT2JzZXJ2ZXIsIHJvb20uYWN0aXZlU3BlYWtlcnMpO1xuICByZXR1cm4gYWN0aXZlU3BlYWtlcnM7XG59XG5cbi8vIHNyYy9ob29rcy91c2VTb3J0ZWRQYXJ0aWNpcGFudHMudHNcbmZ1bmN0aW9uIHVzZVNvcnRlZFBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMpIHtcbiAgY29uc3QgW3NvcnRlZFBhcnRpY2lwYW50cywgc2V0U29ydGVkUGFydGljaXBhbnRzXSA9IFJlYWN0MzYudXNlU3RhdGUoXG4gICAgc29ydFBhcnRpY2lwYW50cyhwYXJ0aWNpcGFudHMpXG4gICk7XG4gIGNvbnN0IGFjdGl2ZVNwZWFrZXJzID0gdXNlU3BlYWtpbmdQYXJ0aWNpcGFudHMoKTtcbiAgUmVhY3QzNi51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNvcnRlZFBhcnRpY2lwYW50cyhzb3J0UGFydGljaXBhbnRzKHBhcnRpY2lwYW50cykpO1xuICB9LCBbYWN0aXZlU3BlYWtlcnMsIHBhcnRpY2lwYW50c10pO1xuICByZXR1cm4gc29ydGVkUGFydGljaXBhbnRzO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU3RhcnRBdWRpby50c1xuaW1wb3J0IHsgc2V0dXBTdGFydEF1ZGlvIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QzNyBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVN0YXJ0QXVkaW8oeyByb29tLCBwcm9wcyB9KSB7XG4gIGNvbnN0IHJvb21FbnN1cmVkID0gdXNlRW5zdXJlUm9vbShyb29tKTtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGU6IHJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUyLCBoYW5kbGVTdGFydEF1ZGlvUGxheWJhY2sgfSA9IFJlYWN0MzcudXNlTWVtbyhcbiAgICAoKSA9PiBzZXR1cFN0YXJ0QXVkaW8oKSxcbiAgICBbXVxuICApO1xuICBjb25zdCBvYnNlcnZhYmxlID0gUmVhY3QzNy51c2VNZW1vKFxuICAgICgpID0+IHJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUyKHJvb21FbnN1cmVkKSxcbiAgICBbcm9vbUVuc3VyZWQsIHJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUyXVxuICApO1xuICBjb25zdCB7IGNhblBsYXlBdWRpbyB9ID0gdXNlT2JzZXJ2YWJsZVN0YXRlKG9ic2VydmFibGUsIHtcbiAgICBjYW5QbGF5QXVkaW86IHJvb21FbnN1cmVkLmNhblBsYXliYWNrQXVkaW9cbiAgfSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gUmVhY3QzNy51c2VNZW1vKFxuICAgICgpID0+IG1lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGFuZGxlU3RhcnRBdWRpb1BsYXliYWNrKHJvb21FbnN1cmVkKTtcbiAgICAgIH0sXG4gICAgICBzdHlsZTogeyBkaXNwbGF5OiBjYW5QbGF5QXVkaW8gPyBcIm5vbmVcIiA6IFwiYmxvY2tcIiB9XG4gICAgfSksXG4gICAgW3Byb3BzLCBjbGFzc05hbWUsIGNhblBsYXlBdWRpbywgaGFuZGxlU3RhcnRBdWRpb1BsYXliYWNrLCByb29tRW5zdXJlZF1cbiAgKTtcbiAgcmV0dXJuIHsgbWVyZ2VkUHJvcHMsIGNhblBsYXlBdWRpbyB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU3RhcnRWaWRlby50c1xuaW1wb3J0IHsgc2V0dXBTdGFydFZpZGVvIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QzOCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVN0YXJ0VmlkZW8oeyByb29tLCBwcm9wcyB9KSB7XG4gIGNvbnN0IHJvb21FbnN1cmVkID0gdXNlRW5zdXJlUm9vbShyb29tKTtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHJvb21WaWRlb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUsIGhhbmRsZVN0YXJ0VmlkZW9QbGF5YmFjayB9ID0gUmVhY3QzOC51c2VNZW1vKFxuICAgICgpID0+IHNldHVwU3RhcnRWaWRlbygpLFxuICAgIFtdXG4gICk7XG4gIGNvbnN0IG9ic2VydmFibGUgPSBSZWFjdDM4LnVzZU1lbW8oXG4gICAgKCkgPT4gcm9vbVZpZGVvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZShyb29tRW5zdXJlZCksXG4gICAgW3Jvb21FbnN1cmVkLCByb29tVmlkZW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlXVxuICApO1xuICBjb25zdCB7IGNhblBsYXlWaWRlbyB9ID0gdXNlT2JzZXJ2YWJsZVN0YXRlKG9ic2VydmFibGUsIHtcbiAgICBjYW5QbGF5VmlkZW86IHJvb21FbnN1cmVkLmNhblBsYXliYWNrVmlkZW9cbiAgfSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gUmVhY3QzOC51c2VNZW1vKFxuICAgICgpID0+IG1lcmdlUHJvcHMocHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGFuZGxlU3RhcnRWaWRlb1BsYXliYWNrKHJvb21FbnN1cmVkKTtcbiAgICAgIH0sXG4gICAgICBzdHlsZTogeyBkaXNwbGF5OiBjYW5QbGF5VmlkZW8gPyBcIm5vbmVcIiA6IFwiYmxvY2tcIiB9XG4gICAgfSksXG4gICAgW3Byb3BzLCBjbGFzc05hbWUsIGNhblBsYXlWaWRlbywgaGFuZGxlU3RhcnRWaWRlb1BsYXliYWNrLCByb29tRW5zdXJlZF1cbiAgKTtcbiAgcmV0dXJuIHsgbWVyZ2VkUHJvcHMsIGNhblBsYXlWaWRlbyB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU3dpcGUudHNcbmltcG9ydCAqIGFzIFJlYWN0MzkgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VTd2lwZShlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBjb25zdCB0b3VjaFN0YXJ0ID0gUmVhY3QzOS51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHRvdWNoRW5kID0gUmVhY3QzOS51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG1pblN3aXBlRGlzdGFuY2UgPSAoX2EgPSBvcHRpb25zLm1pblN3aXBlRGlzdGFuY2UpICE9IG51bGwgPyBfYSA6IDUwO1xuICBjb25zdCBvblRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcbiAgICB0b3VjaEVuZC5jdXJyZW50ID0gbnVsbDtcbiAgICB0b3VjaFN0YXJ0LmN1cnJlbnQgPSBldmVudC50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFg7XG4gIH07XG4gIGNvbnN0IG9uVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgdG91Y2hFbmQuY3VycmVudCA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WDtcbiAgfTtcbiAgY29uc3Qgb25Ub3VjaEVuZCA9IFJlYWN0MzkudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghdG91Y2hTdGFydC5jdXJyZW50IHx8ICF0b3VjaEVuZC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRpc3RhbmNlID0gdG91Y2hTdGFydC5jdXJyZW50IC0gdG91Y2hFbmQuY3VycmVudDtcbiAgICBjb25zdCBpc0xlZnRTd2lwZSA9IGRpc3RhbmNlID4gbWluU3dpcGVEaXN0YW5jZTtcbiAgICBjb25zdCBpc1JpZ2h0U3dpcGUgPSBkaXN0YW5jZSA8IC1taW5Td2lwZURpc3RhbmNlO1xuICAgIGlmIChpc0xlZnRTd2lwZSAmJiBvcHRpb25zLm9uTGVmdFN3aXBlKVxuICAgICAgb3B0aW9ucy5vbkxlZnRTd2lwZSgpO1xuICAgIGlmIChpc1JpZ2h0U3dpcGUgJiYgb3B0aW9ucy5vblJpZ2h0U3dpcGUpXG4gICAgICBvcHRpb25zLm9uUmlnaHRTd2lwZSgpO1xuICB9LCBbbWluU3dpcGVEaXN0YW5jZSwgb3B0aW9uc10pO1xuICBSZWFjdDM5LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudENvcHkgPSBlbGVtZW50LmN1cnJlbnQ7XG4gICAgaWYgKGVsZW1lbnRDb3B5KSB7XG4gICAgICBlbGVtZW50Q29weS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBvblRvdWNoU3RhcnQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGVsZW1lbnRDb3B5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgb25Ub3VjaE1vdmUsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGVsZW1lbnRDb3B5LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBvblRvdWNoRW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZWxlbWVudENvcHkpIHtcbiAgICAgICAgZWxlbWVudENvcHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgb25Ub3VjaFN0YXJ0KTtcbiAgICAgICAgZWxlbWVudENvcHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBvblRvdWNoTW92ZSk7XG4gICAgICAgIGVsZW1lbnRDb3B5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBvblRvdWNoRW5kKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZWxlbWVudCwgb25Ub3VjaEVuZF0pO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlQ2hhdFRvZ2dsZS50c1xuaW1wb3J0IHsgc2V0dXBDaGF0VG9nZ2xlIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3Q0MCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNoYXRUb2dnbGUoeyBwcm9wcyB9KSB7XG4gIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB1c2VMYXlvdXRDb250ZXh0KCkud2lkZ2V0O1xuICBjb25zdCB7IGNsYXNzTmFtZSB9ID0gUmVhY3Q0MC51c2VNZW1vKCgpID0+IHNldHVwQ2hhdFRvZ2dsZSgpLCBbXSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gUmVhY3Q0MC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhwcm9wcywge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgZGlzcGF0Y2goeyBtc2c6IFwidG9nZ2xlX2NoYXRcIiB9KTtcbiAgICAgIH0sXG4gICAgICBcImFyaWEtcHJlc3NlZFwiOiAoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLnNob3dDaGF0KSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiLFxuICAgICAgXCJkYXRhLWxrLXVucmVhZC1tc2dzXCI6IHN0YXRlID8gc3RhdGUudW5yZWFkTWVzc2FnZXMgPCAxMCA/IHN0YXRlLnVucmVhZE1lc3NhZ2VzLnRvRml4ZWQoMCkgOiBcIjkrXCIgOiBcIjBcIlxuICAgIH0pO1xuICB9LCBbcHJvcHMsIGNsYXNzTmFtZSwgZGlzcGF0Y2gsIHN0YXRlXSk7XG4gIHJldHVybiB7IG1lcmdlZFByb3BzIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VUb2tlbi50c1xuaW1wb3J0IHsgbG9nIGFzIGxvZzYgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDQxIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlVG9rZW4odG9rZW5FbmRwb2ludCwgcm9vbU5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBbdG9rZW4sIHNldFRva2VuXSA9IFJlYWN0NDEudXNlU3RhdGUodm9pZCAwKTtcbiAgUmVhY3Q0MS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAodG9rZW5FbmRwb2ludCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBFcnJvcihcInRva2VuIGVuZHBvaW50IG5lZWRzIHRvIGJlIGRlZmluZWRcIik7XG4gICAgfVxuICAgIGlmICgoKF9hID0gb3B0aW9ucy51c2VySW5mbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmlkZW50aXR5KSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRva2VuRmV0Y2hlciA9ICgpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGxvZzYuZGVidWcoXCJmZXRjaGluZyB0b2tlblwiKTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgb3B0aW9ucy51c2VySW5mbyksIHsgcm9vbU5hbWUgfSkpO1xuICAgICAgY29uc3QgcmVzID0geWllbGQgZmV0Y2goYCR7dG9rZW5FbmRwb2ludH0/JHtwYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgIGxvZzYuZXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBmZXRjaCB0b2tlbi4gU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1cyAke3Jlcy5zdGF0dXN9OiAke3Jlcy5zdGF0dXNUZXh0fWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBhY2Nlc3NUb2tlbiB9ID0geWllbGQgcmVzLmpzb24oKTtcbiAgICAgIHNldFRva2VuKGFjY2Vzc1Rva2VuKTtcbiAgICB9KTtcbiAgICB0b2tlbkZldGNoZXIoKTtcbiAgfSwgW3Rva2VuRW5kcG9pbnQsIHJvb21OYW1lLCBKU09OLnN0cmluZ2lmeShvcHRpb25zKV0pO1xuICByZXR1cm4gdG9rZW47XG59XG5cbi8vIHNyYy9ob29rcy91c2VUcmFja011dGVkSW5kaWNhdG9yLnRzXG5pbXBvcnQge1xuICBzZXR1cFRyYWNrTXV0ZWRJbmRpY2F0b3IsXG4gIGdldFRyYWNrUmVmZXJlbmNlSWQgYXMgZ2V0VHJhY2tSZWZlcmVuY2VJZDJcbn0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3Q0MiBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVRyYWNrTXV0ZWRJbmRpY2F0b3IodHJhY2tSZWZPclNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgbGV0IHJlZiA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IHAgPSAoX2IgPSAoX2EgPSB1c2VNYXliZVBhcnRpY2lwYW50Q29udGV4dCgpKSAhPSBudWxsID8gX2EgOiBvcHRpb25zLnBhcnRpY2lwYW50KSAhPSBudWxsID8gX2IgOiByZWYgPT0gbnVsbCA/IHZvaWQgMCA6IHJlZi5wYXJ0aWNpcGFudDtcbiAgaWYgKHR5cGVvZiB0cmFja1JlZk9yU291cmNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKCFwKSB7XG4gICAgICB0aHJvdyBFcnJvcihgUGFydGljaXBhbnQgbWlzc2luZywgZWl0aGVyIHByb3ZpZGUgaXQgdmlhIGNvbnRleHQgb3IgcGFzcyBpdCBpbiBkaXJlY3RseWApO1xuICAgIH1cbiAgICByZWYgPSB7IHBhcnRpY2lwYW50OiBwLCBzb3VyY2U6IHRyYWNrUmVmT3JTb3VyY2UgfTtcbiAgfSBlbHNlIGlmICh0cmFja1JlZk9yU291cmNlKSB7XG4gICAgcmVmID0gdHJhY2tSZWZPclNvdXJjZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcihgTm8gdHJhY2sgcmVmZXJlbmNlIGZvdW5kLCBlaXRoZXIgcHJvdmlkZSBpdCB2aWEgY29udGV4dCBvciBwYXNzIGl0IGluIGRpcmVjdGx5YCk7XG4gIH1cbiAgY29uc3QgeyBjbGFzc05hbWUsIG1lZGlhTXV0ZWRPYnNlcnZlciB9ID0gUmVhY3Q0Mi51c2VNZW1vKFxuICAgICgpID0+IHNldHVwVHJhY2tNdXRlZEluZGljYXRvcihyZWYpLFxuICAgIFtnZXRUcmFja1JlZmVyZW5jZUlkMihyZWYpXVxuICApO1xuICBjb25zdCBpc011dGVkID0gdXNlT2JzZXJ2YWJsZVN0YXRlKFxuICAgIG1lZGlhTXV0ZWRPYnNlcnZlcixcbiAgICAhISgoKF9jID0gcmVmLnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2MuaXNNdXRlZCkgfHwgKChfZCA9IHJlZi5wYXJ0aWNpcGFudC5nZXRUcmFjayhyZWYuc291cmNlKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmlzTXV0ZWQpKVxuICApO1xuICByZXR1cm4geyBpc011dGVkLCBjbGFzc05hbWUgfTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVRyYWNrVG9nZ2xlLnRzXG5pbXBvcnQgeyBzZXR1cE1lZGlhVG9nZ2xlLCBzZXR1cE1hbnVhbFRvZ2dsZSwgbG9nIGFzIGxvZzcgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDQzIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlVHJhY2tUb2dnbGUoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBzb3VyY2UsXG4gICAgb25DaGFuZ2UsXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGNhcHR1cmVPcHRpb25zXG4gIH0gPSBfYiwgcmVzdCA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwic291cmNlXCIsXG4gICAgXCJvbkNoYW5nZVwiLFxuICAgIFwiaW5pdGlhbFN0YXRlXCIsXG4gICAgXCJjYXB0dXJlT3B0aW9uc1wiXG4gIF0pO1xuICB2YXIgX2EyO1xuICBjb25zdCByb29tID0gdXNlTWF5YmVSb29tQ29udGV4dCgpO1xuICBjb25zdCB0cmFjayA9IChfYTIgPSByb29tID09IG51bGwgPyB2b2lkIDAgOiByb29tLmxvY2FsUGFydGljaXBhbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuZ2V0VHJhY2soc291cmNlKTtcbiAgY29uc3QgdXNlckludGVyYWN0aW9uUmVmID0gUmVhY3Q0My51c2VSZWYoZmFsc2UpO1xuICBjb25zdCB7IHRvZ2dsZSwgY2xhc3NOYW1lLCBwZW5kaW5nT2JzZXJ2ZXIsIGVuYWJsZWRPYnNlcnZlciB9ID0gUmVhY3Q0My51c2VNZW1vKFxuICAgICgpID0+IHJvb20gPyBzZXR1cE1lZGlhVG9nZ2xlKHNvdXJjZSwgcm9vbSwgY2FwdHVyZU9wdGlvbnMpIDogc2V0dXBNYW51YWxUb2dnbGUoKSxcbiAgICBbcm9vbSwgc291cmNlLCBKU09OLnN0cmluZ2lmeShjYXB0dXJlT3B0aW9ucyldXG4gICk7XG4gIGNvbnN0IHBlbmRpbmcgPSB1c2VPYnNlcnZhYmxlU3RhdGUocGVuZGluZ09ic2VydmVyLCBmYWxzZSk7XG4gIGNvbnN0IGVuYWJsZWQgPSB1c2VPYnNlcnZhYmxlU3RhdGUoZW5hYmxlZE9ic2VydmVyLCBpbml0aWFsU3RhdGUgIT0gbnVsbCA/IGluaXRpYWxTdGF0ZSA6ICEhKHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5pc0VuYWJsZWQpKTtcbiAgUmVhY3Q0My51c2VFZmZlY3QoKCkgPT4ge1xuICAgIG9uQ2hhbmdlID09IG51bGwgPyB2b2lkIDAgOiBvbkNoYW5nZShlbmFibGVkLCB1c2VySW50ZXJhY3Rpb25SZWYuY3VycmVudCk7XG4gICAgdXNlckludGVyYWN0aW9uUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgfSwgW2VuYWJsZWQsIG9uQ2hhbmdlXSk7XG4gIFJlYWN0NDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaW5pdGlhbFN0YXRlICE9PSB2b2lkIDApIHtcbiAgICAgIGxvZzcuZGVidWcoXCJmb3JjaW5nIGluaXRpYWwgdG9nZ2xlIHN0YXRlXCIsIHNvdXJjZSwgaW5pdGlhbFN0YXRlKTtcbiAgICAgIHRvZ2dsZShpbml0aWFsU3RhdGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBuZXdQcm9wcyA9IFJlYWN0NDMudXNlTWVtbygoKSA9PiBtZXJnZVByb3BzKHJlc3QsIHsgY2xhc3NOYW1lIH0pLCBbcmVzdCwgY2xhc3NOYW1lXSk7XG4gIGNvbnN0IGNsaWNrSGFuZGxlciA9IFJlYWN0NDMudXNlQ2FsbGJhY2soXG4gICAgKGV2dCkgPT4ge1xuICAgICAgdmFyIF9hMztcbiAgICAgIHVzZXJJbnRlcmFjdGlvblJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgIHRvZ2dsZSgpLmZpbmFsbHkoKCkgPT4gdXNlckludGVyYWN0aW9uUmVmLmN1cnJlbnQgPSBmYWxzZSk7XG4gICAgICAoX2EzID0gcmVzdC5vbkNsaWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2EzLmNhbGwocmVzdCwgZXZ0KTtcbiAgICB9LFxuICAgIFtyZXN0LCB0b2dnbGVdXG4gICk7XG4gIHJldHVybiB7XG4gICAgdG9nZ2xlLFxuICAgIGVuYWJsZWQsXG4gICAgcGVuZGluZyxcbiAgICB0cmFjayxcbiAgICBidXR0b25Qcm9wczogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgbmV3UHJvcHMpLCB7XG4gICAgICBcImFyaWEtcHJlc3NlZFwiOiBlbmFibGVkLFxuICAgICAgXCJkYXRhLWxrLXNvdXJjZVwiOiBzb3VyY2UsXG4gICAgICBcImRhdGEtbGstZW5hYmxlZFwiOiBlbmFibGVkLFxuICAgICAgZGlzYWJsZWQ6IHBlbmRpbmcsXG4gICAgICBvbkNsaWNrOiBjbGlja0hhbmRsZXJcbiAgICB9KVxuICB9O1xufVxuXG4vLyBzcmMvaG9va3MvdXNlVHJhY2tzLnRzXG5pbXBvcnQge1xuICBpc1NvdXJjZXNXaXRoT3B0aW9ucyxcbiAgaXNTb3VyY2VXaXRPcHRpb25zLFxuICBsb2cgYXMgbG9nOCxcbiAgdHJhY2tSZWZlcmVuY2VzT2JzZXJ2YWJsZVxufSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgeyBUcmFjayBhcyBUcmFjazIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCAqIGFzIFJlYWN0NDQgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VUcmFja3Moc291cmNlcyA9IFtcbiAgVHJhY2syLlNvdXJjZS5DYW1lcmEsXG4gIFRyYWNrMi5Tb3VyY2UuTWljcm9waG9uZSxcbiAgVHJhY2syLlNvdXJjZS5TY3JlZW5TaGFyZSxcbiAgVHJhY2syLlNvdXJjZS5TY3JlZW5TaGFyZUF1ZGlvLFxuICBUcmFjazIuU291cmNlLlVua25vd25cbl0sIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCByb29tID0gdXNlRW5zdXJlUm9vbShvcHRpb25zLnJvb20pO1xuICBjb25zdCBbdHJhY2tSZWZlcmVuY2VzLCBzZXRUcmFja1JlZmVyZW5jZXNdID0gUmVhY3Q0NC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtwYXJ0aWNpcGFudHMsIHNldFBhcnRpY2lwYW50c10gPSBSZWFjdDQ0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3Qgc291cmNlc18gPSBSZWFjdDQ0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBzb3VyY2VzLm1hcCgocykgPT4gaXNTb3VyY2VXaXRPcHRpb25zKHMpID8gcy5zb3VyY2UgOiBzKTtcbiAgfSwgW0pTT04uc3RyaW5naWZ5KHNvdXJjZXMpXSk7XG4gIFJlYWN0NDQudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0cmFja1JlZmVyZW5jZXNPYnNlcnZhYmxlKHJvb20sIHNvdXJjZXNfLCB7XG4gICAgICBhZGRpdGlvbmFsUm9vbUV2ZW50czogb3B0aW9ucy51cGRhdGVPbmx5T24sXG4gICAgICBvbmx5U3Vic2NyaWJlZDogb3B0aW9ucy5vbmx5U3Vic2NyaWJlZFxuICAgIH0pLnN1YnNjcmliZSgoeyB0cmFja1JlZmVyZW5jZXM6IHRyYWNrUmVmZXJlbmNlczIsIHBhcnRpY2lwYW50czogcGFydGljaXBhbnRzMiB9KSA9PiB7XG4gICAgICBsb2c4LmRlYnVnKFwic2V0dGluZyB0cmFjayBidW5kbGVzXCIsIHRyYWNrUmVmZXJlbmNlczIsIHBhcnRpY2lwYW50czIpO1xuICAgICAgc2V0VHJhY2tSZWZlcmVuY2VzKHRyYWNrUmVmZXJlbmNlczIpO1xuICAgICAgc2V0UGFydGljaXBhbnRzKHBhcnRpY2lwYW50czIpO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfSwgW3Jvb20sIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMudXBkYXRlT25seU9uKSwgSlNPTi5zdHJpbmdpZnkoc291cmNlcyldKTtcbiAgY29uc3QgbWF5YmVUcmFja1JlZmVyZW5jZXMgPSBSZWFjdDQ0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChpc1NvdXJjZXNXaXRoT3B0aW9ucyhzb3VyY2VzKSkge1xuICAgICAgY29uc3QgcmVxdWlyZVBsYWNlaG9sZGVyID0gcmVxdWlyZWRQbGFjZWhvbGRlcnMoc291cmNlcywgcGFydGljaXBhbnRzKTtcbiAgICAgIGNvbnN0IHRyYWNrUmVmZXJlbmNlc1dpdGhQbGFjZWhvbGRlcnMgPSBBcnJheS5mcm9tKHRyYWNrUmVmZXJlbmNlcyk7XG4gICAgICBwYXJ0aWNpcGFudHMuZm9yRWFjaCgocGFydGljaXBhbnQpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAocmVxdWlyZVBsYWNlaG9sZGVyLmhhcyhwYXJ0aWNpcGFudC5pZGVudGl0eSkpIHtcbiAgICAgICAgICBjb25zdCBzb3VyY2VzVG9BZGRQbGFjZWhvbGRlciA9IChfYSA9IHJlcXVpcmVQbGFjZWhvbGRlci5nZXQocGFydGljaXBhbnQuaWRlbnRpdHkpKSAhPSBudWxsID8gX2EgOiBbXTtcbiAgICAgICAgICBzb3VyY2VzVG9BZGRQbGFjZWhvbGRlci5mb3JFYWNoKChwbGFjZWhvbGRlclNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRyYWNrUmVmZXJlbmNlcy5maW5kKFxuICAgICAgICAgICAgICAoeyBwYXJ0aWNpcGFudDogcCwgcHVibGljYXRpb24gfSkgPT4gcGFydGljaXBhbnQuaWRlbnRpdHkgPT09IHAuaWRlbnRpdHkgJiYgcHVibGljYXRpb24uc291cmNlID09PSBwbGFjZWhvbGRlclNvdXJjZVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2c4LmRlYnVnKFxuICAgICAgICAgICAgICBgQWRkICR7cGxhY2Vob2xkZXJTb3VyY2V9IHBsYWNlaG9sZGVyIGZvciBwYXJ0aWNpcGFudCAke3BhcnRpY2lwYW50LmlkZW50aXR5fS5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSB7XG4gICAgICAgICAgICAgIHBhcnRpY2lwYW50LFxuICAgICAgICAgICAgICBzb3VyY2U6IHBsYWNlaG9sZGVyU291cmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJhY2tSZWZlcmVuY2VzV2l0aFBsYWNlaG9sZGVycy5wdXNoKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJhY2tSZWZlcmVuY2VzV2l0aFBsYWNlaG9sZGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRyYWNrUmVmZXJlbmNlcztcbiAgICB9XG4gIH0sIFt0cmFja1JlZmVyZW5jZXMsIHBhcnRpY2lwYW50cywgc291cmNlc10pO1xuICByZXR1cm4gbWF5YmVUcmFja1JlZmVyZW5jZXM7XG59XG5mdW5jdGlvbiBkaWZmZXJlbmNlKHNldEEsIHNldEIpIHtcbiAgY29uc3QgX2RpZmZlcmVuY2UgPSBuZXcgU2V0KHNldEEpO1xuICBmb3IgKGNvbnN0IGVsZW0gb2Ygc2V0Qikge1xuICAgIF9kaWZmZXJlbmNlLmRlbGV0ZShlbGVtKTtcbiAgfVxuICByZXR1cm4gX2RpZmZlcmVuY2U7XG59XG5mdW5jdGlvbiByZXF1aXJlZFBsYWNlaG9sZGVycyhzb3VyY2VzLCBwYXJ0aWNpcGFudHMpIHtcbiAgY29uc3QgcGxhY2Vob2xkZXJNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBpZiAoaXNTb3VyY2VzV2l0aE9wdGlvbnMoc291cmNlcykpIHtcbiAgICBjb25zdCBzb3VyY2VzVGhhdE5lZWRQbGFjZWhvbGRlciA9IHNvdXJjZXMuZmlsdGVyKChzb3VyY2VXaXRoT3B0aW9uKSA9PiBzb3VyY2VXaXRoT3B0aW9uLndpdGhQbGFjZWhvbGRlcikubWFwKChzb3VyY2VXaXRoT3B0aW9uKSA9PiBzb3VyY2VXaXRoT3B0aW9uLnNvdXJjZSk7XG4gICAgcGFydGljaXBhbnRzLmZvckVhY2goKHBhcnRpY2lwYW50KSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2VzT2ZTdWJzY3JpYmVkVHJhY2tzID0gcGFydGljaXBhbnQuZ2V0VHJhY2tzKCkubWFwKChwdWIpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gcHViLnRyYWNrKSA9PSBudWxsID8gdm9pZCAwIDogX2Euc291cmNlO1xuICAgICAgfSkuZmlsdGVyKCh0cmFja1NvdXJjZSkgPT4gdHJhY2tTb3VyY2UgIT09IHZvaWQgMCk7XG4gICAgICBjb25zdCBwbGFjZWhvbGRlck5lZWRlZEZvclRoaXNQYXJ0aWNpcGFudCA9IEFycmF5LmZyb20oXG4gICAgICAgIGRpZmZlcmVuY2UobmV3IFNldChzb3VyY2VzVGhhdE5lZWRQbGFjZWhvbGRlciksIG5ldyBTZXQoc291cmNlc09mU3Vic2NyaWJlZFRyYWNrcykpXG4gICAgICApO1xuICAgICAgaWYgKHBsYWNlaG9sZGVyTmVlZGVkRm9yVGhpc1BhcnRpY2lwYW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGxhY2Vob2xkZXJNYXAuc2V0KHBhcnRpY2lwYW50LmlkZW50aXR5LCBwbGFjZWhvbGRlck5lZWRlZEZvclRoaXNQYXJ0aWNpcGFudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBsYWNlaG9sZGVyTWFwO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlVHJhY2sudHNcbmZ1bmN0aW9uIHVzZVRyYWNrKHRyYWNrUmVmLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIHVzZU1lZGlhVHJhY2tCeVNvdXJjZU9yTmFtZSh0cmFja1JlZiwgb3B0aW9ucyk7XG59XG5cbi8vIHNyYy9ob29rcy91c2VUcmFja0J5TmFtZS50c1xuZnVuY3Rpb24gdXNlVHJhY2tCeU5hbWUodHJhY2tSZWYsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCByZWYgPSB1c2VFbnN1cmVUcmFja1JlZih0cmFja1JlZik7XG4gIHJldHVybiB1c2VNZWRpYVRyYWNrQnlTb3VyY2VPck5hbWUocmVmLCBvcHRpb25zKTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZUNoYXQudHNcbmltcG9ydCB7IHNldHVwQ2hhdCB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0NDUgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VDaGF0KG9wdGlvbnMpIHtcbiAgY29uc3Qgcm9vbSA9IHVzZVJvb21Db250ZXh0KCk7XG4gIGNvbnN0IFtzZXR1cCwgc2V0U2V0dXBdID0gUmVhY3Q0NS51c2VTdGF0ZSgpO1xuICBjb25zdCBpc1NlbmRpbmcgPSB1c2VPYnNlcnZhYmxlU3RhdGUoc2V0dXAgPT0gbnVsbCA/IHZvaWQgMCA6IHNldHVwLmlzU2VuZGluZ09ic2VydmFibGUsIGZhbHNlKTtcbiAgY29uc3QgY2hhdE1lc3NhZ2VzID0gdXNlT2JzZXJ2YWJsZVN0YXRlKHNldHVwID09IG51bGwgPyB2b2lkIDAgOiBzZXR1cC5tZXNzYWdlT2JzZXJ2YWJsZSwgW10pO1xuICBSZWFjdDQ1LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc2V0dXBDaGF0UmV0dXJuID0gc2V0dXBDaGF0KHJvb20sIG9wdGlvbnMpO1xuICAgIHNldFNldHVwKHNldHVwQ2hhdFJldHVybik7XG4gIH0sIFtyb29tLCBvcHRpb25zXSk7XG4gIHJldHVybiB7IHNlbmQ6IHNldHVwID09IG51bGwgPyB2b2lkIDAgOiBzZXR1cC5zZW5kLCB1cGRhdGU6IHNldHVwID09IG51bGwgPyB2b2lkIDAgOiBzZXR1cC51cGRhdGUsIGNoYXRNZXNzYWdlcywgaXNTZW5kaW5nIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VQZXJzaXN0ZW50VXNlckNob2ljZXMudHNcbmltcG9ydCB7IGxvYWRVc2VyQ2hvaWNlcywgc2F2ZVVzZXJDaG9pY2VzIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3Q0NiBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyhvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hO1xuICBjb25zdCBbdXNlckNob2ljZXMsIHNldFNldHRpbmdzXSA9IFJlYWN0NDYudXNlU3RhdGUoXG4gICAgbG9hZFVzZXJDaG9pY2VzKG9wdGlvbnMuZGVmYXVsdHMsIChfYSA9IG9wdGlvbnMucHJldmVudExvYWQpICE9IG51bGwgPyBfYSA6IGZhbHNlKVxuICApO1xuICBjb25zdCBzYXZlQXVkaW9JbnB1dEVuYWJsZWQgPSBSZWFjdDQ2LnVzZUNhbGxiYWNrKChpc0VuYWJsZWQpID0+IHtcbiAgICBzZXRTZXR0aW5ncygocHJldikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJldiksIHsgYXVkaW9FbmFibGVkOiBpc0VuYWJsZWQgfSkpO1xuICB9LCBbXSk7XG4gIGNvbnN0IHNhdmVWaWRlb0lucHV0RW5hYmxlZCA9IFJlYWN0NDYudXNlQ2FsbGJhY2soKGlzRW5hYmxlZCkgPT4ge1xuICAgIHNldFNldHRpbmdzKChwcmV2KSA9PiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBwcmV2KSwgeyB2aWRlb0VuYWJsZWQ6IGlzRW5hYmxlZCB9KSk7XG4gIH0sIFtdKTtcbiAgY29uc3Qgc2F2ZUF1ZGlvSW5wdXREZXZpY2VJZCA9IFJlYWN0NDYudXNlQ2FsbGJhY2soKGRldmljZUlkKSA9PiB7XG4gICAgc2V0U2V0dGluZ3MoKHByZXYpID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHByZXYpLCB7IGF1ZGlvRGV2aWNlSWQ6IGRldmljZUlkIH0pKTtcbiAgfSwgW10pO1xuICBjb25zdCBzYXZlVmlkZW9JbnB1dERldmljZUlkID0gUmVhY3Q0Ni51c2VDYWxsYmFjaygoZGV2aWNlSWQpID0+IHtcbiAgICBzZXRTZXR0aW5ncygocHJldikgPT4gX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJldiksIHsgdmlkZW9EZXZpY2VJZDogZGV2aWNlSWQgfSkpO1xuICB9LCBbXSk7XG4gIGNvbnN0IHNhdmVVc2VybmFtZSA9IFJlYWN0NDYudXNlQ2FsbGJhY2soKHVzZXJuYW1lKSA9PiB7XG4gICAgc2V0U2V0dGluZ3MoKHByZXYpID0+IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIHByZXYpLCB7IHVzZXJuYW1lIH0pKTtcbiAgfSwgW10pO1xuICBSZWFjdDQ2LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBzYXZlVXNlckNob2ljZXModXNlckNob2ljZXMsIChfYTIgPSBvcHRpb25zLnByZXZlbnRTYXZlKSAhPSBudWxsID8gX2EyIDogZmFsc2UpO1xuICB9LCBbdXNlckNob2ljZXMsIG9wdGlvbnMucHJldmVudFNhdmVdKTtcbiAgcmV0dXJuIHtcbiAgICB1c2VyQ2hvaWNlcyxcbiAgICBzYXZlQXVkaW9JbnB1dEVuYWJsZWQsXG4gICAgc2F2ZVZpZGVvSW5wdXRFbmFibGVkLFxuICAgIHNhdmVBdWRpb0lucHV0RGV2aWNlSWQsXG4gICAgc2F2ZVZpZGVvSW5wdXREZXZpY2VJZCxcbiAgICBzYXZlVXNlcm5hbWVcbiAgfTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZUlzRW5jcnlwdGVkLnRzXG5pbXBvcnQgKiBhcyBSZWFjdDQ3IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTG9jYWxQYXJ0aWNpcGFudCB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgZW5jcnlwdGlvblN0YXR1c09ic2VydmFibGUgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5mdW5jdGlvbiB1c2VJc0VuY3J5cHRlZChwYXJ0aWNpcGFudCkge1xuICBjb25zdCBwID0gdXNlRW5zdXJlUGFydGljaXBhbnQocGFydGljaXBhbnQpO1xuICBjb25zdCByb29tID0gdXNlRW5zdXJlUm9vbSgpO1xuICBjb25zdCBvYnNlcnZlciA9IFJlYWN0NDcudXNlTWVtbygoKSA9PiBlbmNyeXB0aW9uU3RhdHVzT2JzZXJ2YWJsZShyb29tLCBwKSwgW3Jvb20sIHBdKTtcbiAgY29uc3QgaXNFbmNyeXB0ZWQgPSB1c2VPYnNlcnZhYmxlU3RhdGUoXG4gICAgb2JzZXJ2ZXIsXG4gICAgcCBpbnN0YW5jZW9mIExvY2FsUGFydGljaXBhbnQgPyBwLmlzRTJFRUVuYWJsZWQgOiBwLmlzRW5jcnlwdGVkXG4gICk7XG4gIHJldHVybiBpc0VuY3J5cHRlZDtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVRyYWNrVm9sdW1lLnRzXG5pbXBvcnQgKiBhcyBSZWFjdDQ4IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVHJhY2sgYXMgVHJhY2szLCBjcmVhdGVBdWRpb0FuYWx5c2VyIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQge1xuICBpc1RyYWNrUmVmZXJlbmNlIGFzIGlzVHJhY2tSZWZlcmVuY2UyXG59IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbnZhciB1c2VUcmFja1ZvbHVtZSA9ICh0cmFja09yVHJhY2tSZWZlcmVuY2UsIG9wdGlvbnMgPSB7IGZmdFNpemU6IDMyLCBzbW9vdGhpbmdUaW1lQ29uc3RhbnQ6IDAgfSkgPT4ge1xuICBjb25zdCB0cmFjayA9IGlzVHJhY2tSZWZlcmVuY2UyKHRyYWNrT3JUcmFja1JlZmVyZW5jZSkgPyB0cmFja09yVHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24udHJhY2sgOiB0cmFja09yVHJhY2tSZWZlcmVuY2U7XG4gIGNvbnN0IFt2b2x1bWUsIHNldFZvbHVtZV0gPSBSZWFjdDQ4LnVzZVN0YXRlKDApO1xuICBSZWFjdDQ4LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF0cmFjayB8fCAhdHJhY2subWVkaWFTdHJlYW0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBjbGVhbnVwLCBhbmFseXNlciB9ID0gY3JlYXRlQXVkaW9BbmFseXNlcih0cmFjaywgb3B0aW9ucyk7XG4gICAgY29uc3QgYnVmZmVyTGVuZ3RoID0gYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQ7XG4gICAgY29uc3QgZGF0YUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyTGVuZ3RoKTtcbiAgICBjb25zdCB1cGRhdGVWb2x1bWUgPSAoKSA9PiB7XG4gICAgICBhbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YShkYXRhQXJyYXkpO1xuICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gZGF0YUFycmF5W2ldO1xuICAgICAgICBzdW0gKz0gYSAqIGE7XG4gICAgICB9XG4gICAgICBzZXRWb2x1bWUoTWF0aC5zcXJ0KHN1bSAvIGRhdGFBcnJheS5sZW5ndGgpIC8gMjU1KTtcbiAgICB9O1xuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwodXBkYXRlVm9sdW1lLCAxZTMgLyAzMCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgIH07XG4gIH0sIFt0cmFjaywgdHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrLm1lZGlhU3RyZWFtLCBKU09OLnN0cmluZ2lmeShvcHRpb25zKV0pO1xuICByZXR1cm4gdm9sdW1lO1xufTtcbnZhciBub3JtYWxpemVGcmVxdWVuY2llcyA9IChmcmVxdWVuY2llcykgPT4ge1xuICBjb25zdCBub3JtYWxpemVEYiA9ICh2YWx1ZSkgPT4ge1xuICAgIGNvbnN0IG1pbkRiID0gLTEwMDtcbiAgICBjb25zdCBtYXhEYiA9IC0xMDtcbiAgICBsZXQgZGIgPSAxIC0gTWF0aC5tYXgobWluRGIsIE1hdGgubWluKG1heERiLCB2YWx1ZSkpICogLTEgLyAxMDA7XG4gICAgZGIgPSBNYXRoLnNxcnQoZGIpO1xuICAgIHJldHVybiBkYjtcbiAgfTtcbiAgcmV0dXJuIGZyZXF1ZW5jaWVzLm1hcCgodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IC1JbmZpbml0eSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVEYih2YWx1ZSk7XG4gIH0pO1xufTtcbnZhciBtdWx0aWJhbmREZWZhdWx0cyA9IHtcbiAgYmFuZHM6IDUsXG4gIGxvUGFzczogMTAwLFxuICBoaVBhc3M6IDYwMCxcbiAgdXBkYXRlSW50ZXJ2YWw6IDEwLFxuICBhbmFseXNlck9wdGlvbnM6IHsgZmZ0U2l6ZTogMjA0OCB9XG59O1xudmFyIHVzZU11bHRpYmFuZFRyYWNrVm9sdW1lID0gKHRyYWNrT3JUcmFja1JlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIHZhciBfYTtcbiAgY29uc3QgdHJhY2sgPSB0cmFja09yVHJhY2tSZWZlcmVuY2UgaW5zdGFuY2VvZiBUcmFjazMgPyB0cmFja09yVHJhY2tSZWZlcmVuY2UgOiAoX2EgPSB0cmFja09yVHJhY2tSZWZlcmVuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrT3JUcmFja1JlZmVyZW5jZS5wdWJsaWNhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnRyYWNrO1xuICBjb25zdCBbZnJlcXVlbmN5QmFuZHMsIHNldEZyZXF1ZW5jeUJhbmRzXSA9IFJlYWN0NDgudXNlU3RhdGUoW10pO1xuICBjb25zdCBvcHRzID0gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIG11bHRpYmFuZERlZmF1bHRzKSwgb3B0aW9ucyk7XG4gIFJlYWN0NDgudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXRyYWNrIHx8ICEodHJhY2sgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrLm1lZGlhU3RyZWFtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGFuYWx5c2VyLCBjbGVhbnVwIH0gPSBjcmVhdGVBdWRpb0FuYWx5c2VyKHRyYWNrLCBvcHRzLmFuYWx5c2VyT3B0aW9ucyk7XG4gICAgY29uc3QgYnVmZmVyTGVuZ3RoID0gYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQ7XG4gICAgY29uc3QgZGF0YUFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShidWZmZXJMZW5ndGgpO1xuICAgIGNvbnN0IHVwZGF0ZVZvbHVtZSA9ICgpID0+IHtcbiAgICAgIGFuYWx5c2VyLmdldEZsb2F0RnJlcXVlbmN5RGF0YShkYXRhQXJyYXkpO1xuICAgICAgbGV0IGZyZXF1ZW5jaWVzID0gbmV3IEZsb2F0MzJBcnJheShkYXRhQXJyYXkubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZyZXF1ZW5jaWVzW2ldID0gZGF0YUFycmF5W2ldO1xuICAgICAgfVxuICAgICAgZnJlcXVlbmNpZXMgPSBmcmVxdWVuY2llcy5zbGljZShvcHRpb25zLmxvUGFzcywgb3B0aW9ucy5oaVBhc3MpO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEZyZXF1ZW5jaWVzID0gbm9ybWFsaXplRnJlcXVlbmNpZXMoZnJlcXVlbmNpZXMpO1xuICAgICAgY29uc3QgY2h1bmtTaXplID0gTWF0aC5jZWlsKG5vcm1hbGl6ZWRGcmVxdWVuY2llcy5sZW5ndGggLyBvcHRzLmJhbmRzKTtcbiAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRzLmJhbmRzOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3VtbWVkVm9sdW1lcyA9IG5vcm1hbGl6ZWRGcmVxdWVuY2llcy5zbGljZShpICogY2h1bmtTaXplLCAoaSArIDEpICogY2h1bmtTaXplKS5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MgKz0gdmFsLCAwKTtcbiAgICAgICAgY2h1bmtzLnB1c2goc3VtbWVkVm9sdW1lcyAvIGNodW5rU2l6ZSk7XG4gICAgICB9XG4gICAgICBzZXRGcmVxdWVuY3lCYW5kcyhjaHVua3MpO1xuICAgIH07XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGVWb2x1bWUsIG9wdHMudXBkYXRlSW50ZXJ2YWwpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB9O1xuICB9LCBbdHJhY2ssIHRyYWNrID09IG51bGwgPyB2b2lkIDAgOiB0cmFjay5tZWRpYVN0cmVhbSwgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyldKTtcbiAgcmV0dXJuIGZyZXF1ZW5jeUJhbmRzO1xufTtcblxuLy8gc3JjL2NvbXBvbmVudHMvY29udHJvbHMvQ2xlYXJQaW5CdXR0b24udHN4XG5mdW5jdGlvbiBDbGVhclBpbkJ1dHRvbihwcm9wcykge1xuICBjb25zdCB7IGJ1dHRvblByb3BzIH0gPSB1c2VDbGVhclBpbkJ1dHRvbihwcm9wcyk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q0OS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBidXR0b25Qcm9wcyksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvQ29ubmVjdGlvblN0YXRlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1MCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIENvbm5lY3Rpb25TdGF0ZTMoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHsgcm9vbSB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXCJyb29tXCJdKTtcbiAgY29uc3QgY29ubmVjdGlvblN0YXRlID0gdXNlQ29ubmVjdGlvblN0YXRlKHJvb20pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0NTAuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcHMpLCBjb25uZWN0aW9uU3RhdGUpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9jb250cm9scy9DaGF0VG9nZ2xlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1MSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIENoYXRUb2dnbGUocHJvcHMpIHtcbiAgY29uc3QgeyBtZXJnZWRQcm9wcyB9ID0gdXNlQ2hhdFRvZ2dsZSh7IHByb3BzIH0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0NTEuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgbWVyZ2VkUHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NvbnRyb2xzL0Rpc2Nvbm5lY3RCdXR0b24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDUyIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gRGlzY29ubmVjdEJ1dHRvbihwcm9wcykge1xuICBjb25zdCB7IGJ1dHRvblByb3BzIH0gPSB1c2VEaXNjb25uZWN0QnV0dG9uKHByb3BzKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDUyLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX19zcHJlYWRWYWx1ZXMoe30sIGJ1dHRvblByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9jb250cm9scy9Gb2N1c1RvZ2dsZS50c3hcbmltcG9ydCAqIGFzIFJlYWN0NzIgZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvQ2FtZXJhRGlzYWJsZWRJY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1MyBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdDYW1lcmFEaXNhYmxlZEljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDUzLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudENvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1My5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEuMzU0LjY0NmEuNS41IDAgMSAwLS43MDguNzA4bDE0IDE0YS41LjUgMCAwIDAgLjcwOC0uNzA4TDExIDEwLjI5M1Y0LjVBMS41IDEuNSAwIDAgMCA5LjUgM0gzLjcwN3pNMCA0LjVhMS41IDEuNSAwIDAgMSAuOTQzLTEuMzkzbDkuNTMyIDkuNTMzYy0uMjYyLjIyNC0uNjAzLjM2LS45NzUuMzZoLThBMS41IDEuNSAwIDAgMSAwIDExLjV6XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDUzLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJtMTUuMiAzLjYtMi44IDIuMWExIDEgMCAwIDAtLjQuOHYzYTEgMSAwIDAgMCAuNC44bDIuOCAyLjFhLjUuNSAwIDAgMCAuOC0uNFY0YS41LjUgMCAwIDAtLjgtLjR6XCIgfSkpO1xudmFyIENhbWVyYURpc2FibGVkSWNvbl9kZWZhdWx0ID0gU3ZnQ2FtZXJhRGlzYWJsZWRJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL0NhbWVyYUljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDU0IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z0NhbWVyYUljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudENvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1NC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgNC41QTEuNSAxLjUgMCAwIDEgMS41IDNoOEExLjUgMS41IDAgMCAxIDExIDQuNXY3QTEuNSAxLjUgMCAwIDEgOS41IDEzaC04QTEuNSAxLjUgMCAwIDEgMCAxMS41ek0xNS4yIDMuNmwtMi44IDIuMWExIDEgMCAwIDAtLjQuOHYzYTEgMSAwIDAgMCAuNC44bDIuOCAyLjFhLjUuNSAwIDAgMCAuOC0uNFY0YS41LjUgMCAwIDAtLjgtLjR6XCIgfSkpO1xudmFyIENhbWVyYUljb25fZGVmYXVsdCA9IFN2Z0NhbWVyYUljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvQ2hhdENsb3NlSWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NTUgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnQ2hhdENsb3NlSWNvbiA9IChwcm9wcykgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0NTUuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFZhbHVlcyh7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiAxNiwgaGVpZ2h0OiAxNiwgdmlld0JveDogXCIwIDAgMjQgMjRcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU1LmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCIjRkZGXCIsXG4gICAgZDogXCJNNC45OSAzLjk5YTEgMSAwIDAgMC0uNjk3IDEuNzE3TDEwLjU4NiAxMmwtNi4yOTMgNi4yOTNhMSAxIDAgMSAwIDEuNDE0IDEuNDE0TDEyIDEzLjQxNGw2LjI5MyA2LjI5M2ExIDEgMCAxIDAgMS40MTQtMS40MTRMMTMuNDE0IDEybDYuMjkzLTYuMjkzYTEgMSAwIDAgMC0uNzI3LTEuNzE3IDEgMSAwIDAgMC0uNjg3LjMwM0wxMiAxMC41ODYgNS43MDcgNC4yOTNhMSAxIDAgMCAwLS43MTctLjMwM3pcIlxuICB9XG4pKTtcbnZhciBDaGF0Q2xvc2VJY29uX2RlZmF1bHQgPSBTdmdDaGF0Q2xvc2VJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL0NoYXRJY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1NiBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdDaGF0SWNvbiA9IChwcm9wcykgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0NTYuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFZhbHVlcyh7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiAxNiwgaGVpZ2h0OiAxOCwgZmlsbDogXCJub25lXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1Ni5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTAgMi43NUEyLjc1IDIuNzUgMCAwIDEgMi43NSAwaDEwLjVBMi43NSAyLjc1IDAgMCAxIDE2IDIuNzV2MTMuNTk0YS43NS43NSAwIDAgMS0xLjIzNC41NzJsLTMuNjkxLTMuMTJhMS4yNSAxLjI1IDAgMCAwLS44MDctLjI5NkgyLjc1QTIuNzUgMi43NSAwIDAgMSAwIDEwLjc1di04Wk0yLjc1IDEuNWMtLjY5IDAtMS4yNS41Ni0xLjI1IDEuMjV2OGMwIC42OS41NiAxLjI1IDEuMjUgMS4yNWg3LjUxOGMuNjUgMCAxLjI3OS4yMyAxLjc3NS42NWwyLjQ1NyAyLjA3N1YyLjc1YzAtLjY5LS41Ni0xLjI1LTEuMjUtMS4yNUgyLjc1WlwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1Ni5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTMgNC41YS41LjUgMCAwIDEgLjUtLjVoOWEuNS41IDAgMCAxIDAgMWgtOWEuNS41IDAgMCAxLS41LS41Wm0wIDJhLjUuNSAwIDAgMSAuNS0uNWg5YS41LjUgMCAwIDEgMCAxaC05YS41LjUgMCAwIDEtLjUtLjVabTAgMmEuNS41IDAgMCAxIC41LS41aDVhLjUuNSAwIDAgMSAwIDFoLTVhLjUuNSAwIDAgMS0uNS0uNVpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSk7XG52YXIgQ2hhdEljb25fZGVmYXVsdCA9IFN2Z0NoYXRJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL0NoZXZyb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDU3IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z0NoZXZyb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU3LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwibm9uZVwiIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NTcuY3JlYXRlRWxlbWVudChcbiAgXCJwYXRoXCIsXG4gIHtcbiAgICBmaWxsOiBcImN1cnJlbnRjb2xvclwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk01LjI5MyAyLjI5M2ExIDEgMCAwIDEgMS40MTQgMGw0LjgyMyA0LjgyM2ExLjI1IDEuMjUgMCAwIDEgMCAxLjc2OGwtNC44MjMgNC44MjNhMSAxIDAgMCAxLTEuNDE0LTEuNDE0TDkuNTg2IDggNS4yOTMgMy43MDdhMSAxIDAgMCAxIDAtMS40MTR6XCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH1cbikpO1xudmFyIENoZXZyb25fZGVmYXVsdCA9IFN2Z0NoZXZyb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvRm9jdXNUb2dnbGVJY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q1OCBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdGb2N1c1RvZ2dsZUljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU4LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwibm9uZVwiIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NTguY3JlYXRlRWxlbWVudChcImdcIiwgeyBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsIHN0cm9rZUxpbmVjYXA6IFwicm91bmRcIiwgc3Ryb2tlTGluZWpvaW46IFwicm91bmRcIiwgc3Ryb2tlV2lkdGg6IDEuNSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q1OC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTEwIDEuNzVoNC4yNW0wIDBWNm0wLTQuMjVMOSA3TTYgMTQuMjVIMS43NW0wIDBWMTBtMCA0LjI1TDcgOVwiIH0pKSk7XG52YXIgRm9jdXNUb2dnbGVJY29uX2RlZmF1bHQgPSBTdmdGb2N1c1RvZ2dsZUljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvR2Vhckljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDU5IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z0dlYXJJY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q1OS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcIm5vbmVcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU5LmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNMiAyLjc1QTIuNzUgMi43NSAwIDAgMSA0Ljc1IDBoNi41QTIuNzUgMi43NSAwIDAgMSAxNCAyLjc1djEwLjVBMi43NSAyLjc1IDAgMCAxIDExLjI1IDE2aC02LjVBMi43NSAyLjc1IDAgMCAxIDIgMTMuMjV2LS41YS43NS43NSAwIDAgMSAxLjUgMHYuNWMwIC42OS41NiAxLjI1IDEuMjUgMS4yNWg2LjVjLjY5IDAgMS4yNS0uNTYgMS4yNS0xLjI1VjIuNzVjMC0uNjktLjU2LTEuMjUtMS4yNS0xLjI1aC02LjVjLS42OSAwLTEuMjUuNTYtMS4yNSAxLjI1di41YS43NS43NSAwIDAgMS0xLjUgMHYtLjVaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDU5LmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNOC43OCA3LjQ3YS43NS43NSAwIDAgMSAwIDEuMDZsLTIuMjUgMi4yNWEuNzUuNzUgMCAxIDEtMS4wNi0xLjA2bC45Ny0uOTdIMS43NWEuNzUuNzUgMCAwIDEgMC0xLjVoNC42OWwtLjk3LS45N2EuNzUuNzUgMCAwIDEgMS4wNi0xLjA2bDIuMjUgMi4yNVpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSk7XG52YXIgR2Vhckljb25fZGVmYXVsdCA9IFN2Z0dlYXJJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL0xlYXZlSWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NjAgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnTGVhdmVJY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q2MC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcIm5vbmVcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNMiAyLjc1QTIuNzUgMi43NSAwIDAgMSA0Ljc1IDBoNi41QTIuNzUgMi43NSAwIDAgMSAxNCAyLjc1djEwLjVBMi43NSAyLjc1IDAgMCAxIDExLjI1IDE2aC02LjVBMi43NSAyLjc1IDAgMCAxIDIgMTMuMjV2LS41YS43NS43NSAwIDAgMSAxLjUgMHYuNWMwIC42OS41NiAxLjI1IDEuMjUgMS4yNWg2LjVjLjY5IDAgMS4yNS0uNTYgMS4yNS0xLjI1VjIuNzVjMC0uNjktLjU2LTEuMjUtMS4yNS0xLjI1aC02LjVjLS42OSAwLTEuMjUuNTYtMS4yNSAxLjI1di41YS43NS43NSAwIDAgMS0xLjUgMHYtLjVaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNOC43OCA3LjQ3YS43NS43NSAwIDAgMSAwIDEuMDZsLTIuMjUgMi4yNWEuNzUuNzUgMCAxIDEtMS4wNi0xLjA2bC45Ny0uOTdIMS43NWEuNzUuNzUgMCAwIDEgMC0xLjVoNC42OWwtLjk3LS45N2EuNzUuNzUgMCAwIDEgMS4wNi0xLjA2bDIuMjUgMi4yNVpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSk7XG52YXIgTGVhdmVJY29uX2RlZmF1bHQgPSBTdmdMZWF2ZUljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvTG9ja0xvY2tlZEljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDYxIGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z0xvY2tMb2NrZWRJY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q2MS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcIm5vbmVcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYxLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Y29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNCA2LjEwNFY0YTQgNCAwIDEgMSA4IDB2Mi4xMDRjMS4xNTQuMzI2IDIgMS4zODcgMiAyLjY0NnY0LjVBMi43NSAyLjc1IDAgMCAxIDExLjI1IDE2aC02LjVBMi43NSAyLjc1IDAgMCAxIDIgMTMuMjV2LTQuNWMwLTEuMjU5Ljg0Ni0yLjMyIDItMi42NDZaTTUuNSA0YTIuNSAyLjUgMCAwIDEgNSAwdjJoLTVWNFpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSk7XG52YXIgTG9ja0xvY2tlZEljb25fZGVmYXVsdCA9IFN2Z0xvY2tMb2NrZWRJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL01pY0Rpc2FibGVkSWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NjIgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnTWljRGlzYWJsZWRJY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q2Mi5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcImN1cnJlbnRDb2xvclwiIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjIuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0xMi4yMjcgMTEuNTJhNS40NzcgNS40NzcgMCAwIDAgMS4yNDYtMi45Ny41LjUgMCAwIDAtLjk5NS0uMSA0LjQ3OCA0LjQ3OCAwIDAgMS0uOTYyIDIuMzU5bC0xLjA3LTEuMDdDMTAuNzk0IDkuMjQ3IDExIDguNjQ3IDExIDhWM2EzIDMgMCAwIDAtNiAwdjEuMjkzTDEuMzU0LjY0NmEuNS41IDAgMSAwLS43MDguNzA4bDE0IDE0YS41LjUgMCAwIDAgLjcwOC0uNzA4ek04IDEyLjVjLjY4MyAwIDEuMzMtLjE1MiAxLjkxMS0uNDI1bC43NDMuNzQzYy0uNjQ5LjM1OS0xLjM3OC41OS0yLjE1NC42NlYxNWgyYS41LjUgMCAwIDEgMCAxaC01YS41LjUgMCAwIDEgMC0xaDJ2LTEuNTIyYTUuNTAyIDUuNTAyIDAgMCAxLTQuOTczLTQuOTI5LjUuNSAwIDAgMSAuOTk1LS4wOThBNC41IDQuNSAwIDAgMCA4IDEyLjV6XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYyLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNOC43NDMgMTAuOTA3IDUgNy4xNjRWOGEzIDMgMCAwIDAgMy43NDMgMi45MDd6XCIgfSkpO1xudmFyIE1pY0Rpc2FibGVkSWNvbl9kZWZhdWx0ID0gU3ZnTWljRGlzYWJsZWRJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL01pY0ljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDYzIGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z01pY0ljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDYzLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudENvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2My5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk0yLjk3NSA4LjAwMmEuNS41IDAgMCAxIC41NDcuNDQ5IDQuNSA0LjUgMCAwIDAgOC45NTYgMCAuNS41IDAgMSAxIC45OTUuMDk4QTUuNTAyIDUuNTAyIDAgMCAxIDguNSAxMy40NzhWMTVoMmEuNS41IDAgMCAxIDAgMWgtNWEuNS41IDAgMCAxIDAtMWgydi0xLjUyMmE1LjUwMiA1LjUwMiAwIDAgMS00Ljk3My00LjkyOS41LjUgMCAwIDEgLjQ0OC0uNTQ3elwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2My5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTUgM2EzIDMgMCAxIDEgNiAwdjVhMyAzIDAgMCAxLTYgMHpcIiB9KSk7XG52YXIgTWljSWNvbl9kZWZhdWx0ID0gU3ZnTWljSWNvbjtcblxuLy8gc3JjL2Fzc2V0cy9pY29ucy9RdWFsaXR5RXhjZWxsZW50SWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NjQgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnUXVhbGl0eUV4Y2VsbGVudEljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudGNvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2NC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMTEuNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djRhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6bTYtNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djlhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6bTYtNmEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djE1YS41LjUgMCAwIDEtLjUuNWgtM2EuNS41IDAgMCAxLS41LS41elwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2NC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMTEuNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djRhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6bTYtNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djlhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6bTYtNmEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djE1YS41LjUgMCAwIDEtLjUuNWgtM2EuNS41IDAgMCAxLS41LS41elwiIH0pKTtcbnZhciBRdWFsaXR5RXhjZWxsZW50SWNvbl9kZWZhdWx0ID0gU3ZnUXVhbGl0eUV4Y2VsbGVudEljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvUXVhbGl0eUdvb2RJY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q2NSBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdRdWFsaXR5R29vZEljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY1LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudGNvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2NS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMTEuNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djRhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6bTYtNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djlhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY1LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMCAxMS41YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2NGEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXptNi01YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2OWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXpcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjUuY3JlYXRlRWxlbWVudChcImdcIiwgeyBvcGFjaXR5OiAwLjI1IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY1LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMTIgLjVhLjUuNSAwIDAgMSAuNS0uNWgzYS41LjUgMCAwIDEgLjUuNXYxNWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXpcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjUuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0xMiAuNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djE1YS41LjUgMCAwIDEtLjUuNWgtM2EuNS41IDAgMCAxLS41LS41elwiIH0pKSk7XG52YXIgUXVhbGl0eUdvb2RJY29uX2RlZmF1bHQgPSBTdmdRdWFsaXR5R29vZEljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvUXVhbGl0eVBvb3JJY29uLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q2NiBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdRdWFsaXR5UG9vckljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY2LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwiY3VycmVudGNvbG9yXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2Ni5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTAgMTEuNWEuNS41IDAgMCAxIC41LS41aDNhLjUuNSAwIDAgMSAuNS41djRhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY2LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMCAxMS41YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2NGEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXpcIiB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjYuY3JlYXRlRWxlbWVudChcImdcIiwgeyBvcGFjaXR5OiAwLjI1IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY2LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNNiA2LjVhLjUuNSAwIDAgMSAuNS0uNWgzYS41LjUgMCAwIDEgLjUuNXY5YS41LjUgMCAwIDEtLjUuNWgtM2EuNS41IDAgMCAxLS41LS41elwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2Ni5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IFwiTTYgNi41YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2OWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXptNi02YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2MTVhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV6XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY2LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMTIgLjVhLjUuNSAwIDAgMSAuNS0uNWgzYS41LjUgMCAwIDEgLjUuNXYxNWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXpcIiB9KSkpO1xudmFyIFF1YWxpdHlQb29ySWNvbl9kZWZhdWx0ID0gU3ZnUXVhbGl0eVBvb3JJY29uO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL1F1YWxpdHlVbmtub3duSWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NjcgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnUXVhbGl0eVVua25vd25JY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q2Ny5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcImN1cnJlbnRDb2xvclwiIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjcuY3JlYXRlRWxlbWVudChcImdcIiwgeyBvcGFjaXR5OiAwLjI1IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY3LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMCAxMS41YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2NGEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXYtNFptNi01YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2OWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXYtOVptNi02YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2MTVhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjVWLjVaXCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDY3LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHsgZDogXCJNMCAxMS41YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2NGEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXYtNFptNi01YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2OWEuNS41IDAgMCAxLS41LjVoLTNhLjUuNSAwIDAgMS0uNS0uNXYtOVptNi02YS41LjUgMCAwIDEgLjUtLjVoM2EuNS41IDAgMCAxIC41LjV2MTVhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjVWLjVaXCIgfSkpKTtcbnZhciBRdWFsaXR5VW5rbm93bkljb25fZGVmYXVsdCA9IFN2Z1F1YWxpdHlVbmtub3duSWNvbjtcblxuLy8gc3JjL2Fzc2V0cy9pY29ucy9TY3JlZW5TaGFyZUljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDY4IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z1NjcmVlblNoYXJlSWNvbiA9IChwcm9wcykgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0NjguY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFZhbHVlcyh7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiAyMCwgaGVpZ2h0OiAxNiwgZmlsbDogXCJub25lXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2OC5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTAgMi43NUEyLjc1IDIuNzUgMCAwIDEgMi43NSAwaDE0LjVBMi43NSAyLjc1IDAgMCAxIDIwIDIuNzV2MTAuNUEyLjc1IDIuNzUgMCAwIDEgMTcuMjUgMTZIMi43NUEyLjc1IDIuNzUgMCAwIDEgMCAxMy4yNVYyLjc1Wk0yLjc1IDEuNWMtLjY5IDAtMS4yNS41Ni0xLjI1IDEuMjV2MTAuNWMwIC42OS41NiAxLjI1IDEuMjUgMS4yNWgxNC41Yy42OSAwIDEuMjUtLjU2IDEuMjUtMS4yNVYyLjc1YzAtLjY5LS41Ni0xLjI1LTEuMjUtMS4yNUgyLjc1WlwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2OC5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTkuNDcgNC4yMmEuNzUuNzUgMCAwIDEgMS4wNiAwbDIuMjUgMi4yNWEuNzUuNzUgMCAwIDEtMS4wNiAxLjA2bC0uOTctLjk3djQuNjlhLjc1Ljc1IDAgMCAxLTEuNSAwVjYuNTZsLS45Ny45N2EuNzUuNzUgMCAwIDEtMS4wNi0xLjA2bDIuMjUtMi4yNVpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSk7XG52YXIgU2NyZWVuU2hhcmVJY29uX2RlZmF1bHQgPSBTdmdTY3JlZW5TaGFyZUljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvU2NyZWVuU2hhcmVTdG9wSWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NjkgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnU2NyZWVuU2hhcmVTdG9wSWNvbiA9IChwcm9wcykgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0NjkuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfX3NwcmVhZFZhbHVlcyh7IHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHdpZHRoOiAyMCwgaGVpZ2h0OiAxNiwgZmlsbDogXCJub25lXCIgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2OS5jcmVhdGVFbGVtZW50KFwiZ1wiLCB7IGZpbGw6IFwiY3VycmVudENvbG9yXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0NjkuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk03LjI4IDQuMjJhLjc1Ljc1IDAgMCAwLTEuMDYgMS4wNkw4Ljk0IDhsLTIuNzIgMi43MmEuNzUuNzUgMCAxIDAgMS4wNiAxLjA2TDEwIDkuMDZsMi43MiAyLjcyYS43NS43NSAwIDEgMCAxLjA2LTEuMDZMMTEuMDYgOGwyLjcyLTIuNzJhLjc1Ljc1IDAgMCAwLTEuMDYtMS4wNkwxMCA2Ljk0elwiIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q2OS5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk0yLjc1IDBBMi43NSAyLjc1IDAgMCAwIDAgMi43NXYxMC41QTIuNzUgMi43NSAwIDAgMCAyLjc1IDE2aDE0LjVBMi43NSAyLjc1IDAgMCAwIDIwIDEzLjI1VjIuNzVBMi43NSAyLjc1IDAgMCAwIDE3LjI1IDB6TTEuNSAyLjc1YzAtLjY5LjU2LTEuMjUgMS4yNS0xLjI1aDE0LjVjLjY5IDAgMS4yNS41NiAxLjI1IDEuMjV2MTAuNWMwIC42OS0uNTYgMS4yNS0xLjI1IDEuMjVIMi43NWMtLjY5IDAtMS4yNS0uNTYtMS4yNS0xLjI1elwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9XG4pKSk7XG52YXIgU2NyZWVuU2hhcmVTdG9wSWNvbl9kZWZhdWx0ID0gU3ZnU2NyZWVuU2hhcmVTdG9wSWNvbjtcblxuLy8gc3JjL2Fzc2V0cy9pY29ucy9TcGlubmVySWNvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0NzAgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnU3Bpbm5lckljb24gPSAocHJvcHMpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX19zcHJlYWRWYWx1ZXMoeyB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB3aWR0aDogMTYsIGhlaWdodDogMTYsIGZpbGw6IFwibm9uZVwiIH0sIHByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NzAuY3JlYXRlRWxlbWVudChcbiAgXCJwYXRoXCIsXG4gIHtcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk04IDBhLjc1Ljc1IDAgMCAxIC43NS43NXYyLjVhLjc1Ljc1IDAgMCAxLTEuNSAwVi43NUEuNzUuNzUgMCAwIDEgOCAwWlwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIlxuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q3MC5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTggMTJhLjc1Ljc1IDAgMCAxIC43NS43NXYyLjVhLjc1Ljc1IDAgMCAxLTEuNSAwdi0yLjVBLjc1Ljc1IDAgMCAxIDggMTJaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIG9wYWNpdHk6IDAuN1xuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q3MC5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTEyIDEuMDcyYS43NS43NSAwIDAgMSAuMjc0IDEuMDI0bC0xLjI1IDIuMTY1YS43NS43NSAwIDAgMS0xLjI5OS0uNzVsMS4yNS0yLjE2NUEuNzUuNzUgMCAwIDEgMTIgMS4wNzJaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNiAxMS40NjRhLjc1Ljc1IDAgMCAxIC4yNzQgMS4wMjVsLTEuMjUgMi4xNjVhLjc1Ljc1IDAgMCAxLTEuMjk5LS43NWwxLjI1LTIuMTY1QS43NS43NSAwIDAgMSA2IDExLjQ2NFpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCIsXG4gICAgb3BhY2l0eTogMC42XG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNMTQuOTI4IDRhLjc1Ljc1IDAgMCAxLS4yNzQgMS4wMjVsLTIuMTY1IDEuMjVhLjc1Ljc1IDAgMSAxLS43NS0xLjNsMi4xNjUtMS4yNUEuNzUuNzUgMCAwIDEgMTQuOTI4IDRaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNC41MzYgMTBhLjc1Ljc1IDAgMCAxLS4yNzUgMS4wMjRsLTIuMTY1IDEuMjVhLjc1Ljc1IDAgMCAxLS43NS0xLjI5OGwyLjE2NS0xLjI1QS43NS43NSAwIDAgMSA0LjUzNiAxMFpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCIsXG4gICAgb3BhY2l0eTogMC41XG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNMTYgOGEuNzUuNzUgMCAwIDEtLjc1Ljc1aC0yLjVhLjc1Ljc1IDAgMCAxIDAtMS41aDIuNUEuNzUuNzUgMCAwIDEgMTYgOFpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCJcbiAgfVxuKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NzAuY3JlYXRlRWxlbWVudChcbiAgXCJwYXRoXCIsXG4gIHtcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk00IDhhLjc1Ljc1IDAgMCAxLS43NS43NUguNzVhLjc1Ljc1IDAgMCAxIDAtMS41aDIuNUEuNzUuNzUgMCAwIDEgNCA4WlwiLFxuICAgIGNsaXBSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBvcGFjaXR5OiAwLjRcbiAgfVxuKSwgLyogQF9fUFVSRV9fICovIFJlYWN0NzAuY3JlYXRlRWxlbWVudChcbiAgXCJwYXRoXCIsXG4gIHtcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk0xNC45MjggMTJhLjc1Ljc1IDAgMCAxLTEuMDI0LjI3NGwtMi4xNjUtMS4yNWEuNzUuNzUgMCAwIDEgLjc1LTEuMjk5bDIuMTY1IDEuMjVBLjc1Ljc1IDAgMCAxIDE0LjkyOCAxMlpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCIsXG4gICAgb3BhY2l0eTogMC45XG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNC41MzYgNmEuNzUuNzUgMCAwIDEtMS4wMjUuMjc1bC0yLjE2NS0xLjI1YS43NS43NSAwIDEgMSAuNzUtMS4zbDIuMTY1IDEuMjVBLjc1Ljc1IDAgMCAxIDQuNTM2IDZaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIG9wYWNpdHk6IDAuM1xuICB9XG4pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q3MC5jcmVhdGVFbGVtZW50KFxuICBcInBhdGhcIixcbiAge1xuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIGQ6IFwiTTEyIDE0LjkyOGEuNzUuNzUgMCAwIDEtMS4wMjQtLjI3NGwtMS4yNS0yLjE2NWEuNzUuNzUgMCAwIDEgMS4yOTgtLjc1bDEuMjUgMi4xNjVBLjc1Ljc1IDAgMCAxIDEyIDE0LjkyOFpcIixcbiAgICBjbGlwUnVsZTogXCJldmVub2RkXCIsXG4gICAgb3BhY2l0eTogMC44XG4gIH1cbiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcwLmNyZWF0ZUVsZW1lbnQoXG4gIFwicGF0aFwiLFxuICB7XG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNNiA0LjUzNmEuNzUuNzUgMCAwIDEtMS4wMjQtLjI3NWwtMS4yNS0yLjE2NWEuNzUuNzUgMCAxIDEgMS4yOTktLjc1bDEuMjUgMi4xNjVBLjc1Ljc1IDAgMCAxIDYgNC41MzZaXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiLFxuICAgIG9wYWNpdHk6IDAuMlxuICB9XG4pKTtcbnZhciBTcGlubmVySWNvbl9kZWZhdWx0ID0gU3ZnU3Bpbm5lckljb247XG5cbi8vIHNyYy9hc3NldHMvaWNvbnMvVW5mb2N1c1RvZ2dsZUljb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDcxIGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z1VuZm9jdXNUb2dnbGVJY29uID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3MS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fc3ByZWFkVmFsdWVzKHsgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgd2lkdGg6IDE2LCBoZWlnaHQ6IDE2LCBmaWxsOiBcIm5vbmVcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcxLmNyZWF0ZUVsZW1lbnQoXCJnXCIsIHsgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLCBzdHJva2VMaW5lY2FwOiBcInJvdW5kXCIsIHN0cm9rZUxpbmVqb2luOiBcInJvdW5kXCIsIHN0cm9rZVdpZHRoOiAxLjUgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0NzEuY3JlYXRlRWxlbWVudChcInBhdGhcIiwgeyBkOiBcIk0xMy4yNSA3SDltMCAwVjIuNzVNOSA3bDUuMjUtNS4yNU0yLjc1IDlIN20wIDB2NC4yNU03IDlsLTUuMjUgNS4yNVwiIH0pKSk7XG52YXIgVW5mb2N1c1RvZ2dsZUljb25fZGVmYXVsdCA9IFN2Z1VuZm9jdXNUb2dnbGVJY29uO1xuXG4vLyBzcmMvY29tcG9uZW50cy9jb250cm9scy9Gb2N1c1RvZ2dsZS50c3hcbmZ1bmN0aW9uIEZvY3VzVG9nZ2xlKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7IHRyYWNrUmVmLCB0cmFja1NvdXJjZSwgcGFydGljaXBhbnQgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1widHJhY2tSZWZcIiwgXCJ0cmFja1NvdXJjZVwiLCBcInBhcnRpY2lwYW50XCJdKTtcbiAgY29uc3QgdHJhY2tSZWZGcm9tQ29udGV4dCA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IHsgbWVyZ2VkUHJvcHMsIGluRm9jdXMgfSA9IHVzZUZvY3VzVG9nZ2xlKHtcbiAgICB0cmFja1JlZjogdHJhY2tSZWYgIT0gbnVsbCA/IHRyYWNrUmVmIDogdHJhY2tSZWZGcm9tQ29udGV4dCxcbiAgICB0cmFja1NvdXJjZSxcbiAgICBwYXJ0aWNpcGFudCxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcyLmNyZWF0ZUVsZW1lbnQoTGF5b3V0Q29udGV4dC5Db25zdW1lciwgbnVsbCwgKGxheW91dENvbnRleHQpID0+IGxheW91dENvbnRleHQgIT09IHZvaWQgMCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3Mi5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBtZXJnZWRQcm9wcyksIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4gOiBpbkZvY3VzID8gLyogQF9fUFVSRV9fICovIFJlYWN0NzIuY3JlYXRlRWxlbWVudChVbmZvY3VzVG9nZ2xlSWNvbl9kZWZhdWx0LCBudWxsKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDcyLmNyZWF0ZUVsZW1lbnQoRm9jdXNUb2dnbGVJY29uX2RlZmF1bHQsIG51bGwpKSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NvbnRyb2xzL01lZGlhRGV2aWNlU2VsZWN0LnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q3MyBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvb21FdmVudCBhcyBSb29tRXZlbnQyIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5mdW5jdGlvbiBNZWRpYURldmljZVNlbGVjdChfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIGtpbmQsXG4gICAgaW5pdGlhbFNlbGVjdGlvbixcbiAgICBvbkFjdGl2ZURldmljZUNoYW5nZSxcbiAgICBvbkRldmljZUxpc3RDaGFuZ2UsXG4gICAgb25EZXZpY2VTZWxlY3RFcnJvcixcbiAgICBleGFjdE1hdGNoLFxuICAgIHRyYWNrLFxuICAgIHJlcXVlc3RQZXJtaXNzaW9ucyxcbiAgICBvbkVycm9yXG4gIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcImtpbmRcIixcbiAgICBcImluaXRpYWxTZWxlY3Rpb25cIixcbiAgICBcIm9uQWN0aXZlRGV2aWNlQ2hhbmdlXCIsXG4gICAgXCJvbkRldmljZUxpc3RDaGFuZ2VcIixcbiAgICBcIm9uRGV2aWNlU2VsZWN0RXJyb3JcIixcbiAgICBcImV4YWN0TWF0Y2hcIixcbiAgICBcInRyYWNrXCIsXG4gICAgXCJyZXF1ZXN0UGVybWlzc2lvbnNcIixcbiAgICBcIm9uRXJyb3JcIlxuICBdKTtcbiAgY29uc3Qgcm9vbSA9IHVzZU1heWJlUm9vbUNvbnRleHQoKTtcbiAgY29uc3QgaGFuZGxlRXJyb3IgPSBSZWFjdDczLnVzZUNhbGxiYWNrKFxuICAgIChlKSA9PiB7XG4gICAgICBpZiAocm9vbSkge1xuICAgICAgICByb29tLmVtaXQoUm9vbUV2ZW50Mi5NZWRpYURldmljZXNFcnJvciwgZSk7XG4gICAgICB9XG4gICAgICBvbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBvbkVycm9yKGUpO1xuICAgIH0sXG4gICAgW3Jvb20sIG9uRXJyb3JdXG4gICk7XG4gIGNvbnN0IHsgZGV2aWNlcywgYWN0aXZlRGV2aWNlSWQsIHNldEFjdGl2ZU1lZGlhRGV2aWNlLCBjbGFzc05hbWUgfSA9IHVzZU1lZGlhRGV2aWNlU2VsZWN0KHtcbiAgICBraW5kLFxuICAgIHJvb20sXG4gICAgdHJhY2ssXG4gICAgcmVxdWVzdFBlcm1pc3Npb25zLFxuICAgIG9uRXJyb3I6IGhhbmRsZUVycm9yXG4gIH0pO1xuICBSZWFjdDczLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxTZWxlY3Rpb24gIT09IHZvaWQgMCkge1xuICAgICAgc2V0QWN0aXZlTWVkaWFEZXZpY2UoaW5pdGlhbFNlbGVjdGlvbik7XG4gICAgfVxuICB9LCBbc2V0QWN0aXZlTWVkaWFEZXZpY2VdKTtcbiAgUmVhY3Q3My51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygb25EZXZpY2VMaXN0Q2hhbmdlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIG9uRGV2aWNlTGlzdENoYW5nZShkZXZpY2VzKTtcbiAgICB9XG4gIH0sIFtvbkRldmljZUxpc3RDaGFuZ2UsIGRldmljZXNdKTtcbiAgUmVhY3Q3My51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhY3RpdmVEZXZpY2VJZCAmJiBhY3RpdmVEZXZpY2VJZCAhPT0gXCJcIikge1xuICAgICAgb25BY3RpdmVEZXZpY2VDaGFuZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQWN0aXZlRGV2aWNlQ2hhbmdlKGFjdGl2ZURldmljZUlkKTtcbiAgICB9XG4gIH0sIFthY3RpdmVEZXZpY2VJZF0pO1xuICBjb25zdCBoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2UgPSAoZGV2aWNlSWQpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgeWllbGQgc2V0QWN0aXZlTWVkaWFEZXZpY2UoZGV2aWNlSWQsIHsgZXhhY3Q6IGV4YWN0TWF0Y2ggfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBvbkRldmljZVNlbGVjdEVycm9yID09IG51bGwgPyB2b2lkIDAgOiBvbkRldmljZVNlbGVjdEVycm9yKGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IFJlYWN0NzMudXNlTWVtbyhcbiAgICAoKSA9PiBtZXJnZVByb3BzMihwcm9wcywgeyBjbGFzc05hbWUgfSwgeyBjbGFzc05hbWU6IFwibGstbGlzdFwiIH0pLFxuICAgIFtjbGFzc05hbWUsIHByb3BzXVxuICApO1xuICBmdW5jdGlvbiBpc0FjdGl2ZShkZXZpY2VJZCwgYWN0aXZlRGV2aWNlSWQyLCBpbmRleCkge1xuICAgIHJldHVybiBkZXZpY2VJZCA9PT0gYWN0aXZlRGV2aWNlSWQyIHx8IGluZGV4ID09PSAwICYmIGFjdGl2ZURldmljZUlkMiA9PT0gXCJkZWZhdWx0XCI7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDczLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgbWVyZ2VkUHJvcHMpLCBkZXZpY2VzLm1hcCgoZGV2aWNlLCBpbmRleCkgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0NzMuY3JlYXRlRWxlbWVudChcbiAgICBcImxpXCIsXG4gICAge1xuICAgICAga2V5OiBkZXZpY2UuZGV2aWNlSWQsXG4gICAgICBpZDogZGV2aWNlLmRldmljZUlkLFxuICAgICAgXCJkYXRhLWxrLWFjdGl2ZVwiOiBpc0FjdGl2ZShkZXZpY2UuZGV2aWNlSWQsIGFjdGl2ZURldmljZUlkLCBpbmRleCksXG4gICAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNBY3RpdmUoZGV2aWNlLmRldmljZUlkLCBhY3RpdmVEZXZpY2VJZCwgaW5kZXgpLFxuICAgICAgcm9sZTogXCJvcHRpb25cIlxuICAgIH0sXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0NzMuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJsay1idXR0b25cIiwgb25DbGljazogKCkgPT4gaGFuZGxlQWN0aXZlRGV2aWNlQ2hhbmdlKGRldmljZS5kZXZpY2VJZCkgfSwgZGV2aWNlLmxhYmVsKVxuICApKSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NvbnRyb2xzL1N0YXJ0QXVkaW8udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDc0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gU3RhcnRBdWRpbyhfYSkge1xuICB2YXIgX2IgPSBfYSwgeyBsYWJlbCA9IFwiQWxsb3cgQXVkaW9cIiB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXCJsYWJlbFwiXSk7XG4gIGNvbnN0IHJvb20gPSB1c2VSb29tQ29udGV4dCgpO1xuICBjb25zdCB7IG1lcmdlZFByb3BzIH0gPSB1c2VTdGFydEF1ZGlvKHsgcm9vbSwgcHJvcHMgfSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3NC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBtZXJnZWRQcm9wcyksIGxhYmVsKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY29udHJvbHMvVHJhY2tUb2dnbGUudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDc2IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvYXNzZXRzL2ljb25zL3V0aWwudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDc1IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29ubmVjdGlvblF1YWxpdHkgYXMgQ29ubmVjdGlvblF1YWxpdHkyLCBUcmFjayBhcyBUcmFjazQgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIGdldFNvdXJjZUljb24oc291cmNlLCBlbmFibGVkKSB7XG4gIHN3aXRjaCAoc291cmNlKSB7XG4gICAgY2FzZSBUcmFjazQuU291cmNlLk1pY3JvcGhvbmU6XG4gICAgICByZXR1cm4gZW5hYmxlZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDc1LmNyZWF0ZUVsZW1lbnQoTWljSWNvbl9kZWZhdWx0LCBudWxsKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDc1LmNyZWF0ZUVsZW1lbnQoTWljRGlzYWJsZWRJY29uX2RlZmF1bHQsIG51bGwpO1xuICAgIGNhc2UgVHJhY2s0LlNvdXJjZS5DYW1lcmE6XG4gICAgICByZXR1cm4gZW5hYmxlZCA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDc1LmNyZWF0ZUVsZW1lbnQoQ2FtZXJhSWNvbl9kZWZhdWx0LCBudWxsKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDc1LmNyZWF0ZUVsZW1lbnQoQ2FtZXJhRGlzYWJsZWRJY29uX2RlZmF1bHQsIG51bGwpO1xuICAgIGNhc2UgVHJhY2s0LlNvdXJjZS5TY3JlZW5TaGFyZTpcbiAgICAgIHJldHVybiBlbmFibGVkID8gLyogQF9fUFVSRV9fICovIFJlYWN0NzUuY3JlYXRlRWxlbWVudChTY3JlZW5TaGFyZVN0b3BJY29uX2RlZmF1bHQsIG51bGwpIDogLyogQF9fUFVSRV9fICovIFJlYWN0NzUuY3JlYXRlRWxlbWVudChTY3JlZW5TaGFyZUljb25fZGVmYXVsdCwgbnVsbCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbm5lY3Rpb25RdWFsaXR5SWNvbihxdWFsaXR5KSB7XG4gIHN3aXRjaCAocXVhbGl0eSkge1xuICAgIGNhc2UgQ29ubmVjdGlvblF1YWxpdHkyLkV4Y2VsbGVudDpcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3NS5jcmVhdGVFbGVtZW50KFF1YWxpdHlFeGNlbGxlbnRJY29uX2RlZmF1bHQsIG51bGwpO1xuICAgIGNhc2UgQ29ubmVjdGlvblF1YWxpdHkyLkdvb2Q6XG4gICAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0NzUuY3JlYXRlRWxlbWVudChRdWFsaXR5R29vZEljb25fZGVmYXVsdCwgbnVsbCk7XG4gICAgY2FzZSBDb25uZWN0aW9uUXVhbGl0eTIuUG9vcjpcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3NS5jcmVhdGVFbGVtZW50KFF1YWxpdHlQb29ySWNvbl9kZWZhdWx0LCBudWxsKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDc1LmNyZWF0ZUVsZW1lbnQoUXVhbGl0eVVua25vd25JY29uX2RlZmF1bHQsIG51bGwpO1xuICB9XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2NvbnRyb2xzL1RyYWNrVG9nZ2xlLnRzeFxuZnVuY3Rpb24gVHJhY2tUb2dnbGUoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHsgc2hvd0ljb24gfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1wic2hvd0ljb25cIl0pO1xuICBjb25zdCB7IGJ1dHRvblByb3BzLCBlbmFibGVkIH0gPSB1c2VUcmFja1RvZ2dsZShwcm9wcyk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3Ni5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBidXR0b25Qcm9wcyksIChzaG93SWNvbiAhPSBudWxsID8gc2hvd0ljb24gOiB0cnVlKSAmJiBnZXRTb3VyY2VJY29uKHByb3BzLnNvdXJjZSwgZW5hYmxlZCksIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbGF5b3V0L0ZvY3VzTGF5b3V0LnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q4NCBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvUGFydGljaXBhbnRUaWxlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q4MyBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrNSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0IHsgaXNUcmFja1JlZmVyZW5jZSBhcyBpc1RyYWNrUmVmZXJlbmNlMywgaXNUcmFja1JlZmVyZW5jZVBpbm5lZCBhcyBpc1RyYWNrUmVmZXJlbmNlUGlubmVkMiB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDc3IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IocHJvcHMpIHtcbiAgdmFyIF9hO1xuICBjb25zdCB7IGNsYXNzTmFtZSwgcXVhbGl0eSB9ID0gdXNlQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IocHJvcHMpO1xuICBjb25zdCBlbGVtZW50UHJvcHMgPSBSZWFjdDc3LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXJnZVByb3BzMihwcm9wcywgeyBjbGFzc05hbWUgfSkpLCB7IFwiZGF0YS1say1xdWFsaXR5XCI6IHF1YWxpdHkgfSk7XG4gIH0sIFtxdWFsaXR5LCBwcm9wcywgY2xhc3NOYW1lXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q3Ny5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBlbGVtZW50UHJvcHMpLCAoX2EgPSBwcm9wcy5jaGlsZHJlbikgIT0gbnVsbCA/IF9hIDogZ2V0Q29ubmVjdGlvblF1YWxpdHlJY29uKHF1YWxpdHkpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvUGFydGljaXBhbnROYW1lLnRzeFxuaW1wb3J0IHsgc2V0dXBQYXJ0aWNpcGFudE5hbWUgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDc4IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gUGFydGljaXBhbnROYW1lKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7IHBhcnRpY2lwYW50IH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcInBhcnRpY2lwYW50XCJdKTtcbiAgY29uc3QgcCA9IHVzZUVuc3VyZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50KTtcbiAgY29uc3QgeyBjbGFzc05hbWUsIGluZm9PYnNlcnZlciB9ID0gUmVhY3Q3OC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gc2V0dXBQYXJ0aWNpcGFudE5hbWUocCk7XG4gIH0sIFtwXSk7XG4gIGNvbnN0IHsgaWRlbnRpdHksIG5hbWUgfSA9IHVzZU9ic2VydmFibGVTdGF0ZShpbmZvT2JzZXJ2ZXIsIHtcbiAgICBuYW1lOiBwLm5hbWUsXG4gICAgaWRlbnRpdHk6IHAuaWRlbnRpdHksXG4gICAgbWV0YWRhdGE6IHAubWV0YWRhdGFcbiAgfSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gUmVhY3Q3OC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wczIocHJvcHMsIHsgY2xhc3NOYW1lLCBcImRhdGEtbGstcGFydGljaXBhbnQtbmFtZVwiOiBuYW1lIH0pO1xuICB9LCBbcHJvcHMsIGNsYXNzTmFtZSwgbmFtZV0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0NzguY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX19zcHJlYWRWYWx1ZXMoe30sIG1lcmdlZFByb3BzKSwgbmFtZSAhPT0gXCJcIiA/IG5hbWUgOiBpZGVudGl0eSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9wYXJ0aWNpcGFudC9UcmFja011dGVkSW5kaWNhdG9yLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q3OSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIFRyYWNrTXV0ZWRJbmRpY2F0b3IoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBzb3VyY2UsXG4gICAgcGFydGljaXBhbnQsXG4gICAgdHJhY2tSZWYsXG4gICAgc2hvdyA9IFwiYWx3YXlzXCJcbiAgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwic291cmNlXCIsXG4gICAgXCJwYXJ0aWNpcGFudFwiLFxuICAgIFwidHJhY2tSZWZcIixcbiAgICBcInNob3dcIlxuICBdKTtcbiAgdmFyIF9hMiwgX2IyO1xuICBjb25zdCB7IGNsYXNzTmFtZSwgaXNNdXRlZCB9ID0gdXNlVHJhY2tNdXRlZEluZGljYXRvcih0cmFja1JlZiAhPSBudWxsID8gdHJhY2tSZWYgOiBzb3VyY2UsIHsgcGFydGljaXBhbnQgfSk7XG4gIGNvbnN0IHNob3dJbmRpY2F0b3IgPSBzaG93ID09PSBcImFsd2F5c1wiIHx8IHNob3cgPT09IFwibXV0ZWRcIiAmJiBpc011dGVkIHx8IHNob3cgPT09IFwidW5tdXRlZFwiICYmICFpc011dGVkO1xuICBjb25zdCBodG1sUHJvcHMgPSBSZWFjdDc5LnVzZU1lbW8oXG4gICAgKCkgPT4gbWVyZ2VQcm9wczIocHJvcHMsIHtcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0pLFxuICAgIFtjbGFzc05hbWUsIHByb3BzXVxuICApO1xuICBpZiAoIXNob3dJbmRpY2F0b3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0NzkuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBodG1sUHJvcHMpLCB7IFwiZGF0YS1say1tdXRlZFwiOiBpc011dGVkIH0pLCAoX2IyID0gcHJvcHMuY2hpbGRyZW4pICE9IG51bGwgPyBfYjIgOiBnZXRTb3VyY2VJY29uKChfYTIgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYuc291cmNlKSAhPSBudWxsID8gX2EyIDogc291cmNlLCAhaXNNdXRlZCkpO1xufVxuXG4vLyBzcmMvYXNzZXRzL2ltYWdlcy9QYXJ0aWNpcGFudFBsYWNlaG9sZGVyLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q4MCBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdQYXJ0aWNpcGFudFBsYWNlaG9sZGVyID0gKHByb3BzKSA9PiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4MC5jcmVhdGVFbGVtZW50KFxuICBcInN2Z1wiLFxuICBfX3NwcmVhZFZhbHVlcyh7XG4gICAgd2lkdGg6IDMyMCxcbiAgICBoZWlnaHQ6IDMyMCxcbiAgICB2aWV3Qm94OiBcIjAgMCAzMjAgMzIwXCIsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZCBtZWV0XCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCBwcm9wcyksXG4gIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgwLmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJNMTYwIDE4MEMyMDQuMTgyIDE4MCAyNDAgMTQ0LjE4MyAyNDAgMTAwQzI0MCA1NS44MTcyIDIwNC4xODIgMjAgMTYwIDIwQzExNS44MTcgMjAgNzkuOTk5NyA1NS44MTcyIDc5Ljk5OTcgMTAwQzc5Ljk5OTcgMTQ0LjE4MyAxMTUuODE3IDE4MCAxNjAgMTgwWlwiLFxuICAgICAgZmlsbDogXCJ3aGl0ZVwiLFxuICAgICAgZmlsbE9wYWNpdHk6IDAuMjVcbiAgICB9XG4gICksXG4gIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgwLmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJwYXRoXCIsXG4gICAge1xuICAgICAgZDogXCJNOTcuNjU0MiAxOTQuNjE0QzEwMy4yNjcgMTkxLjgxOCAxMDkuODQxIDE5Mi40ODEgMTE1LjUxOSAxOTUuMTQxQzEyOS4wMjUgMjAxLjQ2NiAxNDQuMSAyMDUgMTU5Ljk5OSAyMDVDMTc1Ljg5OSAyMDUgMTkwLjk3MyAyMDEuNDY2IDIwNC40OCAxOTUuMTQxQzIxMC4xNTggMTkyLjQ4MSAyMTYuNzMyIDE5MS44MTggMjIyLjM0NSAxOTQuNjE0QzI2Mi43MDMgMjE0LjcxOSAyOTEuOTg1IDI1My43MzYgMjk4LjU5MSAzMDAuMDYyQzMwMC4xNSAzMTAuOTk3IDI5MS4wNDUgMzIwIDI4MCAzMjBIMzkuOTk5N0MyOC45NTQgMzIwIDE5Ljg0OTUgMzEwLjk5NyAyMS40MDg3IDMwMC4wNjJDMjguMDE0IDI1My43MzYgNTcuMjk2NiAyMTQuNzIgOTcuNjU0MiAxOTQuNjE0WlwiLFxuICAgICAgZmlsbDogXCJ3aGl0ZVwiLFxuICAgICAgZmlsbE9wYWNpdHk6IDAuMjVcbiAgICB9XG4gIClcbik7XG52YXIgUGFydGljaXBhbnRQbGFjZWhvbGRlcl9kZWZhdWx0ID0gU3ZnUGFydGljaXBhbnRQbGFjZWhvbGRlcjtcblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvVmlkZW9UcmFjay50c3hcbmltcG9ydCB7XG4gIFJlbW90ZVRyYWNrUHVibGljYXRpb25cbn0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDgxIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgdXNlSG9va3MgZnJvbSBcInVzZWhvb2tzLXRzXCI7XG5mdW5jdGlvbiBWaWRlb1RyYWNrKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7XG4gICAgb25UcmFja0NsaWNrLFxuICAgIG9uQ2xpY2ssXG4gICAgb25TdWJzY3JpcHRpb25TdGF0dXNDaGFuZ2VkLFxuICAgIHRyYWNrUmVmLFxuICAgIG5hbWUsXG4gICAgcHVibGljYXRpb24sXG4gICAgc291cmNlLFxuICAgIHBhcnRpY2lwYW50OiBwLFxuICAgIG1hbmFnZVN1YnNjcmlwdGlvblxuICB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXG4gICAgXCJvblRyYWNrQ2xpY2tcIixcbiAgICBcIm9uQ2xpY2tcIixcbiAgICBcIm9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZFwiLFxuICAgIFwidHJhY2tSZWZcIixcbiAgICBcIm5hbWVcIixcbiAgICBcInB1YmxpY2F0aW9uXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInBhcnRpY2lwYW50XCIsXG4gICAgXCJtYW5hZ2VTdWJzY3JpcHRpb25cIlxuICBdKTtcbiAgdmFyIF9hMiwgX2IyLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2o7XG4gIGNvbnN0IG1heWJlVHJhY2tSZWYgPSB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpO1xuICBjb25zdCBfbmFtZSA9IChfZCA9IChfYyA9IChfYTIgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYucHVibGljYXRpb24pID09IG51bGwgPyB2b2lkIDAgOiBfYTIudHJhY2tOYW1lKSAhPSBudWxsID8gX2MgOiAoX2IyID0gbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wdWJsaWNhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi50cmFja05hbWUpICE9IG51bGwgPyBfZCA6IG5hbWU7XG4gIGNvbnN0IF9zb3VyY2UgPSAoX2YgPSAoX2UgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYuc291cmNlKSAhPSBudWxsID8gX2UgOiBtYXliZVRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiBtYXliZVRyYWNrUmVmLnNvdXJjZSkgIT0gbnVsbCA/IF9mIDogc291cmNlO1xuICBjb25zdCBfcHVibGljYXRpb24gPSAoX2ggPSAoX2cgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYucHVibGljYXRpb24pICE9IG51bGwgPyBfZyA6IG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYucHVibGljYXRpb24pICE9IG51bGwgPyBfaCA6IHB1YmxpY2F0aW9uO1xuICBjb25zdCBfcGFydGljaXBhbnQgPSAoX2ogPSAoX2kgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYucGFydGljaXBhbnQpICE9IG51bGwgPyBfaSA6IG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYucGFydGljaXBhbnQpICE9IG51bGwgPyBfaiA6IHA7XG4gIGlmIChfc291cmNlID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJWaWRlb1RyYWNrOiBZb3UgbXVzdCBwcm92aWRlIGEgdHJhY2tSZWYgb3Igc291cmNlIHByb3BlcnR5LlwiKTtcbiAgfVxuICBjb25zdCBwYXJ0aWNpcGFudCA9IHVzZUVuc3VyZVBhcnRpY2lwYW50KF9wYXJ0aWNpcGFudCk7XG4gIGNvbnN0IG1lZGlhRWwgPSBSZWFjdDgxLnVzZVJlZihudWxsKTtcbiAgY29uc3QgaW50ZXJzZWN0aW9uRW50cnkgPSB1c2VIb29rcy51c2VJbnRlcnNlY3Rpb25PYnNlcnZlcihtZWRpYUVsLCB7fSk7XG4gIGNvbnN0IGRlYm91bmNlZEludGVyc2VjdGlvbkVudHJ5ID0gdXNlSG9va3MudXNlRGVib3VuY2UoaW50ZXJzZWN0aW9uRW50cnksIDNlMyk7XG4gIFJlYWN0ODEudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWFuYWdlU3Vic2NyaXB0aW9uICYmIF9wdWJsaWNhdGlvbiBpbnN0YW5jZW9mIFJlbW90ZVRyYWNrUHVibGljYXRpb24gJiYgKGRlYm91bmNlZEludGVyc2VjdGlvbkVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBkZWJvdW5jZWRJbnRlcnNlY3Rpb25FbnRyeS5pc0ludGVyc2VjdGluZykgPT09IGZhbHNlICYmIChpbnRlcnNlY3Rpb25FbnRyeSA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJzZWN0aW9uRW50cnkuaXNJbnRlcnNlY3RpbmcpID09PSBmYWxzZSkge1xuICAgICAgX3B1YmxpY2F0aW9uLnNldFN1YnNjcmliZWQoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2RlYm91bmNlZEludGVyc2VjdGlvbkVudHJ5LCBfcHVibGljYXRpb24sIG1hbmFnZVN1YnNjcmlwdGlvbl0pO1xuICBSZWFjdDgxLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1hbmFnZVN1YnNjcmlwdGlvbiAmJiBfcHVibGljYXRpb24gaW5zdGFuY2VvZiBSZW1vdGVUcmFja1B1YmxpY2F0aW9uICYmIChpbnRlcnNlY3Rpb25FbnRyeSA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJzZWN0aW9uRW50cnkuaXNJbnRlcnNlY3RpbmcpID09PSB0cnVlKSB7XG4gICAgICBfcHVibGljYXRpb24uc2V0U3Vic2NyaWJlZCh0cnVlKTtcbiAgICB9XG4gIH0sIFtpbnRlcnNlY3Rpb25FbnRyeSwgX3B1YmxpY2F0aW9uLCBtYW5hZ2VTdWJzY3JpcHRpb25dKTtcbiAgY29uc3Qge1xuICAgIGVsZW1lbnRQcm9wcyxcbiAgICBwdWJsaWNhdGlvbjogcHViLFxuICAgIGlzU3Vic2NyaWJlZFxuICB9ID0gdXNlTWVkaWFUcmFja0J5U291cmNlT3JOYW1lKFxuICAgIHsgcGFydGljaXBhbnQsIG5hbWU6IF9uYW1lLCBzb3VyY2U6IF9zb3VyY2UsIHB1YmxpY2F0aW9uOiBfcHVibGljYXRpb24gfSxcbiAgICB7XG4gICAgICBlbGVtZW50OiBtZWRpYUVsLFxuICAgICAgcHJvcHNcbiAgICB9XG4gICk7XG4gIFJlYWN0ODEudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvblN1YnNjcmlwdGlvblN0YXR1c0NoYW5nZWQgPT0gbnVsbCA/IHZvaWQgMCA6IG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCghIWlzU3Vic2NyaWJlZCk7XG4gIH0sIFtpc1N1YnNjcmliZWQsIG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZF0pO1xuICBjb25zdCBjbGlja0hhbmRsZXIgPSAoZXZ0KSA9PiB7XG4gICAgb25DbGljayA9PSBudWxsID8gdm9pZCAwIDogb25DbGljayhldnQpO1xuICAgIG9uVHJhY2tDbGljayA9PSBudWxsID8gdm9pZCAwIDogb25UcmFja0NsaWNrKHsgcGFydGljaXBhbnQsIHRyYWNrOiBwdWIgfSk7XG4gIH07XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4MS5jcmVhdGVFbGVtZW50KFwidmlkZW9cIiwgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7IHJlZjogbWVkaWFFbCB9LCBlbGVtZW50UHJvcHMpLCB7IG11dGVkOiB0cnVlLCBvbkNsaWNrOiBjbGlja0hhbmRsZXIgfSkpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9wYXJ0aWNpcGFudC9BdWRpb1RyYWNrLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q4MiBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGxvZyBhcyBsb2c5IH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0IHsgUmVtb3RlQXVkaW9UcmFjaywgUmVtb3RlVHJhY2tQdWJsaWNhdGlvbiBhcyBSZW1vdGVUcmFja1B1YmxpY2F0aW9uMiB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gQXVkaW9UcmFjayhfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIHRyYWNrUmVmLFxuICAgIG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCxcbiAgICB2b2x1bWUsXG4gICAgc291cmNlLFxuICAgIG5hbWUsXG4gICAgcHVibGljYXRpb24sXG4gICAgcGFydGljaXBhbnQ6IHBcbiAgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwidHJhY2tSZWZcIixcbiAgICBcIm9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZFwiLFxuICAgIFwidm9sdW1lXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcIm5hbWVcIixcbiAgICBcInB1YmxpY2F0aW9uXCIsXG4gICAgXCJwYXJ0aWNpcGFudFwiXG4gIF0pO1xuICB2YXIgX2EyLCBfYjIsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9pLCBfajtcbiAgY29uc3QgbWF5YmVUcmFja1JlZiA9IHVzZU1heWJlVHJhY2tSZWZDb250ZXh0KCk7XG4gIGNvbnN0IF9uYW1lID0gKF9kID0gKF9jID0gKF9hMiA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wdWJsaWNhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi50cmFja05hbWUpICE9IG51bGwgPyBfYyA6IChfYjIgPSBtYXliZVRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiBtYXliZVRyYWNrUmVmLnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLnRyYWNrTmFtZSkgIT0gbnVsbCA/IF9kIDogbmFtZTtcbiAgY29uc3QgX3NvdXJjZSA9IChfZiA9IChfZSA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5zb3VyY2UpICE9IG51bGwgPyBfZSA6IG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYuc291cmNlKSAhPSBudWxsID8gX2YgOiBzb3VyY2U7XG4gIGNvbnN0IF9wdWJsaWNhdGlvbiA9IChfaCA9IChfZyA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9nIDogbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9oIDogcHVibGljYXRpb247XG4gIGNvbnN0IF9wYXJ0aWNpcGFudCA9IChfaiA9IChfaSA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wYXJ0aWNpcGFudCkgIT0gbnVsbCA/IF9pIDogbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wYXJ0aWNpcGFudCkgIT0gbnVsbCA/IF9qIDogcDtcbiAgaWYgKF9zb3VyY2UgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBBdWRpb1RyYWNrIGNvbXBvbmVudCBleHBlY3RzIGEgdHJhY2tSZWYgb3Igc291cmNlIHByb3BlcnR5LlwiKTtcbiAgfVxuICBjb25zdCBtZWRpYUVsID0gUmVhY3Q4Mi51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHBhcnRpY2lwYW50ID0gdXNlRW5zdXJlUGFydGljaXBhbnQoX3BhcnRpY2lwYW50KTtcbiAgY29uc3Qge1xuICAgIGVsZW1lbnRQcm9wcyxcbiAgICBpc1N1YnNjcmliZWQsXG4gICAgdHJhY2ssXG4gICAgcHVibGljYXRpb246IHB1YlxuICB9ID0gdXNlTWVkaWFUcmFja0J5U291cmNlT3JOYW1lKFxuICAgIHsgc291cmNlOiBfc291cmNlLCBuYW1lOiBfbmFtZSwgcGFydGljaXBhbnQsIHB1YmxpY2F0aW9uOiBfcHVibGljYXRpb24gfSxcbiAgICB7XG4gICAgICBlbGVtZW50OiBtZWRpYUVsLFxuICAgICAgcHJvcHNcbiAgICB9XG4gICk7XG4gIFJlYWN0ODIudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvblN1YnNjcmlwdGlvblN0YXR1c0NoYW5nZWQgPT0gbnVsbCA/IHZvaWQgMCA6IG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCghIWlzU3Vic2NyaWJlZCk7XG4gIH0sIFtpc1N1YnNjcmliZWQsIG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZF0pO1xuICBSZWFjdDgyLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHRyYWNrID09PSB2b2lkIDAgfHwgdm9sdW1lID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRyYWNrIGluc3RhbmNlb2YgUmVtb3RlQXVkaW9UcmFjaykge1xuICAgICAgdHJhY2suc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZzkud2FybihcIlZvbHVtZSBjYW4gb25seSBiZSBzZXQgb24gcmVtb3RlIGF1ZGlvIHRyYWNrcy5cIik7XG4gICAgfVxuICB9LCBbdm9sdW1lLCB0cmFja10pO1xuICBSZWFjdDgyLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHB1YiA9PT0gdm9pZCAwIHx8IHByb3BzLm11dGVkID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHB1YiBpbnN0YW5jZW9mIFJlbW90ZVRyYWNrUHVibGljYXRpb24yKSB7XG4gICAgICBwdWIuc2V0RW5hYmxlZCghcHJvcHMubXV0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2c5Lndhcm4oXCJDYW4gb25seSBjYWxsIHNldEVuYWJsZWQgb24gcmVtb3RlIHRyYWNrIHB1YmxpY2F0aW9ucy5cIik7XG4gICAgfVxuICB9LCBbcHJvcHMubXV0ZWQsIHB1YiwgdHJhY2tdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgyLmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiLCBfX3NwcmVhZFZhbHVlcyh7IHJlZjogbWVkaWFFbCB9LCBlbGVtZW50UHJvcHMpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvUGFydGljaXBhbnRUaWxlLnRzeFxuZnVuY3Rpb24gUGFydGljaXBhbnRDb250ZXh0SWZOZWVkZWQocHJvcHMpIHtcbiAgY29uc3QgaGFzQ29udGV4dCA9ICEhdXNlTWF5YmVQYXJ0aWNpcGFudENvbnRleHQoKTtcbiAgcmV0dXJuIHByb3BzLnBhcnRpY2lwYW50ICYmICFoYXNDb250ZXh0ID8gLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzLnBhcnRpY2lwYW50IH0sIHByb3BzLmNoaWxkcmVuKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUmVhY3Q4My5GcmFnbWVudCwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gVHJhY2tSZWZDb250ZXh0SWZOZWVkZWQocHJvcHMpIHtcbiAgY29uc3QgaGFzQ29udGV4dCA9ICEhdXNlTWF5YmVUcmFja1JlZkNvbnRleHQoKTtcbiAgcmV0dXJuIHByb3BzLnRyYWNrUmVmICYmICFoYXNDb250ZXh0ID8gLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChUcmFja1JlZkNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzLnRyYWNrUmVmIH0sIHByb3BzLmNoaWxkcmVuKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUmVhY3Q4My5GcmFnbWVudCwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gUGFydGljaXBhbnRUaWxlKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7XG4gICAgdHJhY2tSZWYsXG4gICAgcGFydGljaXBhbnQsXG4gICAgY2hpbGRyZW4sXG4gICAgc291cmNlID0gVHJhY2s1LlNvdXJjZS5DYW1lcmEsXG4gICAgb25QYXJ0aWNpcGFudENsaWNrLFxuICAgIHB1YmxpY2F0aW9uLFxuICAgIGRpc2FibGVTcGVha2luZ0luZGljYXRvclxuICB9ID0gX2IsIGh0bWxQcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwidHJhY2tSZWZcIixcbiAgICBcInBhcnRpY2lwYW50XCIsXG4gICAgXCJjaGlsZHJlblwiLFxuICAgIFwic291cmNlXCIsXG4gICAgXCJvblBhcnRpY2lwYW50Q2xpY2tcIixcbiAgICBcInB1YmxpY2F0aW9uXCIsXG4gICAgXCJkaXNhYmxlU3BlYWtpbmdJbmRpY2F0b3JcIlxuICBdKTtcbiAgdmFyIF9hMiwgX2IyO1xuICBjb25zdCBtYXliZVRyYWNrUmVmID0gdXNlTWF5YmVUcmFja1JlZkNvbnRleHQoKTtcbiAgY29uc3QgcCA9IHVzZUVuc3VyZVBhcnRpY2lwYW50KHBhcnRpY2lwYW50KTtcbiAgY29uc3QgdHJhY2tSZWZlcmVuY2UgPSBSZWFjdDgzLnVzZU1lbW8oKCkgPT4ge1xuICAgIHZhciBfYTMsIF9iMywgX2MsIF9kLCBfZSwgX2Y7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnRpY2lwYW50OiAoX2IzID0gKF9hMyA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wYXJ0aWNpcGFudCkgIT0gbnVsbCA/IF9hMyA6IG1heWJlVHJhY2tSZWYgPT0gbnVsbCA/IHZvaWQgMCA6IG1heWJlVHJhY2tSZWYucGFydGljaXBhbnQpICE9IG51bGwgPyBfYjMgOiBwLFxuICAgICAgc291cmNlOiAoX2QgPSAoX2MgPSB0cmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tSZWYuc291cmNlKSAhPSBudWxsID8gX2MgOiBtYXliZVRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiBtYXliZVRyYWNrUmVmLnNvdXJjZSkgIT0gbnVsbCA/IF9kIDogc291cmNlLFxuICAgICAgcHVibGljYXRpb246IChfZiA9IChfZSA9IHRyYWNrUmVmID09IG51bGwgPyB2b2lkIDAgOiB0cmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9lIDogbWF5YmVUcmFja1JlZiA9PSBudWxsID8gdm9pZCAwIDogbWF5YmVUcmFja1JlZi5wdWJsaWNhdGlvbikgIT0gbnVsbCA/IF9mIDogcHVibGljYXRpb25cbiAgICB9O1xuICB9LCBbbWF5YmVUcmFja1JlZiwgcCwgcHVibGljYXRpb24sIHNvdXJjZSwgdHJhY2tSZWZdKTtcbiAgY29uc3QgeyBlbGVtZW50UHJvcHMgfSA9IHVzZVBhcnRpY2lwYW50VGlsZSh7XG4gICAgcGFydGljaXBhbnQ6IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50LFxuICAgIGh0bWxQcm9wcyxcbiAgICBzb3VyY2U6IHRyYWNrUmVmZXJlbmNlLnNvdXJjZSxcbiAgICBwdWJsaWNhdGlvbjogdHJhY2tSZWZlcmVuY2UucHVibGljYXRpb24sXG4gICAgZGlzYWJsZVNwZWFraW5nSW5kaWNhdG9yLFxuICAgIG9uUGFydGljaXBhbnRDbGlja1xuICB9KTtcbiAgY29uc3QgaXNFbmNyeXB0ZWQgPSB1c2VJc0VuY3J5cHRlZChwKTtcbiAgY29uc3QgbGF5b3V0Q29udGV4dCA9IHVzZU1heWJlTGF5b3V0Q29udGV4dCgpO1xuICBjb25zdCBhdXRvTWFuYWdlU3Vic2NyaXB0aW9uID0gKF9hMiA9IHVzZUZlYXR1cmVDb250ZXh0KCkpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuYXV0b1N1YnNjcmlwdGlvbjtcbiAgY29uc3QgaGFuZGxlU3Vic2NyaWJlID0gUmVhY3Q4My51c2VDYWxsYmFjayhcbiAgICAoc3Vic2NyaWJlZCkgPT4ge1xuICAgICAgaWYgKHRyYWNrUmVmZXJlbmNlLnNvdXJjZSAmJiAhc3Vic2NyaWJlZCAmJiBsYXlvdXRDb250ZXh0ICYmIGxheW91dENvbnRleHQucGluLmRpc3BhdGNoICYmIGlzVHJhY2tSZWZlcmVuY2VQaW5uZWQyKHRyYWNrUmVmZXJlbmNlLCBsYXlvdXRDb250ZXh0LnBpbi5zdGF0ZSkpIHtcbiAgICAgICAgbGF5b3V0Q29udGV4dC5waW4uZGlzcGF0Y2goeyBtc2c6IFwiY2xlYXJfcGluXCIgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbdHJhY2tSZWZlcmVuY2UsIGxheW91dENvbnRleHRdXG4gICk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4My5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fc3ByZWFkVmFsdWVzKHsgc3R5bGU6IHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9IH0sIGVsZW1lbnRQcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoVHJhY2tSZWZDb250ZXh0SWZOZWVkZWQsIHsgdHJhY2tSZWY6IHRyYWNrUmVmZXJlbmNlIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUGFydGljaXBhbnRDb250ZXh0SWZOZWVkZWQsIHsgcGFydGljaXBhbnQ6IHRyYWNrUmVmZXJlbmNlLnBhcnRpY2lwYW50IH0sIGNoaWxkcmVuICE9IG51bGwgPyBjaGlsZHJlbiA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUmVhY3Q4My5GcmFnbWVudCwgbnVsbCwgaXNUcmFja1JlZmVyZW5jZTModHJhY2tSZWZlcmVuY2UpICYmICgoKF9iMiA9IHRyYWNrUmVmZXJlbmNlLnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLmtpbmQpID09PSBcInZpZGVvXCIgfHwgdHJhY2tSZWZlcmVuY2Uuc291cmNlID09PSBUcmFjazUuU291cmNlLkNhbWVyYSB8fCB0cmFja1JlZmVyZW5jZS5zb3VyY2UgPT09IFRyYWNrNS5Tb3VyY2UuU2NyZWVuU2hhcmUpID8gLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChcbiAgICBWaWRlb1RyYWNrLFxuICAgIHtcbiAgICAgIHRyYWNrUmVmOiB0cmFja1JlZmVyZW5jZSxcbiAgICAgIG9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZDogaGFuZGxlU3Vic2NyaWJlLFxuICAgICAgbWFuYWdlU3Vic2NyaXB0aW9uOiBhdXRvTWFuYWdlU3Vic2NyaXB0aW9uXG4gICAgfVxuICApIDogaXNUcmFja1JlZmVyZW5jZTModHJhY2tSZWZlcmVuY2UpICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoXG4gICAgQXVkaW9UcmFjayxcbiAgICB7XG4gICAgICB0cmFja1JlZjogdHJhY2tSZWZlcmVuY2UsXG4gICAgICBvblN1YnNjcmlwdGlvblN0YXR1c0NoYW5nZWQ6IGhhbmRsZVN1YnNjcmliZVxuICAgIH1cbiAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1wYXJ0aWNpcGFudC1wbGFjZWhvbGRlclwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUGFydGljaXBhbnRQbGFjZWhvbGRlcl9kZWZhdWx0LCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstcGFydGljaXBhbnQtbWV0YWRhdGFcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4My5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW1ldGFkYXRhLWl0ZW1cIiB9LCB0cmFja1JlZmVyZW5jZS5zb3VyY2UgPT09IFRyYWNrNS5Tb3VyY2UuQ2FtZXJhID8gLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChSZWFjdDgzLkZyYWdtZW50LCBudWxsLCBpc0VuY3J5cHRlZCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4My5jcmVhdGVFbGVtZW50KExvY2tMb2NrZWRJY29uX2RlZmF1bHQsIHsgc3R5bGU6IHsgbWFyZ2luUmlnaHQ6IFwiMC4yNXJlbVwiIH0gfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoXG4gICAgVHJhY2tNdXRlZEluZGljYXRvcixcbiAgICB7XG4gICAgICBzb3VyY2U6IFRyYWNrNS5Tb3VyY2UuTWljcm9waG9uZSxcbiAgICAgIHNob3c6IFwibXV0ZWRcIlxuICAgIH1cbiAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudE5hbWUsIG51bGwpKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoUmVhY3Q4My5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChTY3JlZW5TaGFyZUljb25fZGVmYXVsdCwgeyBzdHlsZTogeyBtYXJnaW5SaWdodDogXCIwLjI1cmVtXCIgfSB9KSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODMuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudE5hbWUsIG51bGwsIFwiJ3Mgc2NyZWVuXCIpKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDgzLmNyZWF0ZUVsZW1lbnQoQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IsIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW1ldGFkYXRhLWl0ZW1cIiB9KSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4My5jcmVhdGVFbGVtZW50KEZvY3VzVG9nZ2xlLCB7IHRyYWNrUmVmOiB0cmFja1JlZmVyZW5jZSB9KSkpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbGF5b3V0L0ZvY3VzTGF5b3V0LnRzeFxuZnVuY3Rpb24gRm9jdXNMYXlvdXRDb250YWluZXIocHJvcHMpIHtcbiAgY29uc3QgZWxlbWVudFByb3BzID0gbWVyZ2VQcm9wczIocHJvcHMsIHsgY2xhc3NOYW1lOiBcImxrLWZvY3VzLWxheW91dFwiIH0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0ODQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgZWxlbWVudFByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gRm9jdXNMYXlvdXQoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHsgdHJhY2tSZWYsIHRyYWNrIH0gPSBfYiwgaHRtbFByb3BzID0gX19vYmpSZXN0KF9iLCBbXCJ0cmFja1JlZlwiLCBcInRyYWNrXCJdKTtcbiAgY29uc3QgdHJhY2tSZWZlcmVuY2UgPSB0cmFja1JlZiAhPSBudWxsID8gdHJhY2tSZWYgOiB0cmFjaztcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDg0LmNyZWF0ZUVsZW1lbnQoUGFydGljaXBhbnRUaWxlLCBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgdHJhY2tSZWZlcmVuY2UpLCBodG1sUHJvcHMpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvbGF5b3V0L0dyaWRMYXlvdXQudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDg4IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvY29tcG9uZW50cy9UcmFja0xvb3AudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDg1IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZ2V0VHJhY2tSZWZlcmVuY2VJZCBhcyBnZXRUcmFja1JlZmVyZW5jZUlkMyB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmZ1bmN0aW9uIFRyYWNrTG9vcChfYSkge1xuICB2YXIgX2IgPSBfYSwgeyB0cmFja3MgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1widHJhY2tzXCJdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDg1LmNyZWF0ZUVsZW1lbnQoUmVhY3Q4NS5GcmFnbWVudCwgbnVsbCwgdHJhY2tzLm1hcCgodHJhY2tSZWZlcmVuY2UpID0+IHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0ODUuY3JlYXRlRWxlbWVudChcbiAgICAgIFRyYWNrUmVmQ29udGV4dC5Qcm92aWRlcixcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IHRyYWNrUmVmZXJlbmNlLFxuICAgICAgICBrZXk6IGdldFRyYWNrUmVmZXJlbmNlSWQzKHRyYWNrUmVmZXJlbmNlKVxuICAgICAgfSxcbiAgICAgIGNsb25lU2luZ2xlQ2hpbGQocHJvcHMuY2hpbGRyZW4pXG4gICAgKTtcbiAgfSkpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9jb250cm9scy9QYWdpbmF0aW9uQ29udHJvbC50c3hcbmltcG9ydCAqIGFzIFJlYWN0ODYgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjcmVhdGVJbnRlcmFjdGluZ09ic2VydmFibGUgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5mdW5jdGlvbiBQYWdpbmF0aW9uQ29udHJvbCh7XG4gIHRvdGFsUGFnZUNvdW50LFxuICBuZXh0UGFnZSxcbiAgcHJldlBhZ2UsXG4gIGN1cnJlbnRQYWdlLFxuICBwYWdlc0NvbnRhaW5lcjogY29ubmVjdGVkRWxlbWVudFxufSkge1xuICBjb25zdCBbaW50ZXJhY3RpdmUsIHNldEludGVyYWN0aXZlXSA9IFJlYWN0ODYudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdDg2LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHN1YnNjcmlwdGlvbjtcbiAgICBpZiAoY29ubmVjdGVkRWxlbWVudCkge1xuICAgICAgc3Vic2NyaXB0aW9uID0gY3JlYXRlSW50ZXJhY3RpbmdPYnNlcnZhYmxlKGNvbm5lY3RlZEVsZW1lbnQuY3VycmVudCwgMmUzKS5zdWJzY3JpYmUoXG4gICAgICAgIHNldEludGVyYWN0aXZlXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY29ubmVjdGVkRWxlbWVudF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0ODYuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1wYWdpbmF0aW9uLWNvbnRyb2xcIiwgXCJkYXRhLWxrLXVzZXItaW50ZXJhY3Rpb25cIjogaW50ZXJhY3RpdmUgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODYuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IGNsYXNzTmFtZTogXCJsay1idXR0b25cIiwgb25DbGljazogcHJldlBhZ2UgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODYuY3JlYXRlRWxlbWVudChDaGV2cm9uX2RlZmF1bHQsIG51bGwpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0ODYuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibGstcGFnaW5hdGlvbi1jb3VudFwiIH0sIGAke2N1cnJlbnRQYWdlfSBvZiAke3RvdGFsUGFnZUNvdW50fWApLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4Ni5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcImxrLWJ1dHRvblwiLCBvbkNsaWNrOiBuZXh0UGFnZSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4Ni5jcmVhdGVFbGVtZW50KENoZXZyb25fZGVmYXVsdCwgbnVsbCkpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvY29udHJvbHMvUGFnaW5hdGlvbkluZGljYXRvci50c3hcbmltcG9ydCAqIGFzIFJlYWN0ODcgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBQYWdpbmF0aW9uSW5kaWNhdG9yKHsgdG90YWxQYWdlQ291bnQsIGN1cnJlbnRQYWdlIH0pIHtcbiAgY29uc3QgYnViYmxlcyA9IG5ldyBBcnJheSh0b3RhbFBhZ2VDb3VudCkuZmlsbChcIlwiKS5tYXAoKF8sIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ICsgMSA9PT0gY3VycmVudFBhZ2UpIHtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4Ny5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IFwiZGF0YS1say1hY3RpdmVcIjogdHJ1ZSwga2V5OiBpbmRleCB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDg3LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsga2V5OiBpbmRleCB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0ODcuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1wYWdpbmF0aW9uLWluZGljYXRvclwiIH0sIGJ1YmJsZXMpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9sYXlvdXQvR3JpZExheW91dC50c3hcbmZ1bmN0aW9uIEdyaWRMYXlvdXQoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHsgdHJhY2tzIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcInRyYWNrc1wiXSk7XG4gIGNvbnN0IGdyaWRFbCA9IFJlYWN0ODguY3JlYXRlUmVmKCk7XG4gIGNvbnN0IGVsZW1lbnRQcm9wcyA9IFJlYWN0ODgudXNlTWVtbyhcbiAgICAoKSA9PiBtZXJnZVByb3BzMihwcm9wcywgeyBjbGFzc05hbWU6IFwibGstZ3JpZC1sYXlvdXRcIiB9KSxcbiAgICBbcHJvcHNdXG4gICk7XG4gIGNvbnN0IHsgbGF5b3V0IH0gPSB1c2VHcmlkTGF5b3V0KGdyaWRFbCwgdHJhY2tzLmxlbmd0aCk7XG4gIGNvbnN0IHBhZ2luYXRpb24gPSB1c2VQYWdpbmF0aW9uKGxheW91dC5tYXhUaWxlcywgdHJhY2tzKTtcbiAgdXNlU3dpcGUoZ3JpZEVsLCB7XG4gICAgb25MZWZ0U3dpcGU6IHBhZ2luYXRpb24ubmV4dFBhZ2UsXG4gICAgb25SaWdodFN3aXBlOiBwYWdpbmF0aW9uLnByZXZQYWdlXG4gIH0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0ODguY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7IHJlZjogZ3JpZEVsLCBcImRhdGEtbGstcGFnaW5hdGlvblwiOiBwYWdpbmF0aW9uLnRvdGFsUGFnZUNvdW50ID4gMSB9LCBlbGVtZW50UHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4OC5jcmVhdGVFbGVtZW50KFRyYWNrTG9vcCwgeyB0cmFja3M6IHBhZ2luYXRpb24udHJhY2tzIH0sIHByb3BzLmNoaWxkcmVuKSwgdHJhY2tzLmxlbmd0aCA+IGxheW91dC5tYXhUaWxlcyAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4OC5jcmVhdGVFbGVtZW50KFJlYWN0ODguRnJhZ21lbnQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDg4LmNyZWF0ZUVsZW1lbnQoXG4gICAgUGFnaW5hdGlvbkluZGljYXRvcixcbiAgICB7XG4gICAgICB0b3RhbFBhZ2VDb3VudDogcGFnaW5hdGlvbi50b3RhbFBhZ2VDb3VudCxcbiAgICAgIGN1cnJlbnRQYWdlOiBwYWdpbmF0aW9uLmN1cnJlbnRQYWdlXG4gICAgfVxuICApLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4OC5jcmVhdGVFbGVtZW50KFBhZ2luYXRpb25Db250cm9sLCBfX3NwcmVhZFZhbHVlcyh7IHBhZ2VzQ29udGFpbmVyOiBncmlkRWwgfSwgcGFnaW5hdGlvbikpKSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2xheW91dC9DYXJvdXNlbExheW91dC50c3hcbmltcG9ydCB7IGdldFNjcm9sbEJhcldpZHRoIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3Q4OSBmcm9tIFwicmVhY3RcIjtcbnZhciBNSU5fSEVJR0hUID0gMTMwO1xudmFyIE1JTl9XSURUSCA9IDE0MDtcbnZhciBNSU5fVklTSUJMRV9USUxFUyA9IDE7XG52YXIgQVNQRUNUX1JBVElPID0gMTYgLyAxMDtcbnZhciBBU1BFQ1RfUkFUSU9fSU5WRVJUID0gKDEgLSBBU1BFQ1RfUkFUSU8pICogLTE7XG52YXIgQ2Fyb3VzZWxWaWV3ID0gQ2Fyb3VzZWxMYXlvdXQ7XG5mdW5jdGlvbiBDYXJvdXNlbExheW91dChfYSkge1xuICB2YXIgX2IgPSBfYSwgeyB0cmFja3MsIG9yaWVudGF0aW9uIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcInRyYWNrc1wiLCBcIm9yaWVudGF0aW9uXCJdKTtcbiAgY29uc3QgYXNpZGVFbCA9IFJlYWN0ODkudXNlUmVmKG51bGwpO1xuICBjb25zdCBbcHJldlRpbGVzLCBzZXRQcmV2VGlsZXNdID0gUmVhY3Q4OS51c2VTdGF0ZSgwKTtcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB1c2VTaXplKGFzaWRlRWwpO1xuICBjb25zdCBjYXJvdXNlbE9yaWVudGF0aW9uID0gb3JpZW50YXRpb24gPyBvcmllbnRhdGlvbiA6IGhlaWdodCA+PSB3aWR0aCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiO1xuICBjb25zdCB0aWxlU3BhbiA9IGNhcm91c2VsT3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIiA/IE1hdGgubWF4KHdpZHRoICogQVNQRUNUX1JBVElPX0lOVkVSVCwgTUlOX0hFSUdIVCkgOiBNYXRoLm1heChoZWlnaHQgKiBBU1BFQ1RfUkFUSU8sIE1JTl9XSURUSCk7XG4gIGNvbnN0IHNjcm9sbEJhcldpZHRoID0gZ2V0U2Nyb2xsQmFyV2lkdGgoKTtcbiAgY29uc3QgdGlsZXNUaGF0Rml0ID0gY2Fyb3VzZWxPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gTWF0aC5tYXgoKGhlaWdodCAtIHNjcm9sbEJhcldpZHRoKSAvIHRpbGVTcGFuLCBNSU5fVklTSUJMRV9USUxFUykgOiBNYXRoLm1heCgod2lkdGggLSBzY3JvbGxCYXJXaWR0aCkgLyB0aWxlU3BhbiwgTUlOX1ZJU0lCTEVfVElMRVMpO1xuICBsZXQgbWF4VmlzaWJsZVRpbGVzID0gTWF0aC5yb3VuZCh0aWxlc1RoYXRGaXQpO1xuICBpZiAoTWF0aC5hYnModGlsZXNUaGF0Rml0IC0gcHJldlRpbGVzKSA8IDAuNSkge1xuICAgIG1heFZpc2libGVUaWxlcyA9IE1hdGgucm91bmQocHJldlRpbGVzKTtcbiAgfSBlbHNlIGlmIChwcmV2VGlsZXMgIT09IHRpbGVzVGhhdEZpdCkge1xuICAgIHNldFByZXZUaWxlcyh0aWxlc1RoYXRGaXQpO1xuICB9XG4gIGNvbnN0IHNvcnRlZFRpbGVzID0gdXNlVmlzdWFsU3RhYmxlVXBkYXRlKHRyYWNrcywgbWF4VmlzaWJsZVRpbGVzKTtcbiAgUmVhY3Q4OS51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhc2lkZUVsLmN1cnJlbnQpIHtcbiAgICAgIGFzaWRlRWwuY3VycmVudC5kYXRhc2V0LmxrT3JpZW50YXRpb24gPSBjYXJvdXNlbE9yaWVudGF0aW9uO1xuICAgICAgYXNpZGVFbC5jdXJyZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1say1tYXgtdmlzaWJsZS10aWxlc1wiLCBtYXhWaXNpYmxlVGlsZXMudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9LCBbbWF4VmlzaWJsZVRpbGVzLCBjYXJvdXNlbE9yaWVudGF0aW9uXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q4OS5jcmVhdGVFbGVtZW50KFwiYXNpZGVcIiwgX19zcHJlYWRWYWx1ZXMoeyBrZXk6IGNhcm91c2VsT3JpZW50YXRpb24sIGNsYXNzTmFtZTogXCJsay1jYXJvdXNlbFwiLCByZWY6IGFzaWRlRWwgfSwgcHJvcHMpLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q4OS5jcmVhdGVFbGVtZW50KFRyYWNrTG9vcCwgeyB0cmFja3M6IHNvcnRlZFRpbGVzIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL2xheW91dC9MYXlvdXRDb250ZXh0UHJvdmlkZXIudHN4XG5pbXBvcnQgeyBsb2cgYXMgbG9nMTAgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDkwIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gTGF5b3V0Q29udGV4dFByb3ZpZGVyKHtcbiAgdmFsdWUsXG4gIG9uUGluQ2hhbmdlLFxuICBvbldpZGdldENoYW5nZSxcbiAgY2hpbGRyZW5cbn0pIHtcbiAgY29uc3QgbGF5b3V0Q29udGV4dFZhbHVlID0gdXNlRW5zdXJlQ3JlYXRlTGF5b3V0Q29udGV4dCh2YWx1ZSk7XG4gIFJlYWN0OTAudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsb2cxMC5kZWJ1ZyhcIlBpblN0YXRlIFVwZGF0ZWRcIiwgeyBzdGF0ZTogbGF5b3V0Q29udGV4dFZhbHVlLnBpbi5zdGF0ZSB9KTtcbiAgICBpZiAob25QaW5DaGFuZ2UgJiYgbGF5b3V0Q29udGV4dFZhbHVlLnBpbi5zdGF0ZSlcbiAgICAgIG9uUGluQ2hhbmdlKGxheW91dENvbnRleHRWYWx1ZS5waW4uc3RhdGUpO1xuICB9LCBbbGF5b3V0Q29udGV4dFZhbHVlLnBpbi5zdGF0ZSwgb25QaW5DaGFuZ2VdKTtcbiAgUmVhY3Q5MC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvZzEwLmRlYnVnKFwiV2lkZ2V0IFVwZGF0ZWRcIiwgeyB3aWRnZXRTdGF0ZTogbGF5b3V0Q29udGV4dFZhbHVlLndpZGdldC5zdGF0ZSB9KTtcbiAgICBpZiAob25XaWRnZXRDaGFuZ2UgJiYgbGF5b3V0Q29udGV4dFZhbHVlLndpZGdldC5zdGF0ZSkge1xuICAgICAgb25XaWRnZXRDaGFuZ2UobGF5b3V0Q29udGV4dFZhbHVlLndpZGdldC5zdGF0ZSk7XG4gICAgfVxuICB9LCBbb25XaWRnZXRDaGFuZ2UsIGxheW91dENvbnRleHRWYWx1ZS53aWRnZXQuc3RhdGVdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDkwLmNyZWF0ZUVsZW1lbnQoTGF5b3V0Q29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogbGF5b3V0Q29udGV4dFZhbHVlIH0sIGNoaWxkcmVuKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvTGl2ZUtpdFJvb20udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDkxIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gTGl2ZUtpdFJvb20ocHJvcHMpIHtcbiAgY29uc3QgeyByb29tLCBodG1sUHJvcHMgfSA9IHVzZUxpdmVLaXRSb29tKHByb3BzKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDkxLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19zcHJlYWRWYWx1ZXMoe30sIGh0bWxQcm9wcyksIHJvb20gJiYgLyogQF9fUFVSRV9fICovIFJlYWN0OTEuY3JlYXRlRWxlbWVudChSb29tQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogcm9vbSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q5MS5jcmVhdGVFbGVtZW50KExLRmVhdHVyZUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzLmZlYXR1cmVGbGFncyB9LCBwcm9wcy5jaGlsZHJlbikpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvcGFydGljaXBhbnQvQXVkaW9WaXN1YWxpemVyLnRzeFxuaW1wb3J0IHsgVHJhY2sgYXMgVHJhY2s2IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDkyIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gQXVkaW9WaXN1YWxpemVyKF9hKSB7XG4gIHZhciBfYiA9IF9hLCB7IHBhcnRpY2lwYW50LCB0cmFja1JlZiB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXCJwYXJ0aWNpcGFudFwiLCBcInRyYWNrUmVmXCJdKTtcbiAgdmFyIF9hMiwgX2IyO1xuICBjb25zdCBzdmdXaWR0aCA9IDIwMDtcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gOTA7XG4gIGNvbnN0IGJhcldpZHRoID0gNjtcbiAgY29uc3QgYmFyU3BhY2luZyA9IDQ7XG4gIGNvbnN0IHZvbE11bHRpcGxpZXIgPSA1MDtcbiAgY29uc3QgYmFyQ291bnQgPSA3O1xuICBjb25zdCBwID0gKF9hMiA9IHVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0KCkpICE9IG51bGwgPyBfYTIgOiBwYXJ0aWNpcGFudDtcbiAgbGV0IHJlZiA9IChfYjIgPSB1c2VNYXliZVRyYWNrUmVmQ29udGV4dCgpKSAhPSBudWxsID8gX2IyIDogdHJhY2tSZWY7XG4gIGlmICghcmVmKSB7XG4gICAgaWYgKCFwKSB7XG4gICAgICB0aHJvdyBFcnJvcihgUGFydGljaXBhbnQgbWlzc2luZywgcHJvdmlkZSBpdCBkaXJlY3RseSBvciB3aXRoaW4gYSBjb250ZXh0YCk7XG4gICAgfVxuICAgIHJlZiA9IHsgcGFydGljaXBhbnQ6IHAsIHNvdXJjZTogVHJhY2s2LlNvdXJjZS5NaWNyb3Bob25lIH07XG4gIH1cbiAgY29uc3Qgdm9sdW1lcyA9IHVzZU11bHRpYmFuZFRyYWNrVm9sdW1lKHJlZiwgeyBiYW5kczogNywgbG9QYXNzOiAzMDAgfSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Mi5jcmVhdGVFbGVtZW50KFxuICAgIFwic3ZnXCIsXG4gICAgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgdmlld0JveDogYDAgMCAke3N2Z1dpZHRofSAke3N2Z0hlaWdodH1gXG4gICAgfSwgcHJvcHMpLCB7XG4gICAgICBjbGFzc05hbWU6IFwibGstYXVkaW8tdmlzdWFsaXplclwiXG4gICAgfSksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0OTIuY3JlYXRlRWxlbWVudChcInJlY3RcIiwgeyB4OiBcIjBcIiwgeTogXCIwXCIsIHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIiB9KSxcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Mi5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJnXCIsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7KHN2Z1dpZHRoIC0gYmFyQ291bnQgKiAoYmFyV2lkdGggKyBiYXJTcGFjaW5nKSkgLyAyfXB4LCAwKWBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHZvbHVtZXMubWFwKCh2b2wsIGlkeCkgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0OTIuY3JlYXRlRWxlbWVudChcbiAgICAgICAgXCJyZWN0XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6IGlkeCxcbiAgICAgICAgICB4OiBpZHggKiAoYmFyV2lkdGggKyBiYXJTcGFjaW5nKSxcbiAgICAgICAgICB5OiBzdmdIZWlnaHQgLyAyIC0gdm9sICogdm9sTXVsdGlwbGllciAvIDIsXG4gICAgICAgICAgd2lkdGg6IGJhcldpZHRoLFxuICAgICAgICAgIGhlaWdodDogdm9sICogdm9sTXVsdGlwbGllclxuICAgICAgICB9XG4gICAgICApKVxuICAgIClcbiAgKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvUGFydGljaXBhbnRMb29wLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q5MyBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIFBhcnRpY2lwYW50TG9vcChfYSkge1xuICB2YXIgX2IgPSBfYSwgeyBwYXJ0aWNpcGFudHMgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1wicGFydGljaXBhbnRzXCJdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDkzLmNyZWF0ZUVsZW1lbnQoUmVhY3Q5My5GcmFnbWVudCwgbnVsbCwgcGFydGljaXBhbnRzLm1hcCgocGFydGljaXBhbnQpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDkzLmNyZWF0ZUVsZW1lbnQoUGFydGljaXBhbnRDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBwYXJ0aWNpcGFudCwga2V5OiBwYXJ0aWNpcGFudC5pZGVudGl0eSB9LCBjbG9uZVNpbmdsZUNoaWxkKHByb3BzLmNoaWxkcmVuKSkpKTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvUm9vbUF1ZGlvUmVuZGVyZXIudHN4XG5pbXBvcnQgeyBnZXRUcmFja1JlZmVyZW5jZUlkIGFzIGdldFRyYWNrUmVmZXJlbmNlSWQ0LCBpc0xvY2FsIGFzIGlzTG9jYWwyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuaW1wb3J0IHsgVHJhY2sgYXMgVHJhY2s3IH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDk0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gUm9vbUF1ZGlvUmVuZGVyZXIoeyB2b2x1bWUsIG11dGVkIH0pIHtcbiAgY29uc3QgdHJhY2tzID0gdXNlVHJhY2tzKFxuICAgIFtUcmFjazcuU291cmNlLk1pY3JvcGhvbmUsIFRyYWNrNy5Tb3VyY2UuU2NyZWVuU2hhcmVBdWRpbywgVHJhY2s3LlNvdXJjZS5Vbmtub3duXSxcbiAgICB7XG4gICAgICB1cGRhdGVPbmx5T246IFtdLFxuICAgICAgb25seVN1YnNjcmliZWQ6IGZhbHNlXG4gICAgfVxuICApLmZpbHRlcigocmVmKSA9PiAhaXNMb2NhbDIocmVmLnBhcnRpY2lwYW50KSAmJiByZWYucHVibGljYXRpb24ua2luZCA9PT0gVHJhY2s3LktpbmQuQXVkaW8pO1xuICBSZWFjdDk0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZm9yIChjb25zdCB0cmFjayBvZiB0cmFja3MpIHtcbiAgICAgIHRyYWNrLnB1YmxpY2F0aW9uLnNldFN1YnNjcmliZWQodHJ1ZSk7XG4gICAgfVxuICB9LCBbdHJhY2tzXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5NC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogXCJub25lXCIgfSB9LCB0cmFja3MubWFwKCh0cmFja1JlZikgPT4gLyogQF9fUFVSRV9fICovIFJlYWN0OTQuY3JlYXRlRWxlbWVudChcbiAgICBBdWRpb1RyYWNrLFxuICAgIHtcbiAgICAgIGtleTogZ2V0VHJhY2tSZWZlcmVuY2VJZDQodHJhY2tSZWYpLFxuICAgICAgdHJhY2tSZWYsXG4gICAgICB2b2x1bWUsXG4gICAgICBtdXRlZFxuICAgIH1cbiAgKSkpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9Sb29tTmFtZS50c3hcbmltcG9ydCAqIGFzIFJlYWN0OTUgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBSb29tTmFtZShfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIGNoaWxkcmVuUG9zaXRpb24gPSBcImJlZm9yZVwiLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfYiwgaHRtbEF0dHJpYnV0ZXMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcImNoaWxkcmVuUG9zaXRpb25cIixcbiAgICBcImNoaWxkcmVuXCJcbiAgXSk7XG4gIGNvbnN0IHsgbmFtZSB9ID0gdXNlUm9vbUluZm8oKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk1LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBodG1sQXR0cmlidXRlcyksIGNoaWxkcmVuUG9zaXRpb24gPT09IFwiYmVmb3JlXCIgJiYgY2hpbGRyZW4sIG5hbWUsIGNoaWxkcmVuUG9zaXRpb24gPT09IFwiYWZ0ZXJcIiAmJiBjaGlsZHJlbik7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL1RvYXN0LnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q5NiBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIFRvYXN0KHByb3BzKSB7XG4gIGNvbnN0IGh0bWxQcm9wcyA9IFJlYWN0OTYudXNlTWVtbygoKSA9PiBtZXJnZVByb3BzMihwcm9wcywgeyBjbGFzc05hbWU6IFwibGstdG9hc3RcIiB9KSwgW3Byb3BzXSk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Ni5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fc3ByZWFkVmFsdWVzKHt9LCBodG1sUHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL3BhcnRpY2lwYW50L1BhcnRpY2lwYW50QXVkaW9UaWxlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3Q5NyBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrOCB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuZnVuY3Rpb24gUGFydGljaXBhbnRBdWRpb1RpbGUoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBwYXJ0aWNpcGFudCxcbiAgICBjaGlsZHJlbixcbiAgICBzb3VyY2UsXG4gICAgcHVibGljYXRpb24sXG4gICAgZGlzYWJsZVNwZWFraW5nSW5kaWNhdG9yLFxuICAgIG9uUGFydGljaXBhbnRDbGlja1xuICB9ID0gX2IsIGh0bWxQcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwicGFydGljaXBhbnRcIixcbiAgICBcImNoaWxkcmVuXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInB1YmxpY2F0aW9uXCIsXG4gICAgXCJkaXNhYmxlU3BlYWtpbmdJbmRpY2F0b3JcIixcbiAgICBcIm9uUGFydGljaXBhbnRDbGlja1wiXG4gIF0pO1xuICBjb25zdCBwID0gdXNlRW5zdXJlUGFydGljaXBhbnQocGFydGljaXBhbnQpO1xuICBjb25zdCB7IGVsZW1lbnRQcm9wcyB9ID0gdXNlUGFydGljaXBhbnRUaWxlKHtcbiAgICBwYXJ0aWNpcGFudDogcCxcbiAgICBodG1sUHJvcHMsXG4gICAgZGlzYWJsZVNwZWFraW5nSW5kaWNhdG9yLFxuICAgIHNvdXJjZTogVHJhY2s4LlNvdXJjZS5NaWNyb3Bob25lLFxuICAgIHB1YmxpY2F0aW9uLFxuICAgIG9uUGFydGljaXBhbnRDbGlja1xuICB9KTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk3LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19zcHJlYWRWYWx1ZXMoeyBzdHlsZTogeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH0gfSwgZWxlbWVudFByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0OTcuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudENvbnRleHRJZk5lZWRlZCwgeyBwYXJ0aWNpcGFudDogcCB9LCBjaGlsZHJlbiAhPSBudWxsID8gY2hpbGRyZW4gOiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Ny5jcmVhdGVFbGVtZW50KFJlYWN0OTcuRnJhZ21lbnQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk3LmNyZWF0ZUVsZW1lbnQoQXVkaW9UcmFjaywgeyBzb3VyY2U6IHNvdXJjZSAhPSBudWxsID8gc291cmNlIDogVHJhY2s4LlNvdXJjZS5NaWNyb3Bob25lIH0pLCAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Ny5jcmVhdGVFbGVtZW50KEF1ZGlvVmlzdWFsaXplciwgbnVsbCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk3LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstcGFydGljaXBhbnQtbWV0YWRhdGFcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Ny5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW1ldGFkYXRhLWl0ZW1cIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3Q5Ny5jcmVhdGVFbGVtZW50KFRyYWNrTXV0ZWRJbmRpY2F0b3IsIHsgc291cmNlOiBUcmFjazguU291cmNlLk1pY3JvcGhvbmUgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk3LmNyZWF0ZUVsZW1lbnQoUGFydGljaXBhbnROYW1lLCBudWxsKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk3LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IsIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW1ldGFkYXRhLWl0ZW1cIiB9KSkpKSk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL0Nvbm5lY3Rpb25TdGF0ZVRvYXN0LnRzeFxuaW1wb3J0IHsgQ29ubmVjdGlvblN0YXRlIGFzIENvbm5lY3Rpb25TdGF0ZTQgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCAqIGFzIFJlYWN0OTggZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBDb25uZWN0aW9uU3RhdGVUb2FzdChwcm9wcykge1xuICBjb25zdCBbbm90aWZpY2F0aW9uLCBzZXROb3RpZmljYXRpb25dID0gUmVhY3Q5OC51c2VTdGF0ZSh2b2lkIDApO1xuICBjb25zdCBzdGF0ZSA9IHVzZUNvbm5lY3Rpb25TdGF0ZShwcm9wcy5yb29tKTtcbiAgUmVhY3Q5OC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgQ29ubmVjdGlvblN0YXRlNC5SZWNvbm5lY3Rpbmc6XG4gICAgICAgIHNldE5vdGlmaWNhdGlvbihcbiAgICAgICAgICAvKiBAX19QVVJFX18gKi8gUmVhY3Q5OC5jcmVhdGVFbGVtZW50KFJlYWN0OTguRnJhZ21lbnQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk4LmNyZWF0ZUVsZW1lbnQoU3Bpbm5lckljb25fZGVmYXVsdCwgeyBjbGFzc05hbWU6IFwibGstc3Bpbm5lclwiIH0pLCBcIiBSZWNvbm5lY3RpbmdcIilcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZTQuQ29ubmVjdGluZzpcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9uKFxuICAgICAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk4LmNyZWF0ZUVsZW1lbnQoUmVhY3Q5OC5GcmFnbWVudCwgbnVsbCwgLyogQF9fUFVSRV9fICovIFJlYWN0OTguY3JlYXRlRWxlbWVudChTcGlubmVySWNvbl9kZWZhdWx0LCB7IGNsYXNzTmFtZTogXCJsay1zcGlubmVyXCIgfSksIFwiIENvbm5lY3RpbmdcIilcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbm5lY3Rpb25TdGF0ZTQuRGlzY29ubmVjdGVkOlxuICAgICAgICBzZXROb3RpZmljYXRpb24oLyogQF9fUFVSRV9fICovIFJlYWN0OTguY3JlYXRlRWxlbWVudChSZWFjdDk4LkZyYWdtZW50LCBudWxsLCBcIkRpc2Nvbm5lY3RlZFwiKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2V0Tm90aWZpY2F0aW9uKHZvaWQgMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSwgW3N0YXRlXSk7XG4gIHJldHVybiBub3RpZmljYXRpb24gPyAvKiBAX19QVVJFX18gKi8gUmVhY3Q5OC5jcmVhdGVFbGVtZW50KFRvYXN0LCB7IGNsYXNzTmFtZTogXCJsay10b2FzdC1jb25uZWN0aW9uLXN0YXRlXCIgfSwgbm90aWZpY2F0aW9uKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk4LmNyZWF0ZUVsZW1lbnQoUmVhY3Q5OC5GcmFnbWVudCwgbnVsbCk7XG59XG5cbi8vIHNyYy9jb21wb25lbnRzL0NoYXRFbnRyeS50c3hcbmltcG9ydCB7IHRva2VuaXplLCBjcmVhdGVEZWZhdWx0R3JhbW1hciB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmltcG9ydCAqIGFzIFJlYWN0OTkgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBDaGF0RW50cnkoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICBlbnRyeSxcbiAgICBoaWRlTmFtZSA9IGZhbHNlLFxuICAgIGhpZGVUaW1lc3RhbXAgPSBmYWxzZSxcbiAgICBtZXNzYWdlRm9ybWF0dGVyXG4gIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcImVudHJ5XCIsXG4gICAgXCJoaWRlTmFtZVwiLFxuICAgIFwiaGlkZVRpbWVzdGFtcFwiLFxuICAgIFwibWVzc2FnZUZvcm1hdHRlclwiXG4gIF0pO1xuICB2YXIgX2EyLCBfYjIsIF9jLCBfZDtcbiAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IFJlYWN0OTkudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIG1lc3NhZ2VGb3JtYXR0ZXIgPyBtZXNzYWdlRm9ybWF0dGVyKGVudHJ5Lm1lc3NhZ2UpIDogZW50cnkubWVzc2FnZTtcbiAgfSwgW2VudHJ5Lm1lc3NhZ2UsIG1lc3NhZ2VGb3JtYXR0ZXJdKTtcbiAgY29uc3QgaGFzQmVlbkVkaXRlZCA9ICEhZW50cnkuZWRpdFRpbWVzdGFtcDtcbiAgY29uc3QgdGltZSA9IG5ldyBEYXRlKGVudHJ5LnRpbWVzdGFtcCk7XG4gIGNvbnN0IGxvY2FsZSA9IG5hdmlnYXRvciA/IG5hdmlnYXRvci5sYW5ndWFnZSA6IFwiZW4tVVNcIjtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk5LmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJsaVwiLFxuICAgIF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGNsYXNzTmFtZTogXCJsay1jaGF0LWVudHJ5XCIsXG4gICAgICB0aXRsZTogdGltZS50b0xvY2FsZVRpbWVTdHJpbmcobG9jYWxlLCB7IHRpbWVTdHlsZTogXCJmdWxsXCIgfSksXG4gICAgICBcImRhdGEtbGstbWVzc2FnZS1vcmlnaW5cIjogKChfYTIgPSBlbnRyeS5mcm9tKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLmlzTG9jYWwpID8gXCJsb2NhbFwiIDogXCJyZW1vdGVcIlxuICAgIH0sIHByb3BzKSxcbiAgICAoIWhpZGVUaW1lc3RhbXAgfHwgIWhpZGVOYW1lIHx8IGhhc0JlZW5FZGl0ZWQpICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDk5LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiBcImxrLW1ldGEtZGF0YVwiIH0sICFoaWRlTmFtZSAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5OS5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIsIHsgY2xhc3NOYW1lOiBcImxrLXBhcnRpY2lwYW50LW5hbWVcIiB9LCAoX2QgPSAoX2IyID0gZW50cnkuZnJvbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi5uYW1lKSAhPSBudWxsID8gX2QgOiAoX2MgPSBlbnRyeS5mcm9tKSA9PSBudWxsID8gdm9pZCAwIDogX2MuaWRlbnRpdHkpLCAoIWhpZGVUaW1lc3RhbXAgfHwgaGFzQmVlbkVkaXRlZCkgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0OTkuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibGstdGltZXN0YW1wXCIgfSwgaGFzQmVlbkVkaXRlZCAmJiBcImVkaXRlZCBcIiwgdGltZS50b0xvY2FsZVRpbWVTdHJpbmcobG9jYWxlLCB7IHRpbWVTdHlsZTogXCJzaG9ydFwiIH0pKSksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0OTkuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwibGstbWVzc2FnZS1ib2R5XCIgfSwgZm9ybWF0dGVkTWVzc2FnZSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdENoYXRNZXNzYWdlTGlua3MobWVzc2FnZSkge1xuICByZXR1cm4gdG9rZW5pemUobWVzc2FnZSwgY3JlYXRlRGVmYXVsdEdyYW1tYXIoKSkubWFwKCh0b2ssIGkpID0+IHtcbiAgICBpZiAodHlwZW9mIHRvayA9PT0gYHN0cmluZ2ApIHtcbiAgICAgIHJldHVybiB0b2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0b2suY29udGVudC50b1N0cmluZygpO1xuICAgICAgY29uc3QgaHJlZiA9IHRvay50eXBlID09PSBgdXJsYCA/IC9eaHR0cChzPyk6XFwvXFwvLy50ZXN0KGNvbnRlbnQpID8gY29udGVudCA6IGBodHRwczovLyR7Y29udGVudH1gIDogYG1haWx0bzoke2NvbnRlbnR9YDtcbiAgICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3Q5OS5jcmVhdGVFbGVtZW50KFwiYVwiLCB7IGNsYXNzTmFtZTogXCJsay1jaGF0LWxpbmtcIiwga2V5OiBpLCBocmVmLCB0YXJnZXQ6IFwiX2JsYW5rXCIsIHJlbDogXCJub3JlZmVycmVyXCIgfSwgY29udGVudCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc3JjL3ByZWZhYnMvQ2hhdC50c3hcbmltcG9ydCAqIGFzIFJlYWN0MTAwIGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gQ2hhdChfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIG1lc3NhZ2VGb3JtYXR0ZXIsXG4gICAgbWVzc2FnZURlY29kZXIsXG4gICAgbWVzc2FnZUVuY29kZXIsXG4gICAgY2hhbm5lbFRvcGljXG4gIH0gPSBfYiwgcHJvcHMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcIm1lc3NhZ2VGb3JtYXR0ZXJcIixcbiAgICBcIm1lc3NhZ2VEZWNvZGVyXCIsXG4gICAgXCJtZXNzYWdlRW5jb2RlclwiLFxuICAgIFwiY2hhbm5lbFRvcGljXCJcbiAgXSk7XG4gIGNvbnN0IGlucHV0UmVmID0gUmVhY3QxMDAudXNlUmVmKG51bGwpO1xuICBjb25zdCB1bFJlZiA9IFJlYWN0MTAwLnVzZVJlZihudWxsKTtcbiAgY29uc3QgY2hhdE9wdGlvbnMgPSBSZWFjdDEwMC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4geyBtZXNzYWdlRGVjb2RlciwgbWVzc2FnZUVuY29kZXIsIGNoYW5uZWxUb3BpYyB9O1xuICB9LCBbbWVzc2FnZURlY29kZXIsIG1lc3NhZ2VFbmNvZGVyLCBjaGFubmVsVG9waWNdKTtcbiAgY29uc3QgeyBzZW5kLCBjaGF0TWVzc2FnZXMsIGlzU2VuZGluZyB9ID0gdXNlQ2hhdChjaGF0T3B0aW9ucyk7XG4gIGNvbnN0IGxheW91dENvbnRleHQgPSB1c2VNYXliZUxheW91dENvbnRleHQoKTtcbiAgY29uc3QgbGFzdFJlYWRNc2dBdCA9IFJlYWN0MTAwLnVzZVJlZigwKTtcbiAgZnVuY3Rpb24gaGFuZGxlU3VibWl0KGV2ZW50KSB7XG4gICAgcmV0dXJuIF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBpbnB1dFJlZi5jdXJyZW50LnZhbHVlLnRyaW0oKSAhPT0gXCJcIikge1xuICAgICAgICBpZiAoc2VuZCkge1xuICAgICAgICAgIHlpZWxkIHNlbmQoaW5wdXRSZWYuY3VycmVudC52YWx1ZSk7XG4gICAgICAgICAgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgUmVhY3QxMDAudXNlRWZmZWN0KCgpID0+IHtcbiAgICB2YXIgX2EyO1xuICAgIGlmICh1bFJlZikge1xuICAgICAgKF9hMiA9IHVsUmVmLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuc2Nyb2xsVG8oeyB0b3A6IHVsUmVmLmN1cnJlbnQuc2Nyb2xsSGVpZ2h0IH0pO1xuICAgIH1cbiAgfSwgW3VsUmVmLCBjaGF0TWVzc2FnZXNdKTtcbiAgUmVhY3QxMDAudXNlRWZmZWN0KCgpID0+IHtcbiAgICB2YXIgX2EyLCBfYjIsIF9jLCBfZCwgX2U7XG4gICAgaWYgKCFsYXlvdXRDb250ZXh0IHx8IGNoYXRNZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgoX2EyID0gbGF5b3V0Q29udGV4dC53aWRnZXQuc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuc2hvd0NoYXQpICYmIGNoYXRNZXNzYWdlcy5sZW5ndGggPiAwICYmIGxhc3RSZWFkTXNnQXQuY3VycmVudCAhPT0gKChfYjIgPSBjaGF0TWVzc2FnZXNbY2hhdE1lc3NhZ2VzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLnRpbWVzdGFtcCkpIHtcbiAgICAgIGxhc3RSZWFkTXNnQXQuY3VycmVudCA9IChfYyA9IGNoYXRNZXNzYWdlc1tjaGF0TWVzc2FnZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfYy50aW1lc3RhbXA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHVucmVhZE1lc3NhZ2VDb3VudCA9IGNoYXRNZXNzYWdlcy5maWx0ZXIoXG4gICAgICAobXNnKSA9PiAhbGFzdFJlYWRNc2dBdC5jdXJyZW50IHx8IG1zZy50aW1lc3RhbXAgPiBsYXN0UmVhZE1zZ0F0LmN1cnJlbnRcbiAgICApLmxlbmd0aDtcbiAgICBjb25zdCB7IHdpZGdldCB9ID0gbGF5b3V0Q29udGV4dDtcbiAgICBpZiAodW5yZWFkTWVzc2FnZUNvdW50ID4gMCAmJiAoKF9kID0gd2lkZ2V0LnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2QudW5yZWFkTWVzc2FnZXMpICE9PSB1bnJlYWRNZXNzYWdlQ291bnQpIHtcbiAgICAgIChfZSA9IHdpZGdldC5kaXNwYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLmNhbGwod2lkZ2V0LCB7IG1zZzogXCJ1bnJlYWRfbXNnXCIsIGNvdW50OiB1bnJlYWRNZXNzYWdlQ291bnQgfSk7XG4gICAgfVxuICB9LCBbY2hhdE1lc3NhZ2VzLCBsYXlvdXRDb250ZXh0ID09IG51bGwgPyB2b2lkIDAgOiBsYXlvdXRDb250ZXh0LndpZGdldF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0MTAwLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgcHJvcHMpLCB7IGNsYXNzTmFtZTogXCJsay1jaGF0XCIgfSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWNoYXQtaGVhZGVyXCIgfSwgXCJNZXNzYWdlc1wiLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDAuY3JlYXRlRWxlbWVudChDaGF0VG9nZ2xlLCB7IGNsYXNzTmFtZTogXCJsay1jbG9zZS1idXR0b25cIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDAuY3JlYXRlRWxlbWVudChDaGF0Q2xvc2VJY29uX2RlZmF1bHQsIG51bGwpKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBjbGFzc05hbWU6IFwibGstbGlzdCBsay1jaGF0LW1lc3NhZ2VzXCIsIHJlZjogdWxSZWYgfSwgcHJvcHMuY2hpbGRyZW4gPyBjaGF0TWVzc2FnZXMubWFwKFxuICAgIChtc2csIGlkeCkgPT4ge1xuICAgICAgdmFyIF9hMjtcbiAgICAgIHJldHVybiBjbG9uZVNpbmdsZUNoaWxkKHByb3BzLmNoaWxkcmVuLCB7XG4gICAgICAgIGVudHJ5OiBtc2csXG4gICAgICAgIGtleTogKF9hMiA9IG1zZy5pZCkgIT0gbnVsbCA/IF9hMiA6IGlkeCxcbiAgICAgICAgbWVzc2FnZUZvcm1hdHRlclxuICAgICAgfSk7XG4gICAgfVxuICApIDogY2hhdE1lc3NhZ2VzLm1hcCgobXNnLCBpZHgsIGFsbE1zZykgPT4ge1xuICAgIHZhciBfYTI7XG4gICAgY29uc3QgaGlkZU5hbWUgPSBpZHggPj0gMSAmJiBhbGxNc2dbaWR4IC0gMV0uZnJvbSA9PT0gbXNnLmZyb207XG4gICAgY29uc3QgaGlkZVRpbWVzdGFtcCA9IGlkeCA+PSAxICYmIG1zZy50aW1lc3RhbXAgLSBhbGxNc2dbaWR4IC0gMV0udGltZXN0YW1wIDwgNmU0O1xuICAgIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDAuY3JlYXRlRWxlbWVudChcbiAgICAgIENoYXRFbnRyeSxcbiAgICAgIHtcbiAgICAgICAga2V5OiAoX2EyID0gbXNnLmlkKSAhPSBudWxsID8gX2EyIDogaWR4LFxuICAgICAgICBoaWRlTmFtZSxcbiAgICAgICAgaGlkZVRpbWVzdGFtcDogaGlkZU5hbWUgPT09IGZhbHNlID8gZmFsc2UgOiBoaWRlVGltZXN0YW1wLFxuICAgICAgICBlbnRyeTogbXNnLFxuICAgICAgICBtZXNzYWdlRm9ybWF0dGVyXG4gICAgICB9XG4gICAgKTtcbiAgfSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDAuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgeyBjbGFzc05hbWU6IFwibGstY2hhdC1mb3JtXCIsIG9uU3VibWl0OiBoYW5kbGVTdWJtaXQgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAwLmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJpbnB1dFwiLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJsay1mb3JtLWNvbnRyb2wgbGstY2hhdC1mb3JtLWlucHV0XCIsXG4gICAgICBkaXNhYmxlZDogaXNTZW5kaW5nLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgcGxhY2Vob2xkZXI6IFwiRW50ZXIgYSBtZXNzYWdlLi4uXCJcbiAgICB9XG4gICksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHsgdHlwZTogXCJzdWJtaXRcIiwgY2xhc3NOYW1lOiBcImxrLWJ1dHRvbiBsay1jaGF0LWZvcm0tYnV0dG9uXCIsIGRpc2FibGVkOiBpc1NlbmRpbmcgfSwgXCJTZW5kXCIpKSk7XG59XG5cbi8vIHNyYy9wcmVmYWJzL1ByZUpvaW4udHN4XG5pbXBvcnQge1xuICBjcmVhdGVMb2NhbEF1ZGlvVHJhY2ssXG4gIGNyZWF0ZUxvY2FsVHJhY2tzLFxuICBjcmVhdGVMb2NhbFZpZGVvVHJhY2ssXG4gIGZhY2luZ01vZGVGcm9tTG9jYWxUcmFjayBhcyBmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2syLFxuICBUcmFjayBhcyBUcmFjazksXG4gIFZpZGVvUHJlc2V0c1xufSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmltcG9ydCAqIGFzIFJlYWN0MTAzIGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvcHJlZmFicy9NZWRpYURldmljZU1lbnUudHN4XG5pbXBvcnQgeyBjb21wdXRlTWVudVBvc2l0aW9uLCB3YXNDbGlja091dHNpZGUgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgKiBhcyBSZWFjdDEwMSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGxvZyBhcyBsb2cxMSB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcbmZ1bmN0aW9uIE1lZGlhRGV2aWNlTWVudShfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIGtpbmQsXG4gICAgaW5pdGlhbFNlbGVjdGlvbixcbiAgICBvbkFjdGl2ZURldmljZUNoYW5nZSxcbiAgICB0cmFja3MsXG4gICAgcmVxdWVzdFBlcm1pc3Npb25zID0gZmFsc2VcbiAgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwia2luZFwiLFxuICAgIFwiaW5pdGlhbFNlbGVjdGlvblwiLFxuICAgIFwib25BY3RpdmVEZXZpY2VDaGFuZ2VcIixcbiAgICBcInRyYWNrc1wiLFxuICAgIFwicmVxdWVzdFBlcm1pc3Npb25zXCJcbiAgXSk7XG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSBSZWFjdDEwMS51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkZXZpY2VzLCBzZXREZXZpY2VzXSA9IFJlYWN0MTAxLnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3VwZGF0ZVJlcXVpcmVkLCBzZXRVcGRhdGVSZXF1aXJlZF0gPSBSZWFjdDEwMS51c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgaGFuZGxlQWN0aXZlRGV2aWNlQ2hhbmdlID0gKGtpbmQyLCBkZXZpY2VJZCkgPT4ge1xuICAgIGxvZzExLmRlYnVnKFwiaGFuZGxlIGRldmljZSBjaGFuZ2VcIik7XG4gICAgc2V0SXNPcGVuKGZhbHNlKTtcbiAgICBvbkFjdGl2ZURldmljZUNoYW5nZSA9PSBudWxsID8gdm9pZCAwIDogb25BY3RpdmVEZXZpY2VDaGFuZ2Uoa2luZDIsIGRldmljZUlkKTtcbiAgfTtcbiAgY29uc3QgYnV0dG9uID0gUmVhY3QxMDEudXNlUmVmKG51bGwpO1xuICBjb25zdCB0b29sdGlwID0gUmVhY3QxMDEudXNlUmVmKG51bGwpO1xuICBSZWFjdDEwMS51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChidXR0b24uY3VycmVudCAmJiB0b29sdGlwLmN1cnJlbnQgJiYgKGRldmljZXMgfHwgdXBkYXRlUmVxdWlyZWQpKSB7XG4gICAgICBjb21wdXRlTWVudVBvc2l0aW9uKGJ1dHRvbi5jdXJyZW50LCB0b29sdGlwLmN1cnJlbnQpLnRoZW4oKHsgeCwgeSB9KSA9PiB7XG4gICAgICAgIGlmICh0b29sdGlwLmN1cnJlbnQpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRvb2x0aXAuY3VycmVudC5zdHlsZSwgeyBsZWZ0OiBgJHt4fXB4YCwgdG9wOiBgJHt5fXB4YCB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHNldFVwZGF0ZVJlcXVpcmVkKGZhbHNlKTtcbiAgfSwgW2J1dHRvbiwgdG9vbHRpcCwgZGV2aWNlcywgdXBkYXRlUmVxdWlyZWRdKTtcbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gUmVhY3QxMDEudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIXRvb2x0aXAuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBidXR0b24uY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNPcGVuICYmIHdhc0NsaWNrT3V0c2lkZSh0b29sdGlwLmN1cnJlbnQsIGV2ZW50KSkge1xuICAgICAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW2lzT3BlbiwgdG9vbHRpcCwgYnV0dG9uXVxuICApO1xuICBSZWFjdDEwMS51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGlja091dHNpZGUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHNldFVwZGF0ZVJlcXVpcmVkKHRydWUpKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiBzZXRVcGRhdGVSZXF1aXJlZCh0cnVlKSk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsaWNrT3V0c2lkZSwgc2V0VXBkYXRlUmVxdWlyZWRdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMS5jcmVhdGVFbGVtZW50KFJlYWN0MTAxLkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDEuY3JlYXRlRWxlbWVudChcbiAgICBcImJ1dHRvblwiLFxuICAgIF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe1xuICAgICAgY2xhc3NOYW1lOiBcImxrLWJ1dHRvbiBsay1idXR0b24tbWVudVwiLFxuICAgICAgXCJhcmlhLXByZXNzZWRcIjogaXNPcGVuXG4gICAgfSwgcHJvcHMpLCB7XG4gICAgICBvbkNsaWNrOiAoKSA9PiBzZXRJc09wZW4oIWlzT3BlbiksXG4gICAgICByZWY6IGJ1dHRvblxuICAgIH0pLFxuICAgIHByb3BzLmNoaWxkcmVuXG4gICksICFwcm9wcy5kaXNhYmxlZCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDEuY3JlYXRlRWxlbWVudChcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJsay1kZXZpY2UtbWVudVwiLFxuICAgICAgcmVmOiB0b29sdGlwLFxuICAgICAgc3R5bGU6IHsgdmlzaWJpbGl0eTogaXNPcGVuID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiIH1cbiAgICB9LFxuICAgIGtpbmQgPyAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDEuY3JlYXRlRWxlbWVudChcbiAgICAgIE1lZGlhRGV2aWNlU2VsZWN0LFxuICAgICAge1xuICAgICAgICBpbml0aWFsU2VsZWN0aW9uLFxuICAgICAgICBvbkFjdGl2ZURldmljZUNoYW5nZTogKGRldmljZUlkKSA9PiBoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2Uoa2luZCwgZGV2aWNlSWQpLFxuICAgICAgICBvbkRldmljZUxpc3RDaGFuZ2U6IHNldERldmljZXMsXG4gICAgICAgIGtpbmQsXG4gICAgICAgIHRyYWNrOiB0cmFja3MgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrc1traW5kXSxcbiAgICAgICAgcmVxdWVzdFBlcm1pc3Npb25zXG4gICAgICB9XG4gICAgKSA6IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMS5jcmVhdGVFbGVtZW50KFJlYWN0MTAxLkZyYWdtZW50LCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1kZXZpY2UtbWVudS1oZWFkaW5nXCIgfSwgXCJBdWRpbyBpbnB1dHNcIiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMS5jcmVhdGVFbGVtZW50KFxuICAgICAgTWVkaWFEZXZpY2VTZWxlY3QsXG4gICAgICB7XG4gICAgICAgIGtpbmQ6IFwiYXVkaW9pbnB1dFwiLFxuICAgICAgICBvbkFjdGl2ZURldmljZUNoYW5nZTogKGRldmljZUlkKSA9PiBoYW5kbGVBY3RpdmVEZXZpY2VDaGFuZ2UoXCJhdWRpb2lucHV0XCIsIGRldmljZUlkKSxcbiAgICAgICAgb25EZXZpY2VMaXN0Q2hhbmdlOiBzZXREZXZpY2VzLFxuICAgICAgICB0cmFjazogdHJhY2tzID09IG51bGwgPyB2b2lkIDAgOiB0cmFja3MuYXVkaW9pbnB1dCxcbiAgICAgICAgcmVxdWVzdFBlcm1pc3Npb25zXG4gICAgICB9XG4gICAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAxLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstZGV2aWNlLW1lbnUtaGVhZGluZ1wiIH0sIFwiVmlkZW8gaW5wdXRzXCIpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDEuY3JlYXRlRWxlbWVudChcbiAgICAgIE1lZGlhRGV2aWNlU2VsZWN0LFxuICAgICAge1xuICAgICAgICBraW5kOiBcInZpZGVvaW5wdXRcIixcbiAgICAgICAgb25BY3RpdmVEZXZpY2VDaGFuZ2U6IChkZXZpY2VJZCkgPT4gaGFuZGxlQWN0aXZlRGV2aWNlQ2hhbmdlKFwidmlkZW9pbnB1dFwiLCBkZXZpY2VJZCksXG4gICAgICAgIG9uRGV2aWNlTGlzdENoYW5nZTogc2V0RGV2aWNlcyxcbiAgICAgICAgdHJhY2s6IHRyYWNrcyA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tzLnZpZGVvaW5wdXQsXG4gICAgICAgIHJlcXVlc3RQZXJtaXNzaW9uc1xuICAgICAgfVxuICAgICkpXG4gICkpO1xufVxuXG4vLyBzcmMvcHJlZmFicy9QcmVKb2luLnRzeFxuaW1wb3J0IHsgbG9nIGFzIGxvZzEyIH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuXG4vLyBzcmMvaG9va3MvdXNlV2FybkFib3V0TWlzc2luZ1N0eWxlcy50c1xuaW1wb3J0ICogYXMgUmVhY3QxMDIgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCkge1xuICBSZWFjdDEwMi51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdhcm5BYm91dE1pc3NpbmdTdHlsZXMoKTtcbiAgfSwgW10pO1xufVxuXG4vLyBzcmMvcHJlZmFicy9QcmVKb2luLnRzeFxudmFyIERFRkFVTFRfVVNFUl9DSE9JQ0VTID0ge1xuICB1c2VybmFtZTogXCJcIixcbiAgdmlkZW9FbmFibGVkOiB0cnVlLFxuICBhdWRpb0VuYWJsZWQ6IHRydWUsXG4gIHZpZGVvRGV2aWNlSWQ6IFwiZGVmYXVsdFwiLFxuICBhdWRpb0RldmljZUlkOiBcImRlZmF1bHRcIixcbiAgZTJlZTogZmFsc2UsXG4gIHNoYXJlZFBhc3NwaHJhc2U6IFwiXCJcbn07XG5mdW5jdGlvbiB1c2VQcmV2aWV3VHJhY2tzKG9wdGlvbnMsIG9uRXJyb3IpIHtcbiAgY29uc3QgW3RyYWNrcywgc2V0VHJhY2tzXSA9IFJlYWN0MTAzLnVzZVN0YXRlKCk7XG4gIFJlYWN0MTAzLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRyYWNrUHJvbWlzZSA9IHZvaWQgMDtcbiAgICBsZXQgbmVlZHNDbGVhbnVwID0gZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMuYXVkaW8gfHwgb3B0aW9ucy52aWRlbykge1xuICAgICAgdHJhY2tQcm9taXNlID0gY3JlYXRlTG9jYWxUcmFja3Mob3B0aW9ucyk7XG4gICAgICB0cmFja1Byb21pc2UudGhlbigodHJhY2tzMikgPT4ge1xuICAgICAgICBpZiAobmVlZHNDbGVhbnVwKSB7XG4gICAgICAgICAgdHJhY2tzMi5mb3JFYWNoKCh0cikgPT4gdHIuc3RvcCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRUcmFja3ModHJhY2tzMik7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKG9uRXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbmVlZHNDbGVhbnVwID0gdHJ1ZTtcbiAgICAgIHRyYWNrUHJvbWlzZSA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tQcm9taXNlLnRoZW4oXG4gICAgICAgICh0cmFja3MyKSA9PiB0cmFja3MyLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9O1xuICB9LCBbSlNPTi5zdHJpbmdpZnkob3B0aW9ucyldKTtcbiAgcmV0dXJuIHRyYWNrcztcbn1cbmZ1bmN0aW9uIHVzZVByZXZpZXdEZXZpY2UoZW5hYmxlZCwgZGV2aWNlSWQsIGtpbmQpIHtcbiAgY29uc3QgW2RldmljZUVycm9yLCBzZXREZXZpY2VFcnJvcl0gPSBSZWFjdDEwMy51c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2lzQ3JlYXRpbmdUcmFjaywgc2V0SXNDcmVhdGluZ1RyYWNrXSA9IFJlYWN0MTAzLnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgZGV2aWNlcyA9IHVzZU1lZGlhRGV2aWNlcyh7IGtpbmQgfSk7XG4gIGNvbnN0IFtzZWxlY3RlZERldmljZSwgc2V0U2VsZWN0ZWREZXZpY2VdID0gUmVhY3QxMDMudXNlU3RhdGUoXG4gICAgdm9pZCAwXG4gICk7XG4gIGNvbnN0IFtsb2NhbFRyYWNrLCBzZXRMb2NhbFRyYWNrXSA9IFJlYWN0MTAzLnVzZVN0YXRlKCk7XG4gIGNvbnN0IFtsb2NhbERldmljZUlkLCBzZXRMb2NhbERldmljZUlkXSA9IFJlYWN0MTAzLnVzZVN0YXRlKGRldmljZUlkKTtcbiAgUmVhY3QxMDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRMb2NhbERldmljZUlkKGRldmljZUlkKTtcbiAgfSwgW2RldmljZUlkXSk7XG4gIGNvbnN0IGNyZWF0ZVRyYWNrID0gKGRldmljZUlkMiwga2luZDIpID0+IF9fYXN5bmModGhpcywgbnVsbCwgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHJhY2sgPSBraW5kMiA9PT0gXCJ2aWRlb2lucHV0XCIgPyB5aWVsZCBjcmVhdGVMb2NhbFZpZGVvVHJhY2soe1xuICAgICAgICBkZXZpY2VJZDogZGV2aWNlSWQyLFxuICAgICAgICByZXNvbHV0aW9uOiBWaWRlb1ByZXNldHMuaDcyMC5yZXNvbHV0aW9uXG4gICAgICB9KSA6IHlpZWxkIGNyZWF0ZUxvY2FsQXVkaW9UcmFjayh7IGRldmljZUlkOiBkZXZpY2VJZDIgfSk7XG4gICAgICBjb25zdCBuZXdEZXZpY2VJZCA9IHlpZWxkIHRyYWNrLmdldERldmljZUlkKCk7XG4gICAgICBpZiAobmV3RGV2aWNlSWQgJiYgZGV2aWNlSWQyICE9PSBuZXdEZXZpY2VJZCkge1xuICAgICAgICBwcmV2RGV2aWNlSWQuY3VycmVudCA9IG5ld0RldmljZUlkO1xuICAgICAgICBzZXRMb2NhbERldmljZUlkKG5ld0RldmljZUlkKTtcbiAgICAgIH1cbiAgICAgIHNldExvY2FsVHJhY2sodHJhY2spO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgc2V0RGV2aWNlRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc3dpdGNoRGV2aWNlID0gKHRyYWNrLCBpZCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHlpZWxkIHRyYWNrLnNldERldmljZUlkKGlkKTtcbiAgICBwcmV2RGV2aWNlSWQuY3VycmVudCA9IGlkO1xuICB9KTtcbiAgY29uc3QgcHJldkRldmljZUlkID0gUmVhY3QxMDMudXNlUmVmKGxvY2FsRGV2aWNlSWQpO1xuICBSZWFjdDEwMy51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChlbmFibGVkICYmICFsb2NhbFRyYWNrICYmICFkZXZpY2VFcnJvciAmJiAhaXNDcmVhdGluZ1RyYWNrKSB7XG4gICAgICBsb2cxMi5kZWJ1ZyhcImNyZWF0aW5nIHRyYWNrXCIsIGtpbmQpO1xuICAgICAgc2V0SXNDcmVhdGluZ1RyYWNrKHRydWUpO1xuICAgICAgY3JlYXRlVHJhY2sobG9jYWxEZXZpY2VJZCwga2luZCkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldElzQ3JlYXRpbmdUcmFjayhmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlbmFibGVkLCBsb2NhbFRyYWNrLCBkZXZpY2VFcnJvciwgaXNDcmVhdGluZ1RyYWNrXSk7XG4gIFJlYWN0MTAzLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFsb2NhbFRyYWNrKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgbG9nMTIuZGVidWcoYG11dGluZyAke2tpbmR9IHRyYWNrYCk7XG4gICAgICBsb2NhbFRyYWNrLm11dGUoKS50aGVuKCgpID0+IGxvZzEyLmRlYnVnKGxvY2FsVHJhY2subWVkaWFTdHJlYW1UcmFjaykpO1xuICAgIH0gZWxzZSBpZiAoKHNlbGVjdGVkRGV2aWNlID09IG51bGwgPyB2b2lkIDAgOiBzZWxlY3RlZERldmljZS5kZXZpY2VJZCkgJiYgcHJldkRldmljZUlkLmN1cnJlbnQgIT09IChzZWxlY3RlZERldmljZSA9PSBudWxsID8gdm9pZCAwIDogc2VsZWN0ZWREZXZpY2UuZGV2aWNlSWQpKSB7XG4gICAgICBsb2cxMi5kZWJ1Zyhgc3dpdGNoaW5nICR7a2luZH0gZGV2aWNlIGZyb21gLCBwcmV2RGV2aWNlSWQuY3VycmVudCwgc2VsZWN0ZWREZXZpY2UuZGV2aWNlSWQpO1xuICAgICAgc3dpdGNoRGV2aWNlKGxvY2FsVHJhY2ssIHNlbGVjdGVkRGV2aWNlLmRldmljZUlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nMTIuZGVidWcoYHVubXV0aW5nIGxvY2FsICR7a2luZH0gdHJhY2tgKTtcbiAgICAgIGxvY2FsVHJhY2sudW5tdXRlKCk7XG4gICAgfVxuICB9LCBbbG9jYWxUcmFjaywgc2VsZWN0ZWREZXZpY2UsIGVuYWJsZWQsIGtpbmRdKTtcbiAgUmVhY3QxMDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGxvY2FsVHJhY2spIHtcbiAgICAgICAgbG9nMTIuZGVidWcoYHN0b3BwaW5nIGxvY2FsICR7a2luZH0gdHJhY2tgKTtcbiAgICAgICAgbG9jYWxUcmFjay5zdG9wKCk7XG4gICAgICAgIGxvY2FsVHJhY2subXV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QxMDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRTZWxlY3RlZERldmljZShkZXZpY2VzLmZpbmQoKGRldikgPT4gZGV2LmRldmljZUlkID09PSBsb2NhbERldmljZUlkKSk7XG4gIH0sIFtsb2NhbERldmljZUlkLCBkZXZpY2VzXSk7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWREZXZpY2UsXG4gICAgbG9jYWxUcmFjayxcbiAgICBkZXZpY2VFcnJvclxuICB9O1xufVxuZnVuY3Rpb24gUHJlSm9pbihfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIGRlZmF1bHRzID0ge30sXG4gICAgb25WYWxpZGF0ZSxcbiAgICBvblN1Ym1pdCxcbiAgICBvbkVycm9yLFxuICAgIGRlYnVnLFxuICAgIGpvaW5MYWJlbCA9IFwiSm9pbiBSb29tXCIsXG4gICAgbWljTGFiZWwgPSBcIk1pY3JvcGhvbmVcIixcbiAgICBjYW1MYWJlbCA9IFwiQ2FtZXJhXCIsXG4gICAgdXNlckxhYmVsID0gXCJVc2VybmFtZVwiLFxuICAgIHNob3dFMkVFT3B0aW9ucyA9IGZhbHNlLFxuICAgIHBlcnNpc3RVc2VyQ2hvaWNlcyA9IHRydWVcbiAgfSA9IF9iLCBodG1sUHJvcHMgPSBfX29ialJlc3QoX2IsIFtcbiAgICBcImRlZmF1bHRzXCIsXG4gICAgXCJvblZhbGlkYXRlXCIsXG4gICAgXCJvblN1Ym1pdFwiLFxuICAgIFwib25FcnJvclwiLFxuICAgIFwiZGVidWdcIixcbiAgICBcImpvaW5MYWJlbFwiLFxuICAgIFwibWljTGFiZWxcIixcbiAgICBcImNhbUxhYmVsXCIsXG4gICAgXCJ1c2VyTGFiZWxcIixcbiAgICBcInNob3dFMkVFT3B0aW9uc1wiLFxuICAgIFwicGVyc2lzdFVzZXJDaG9pY2VzXCJcbiAgXSk7XG4gIHZhciBfYTIsIF9iMjtcbiAgY29uc3QgW3VzZXJDaG9pY2VzLCBzZXRVc2VyQ2hvaWNlc10gPSBSZWFjdDEwMy51c2VTdGF0ZShERUZBVUxUX1VTRVJfQ0hPSUNFUyk7XG4gIGNvbnN0IHBhcnRpYWxEZWZhdWx0cyA9IF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHt9LCBkZWZhdWx0cy5hdWRpb0RldmljZUlkICE9PSB2b2lkIDAgJiYgeyBhdWRpb0RldmljZUlkOiBkZWZhdWx0cy5hdWRpb0RldmljZUlkIH0pLCBkZWZhdWx0cy52aWRlb0RldmljZUlkICE9PSB2b2lkIDAgJiYgeyB2aWRlb0RldmljZUlkOiBkZWZhdWx0cy52aWRlb0RldmljZUlkIH0pLCBkZWZhdWx0cy5hdWRpb0VuYWJsZWQgIT09IHZvaWQgMCAmJiB7IGF1ZGlvRW5hYmxlZDogZGVmYXVsdHMuYXVkaW9FbmFibGVkIH0pLCBkZWZhdWx0cy52aWRlb0VuYWJsZWQgIT09IHZvaWQgMCAmJiB7IHZpZGVvRW5hYmxlZDogZGVmYXVsdHMudmlkZW9FbmFibGVkIH0pLCBkZWZhdWx0cy51c2VybmFtZSAhPT0gdm9pZCAwICYmIHsgdXNlcm5hbWU6IGRlZmF1bHRzLnVzZXJuYW1lIH0pO1xuICBjb25zdCB7XG4gICAgdXNlckNob2ljZXM6IGluaXRpYWxVc2VyQ2hvaWNlcyxcbiAgICBzYXZlQXVkaW9JbnB1dERldmljZUlkLFxuICAgIHNhdmVBdWRpb0lucHV0RW5hYmxlZCxcbiAgICBzYXZlVmlkZW9JbnB1dERldmljZUlkLFxuICAgIHNhdmVWaWRlb0lucHV0RW5hYmxlZCxcbiAgICBzYXZlVXNlcm5hbWVcbiAgfSA9IHVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyh7XG4gICAgZGVmYXVsdHM6IHBhcnRpYWxEZWZhdWx0cyxcbiAgICBwcmV2ZW50U2F2ZTogIXBlcnNpc3RVc2VyQ2hvaWNlcyxcbiAgICBwcmV2ZW50TG9hZDogIXBlcnNpc3RVc2VyQ2hvaWNlc1xuICB9KTtcbiAgY29uc3QgW2F1ZGlvRW5hYmxlZCwgc2V0QXVkaW9FbmFibGVkXSA9IFJlYWN0MTAzLnVzZVN0YXRlKGluaXRpYWxVc2VyQ2hvaWNlcy5hdWRpb0VuYWJsZWQpO1xuICBjb25zdCBbdmlkZW9FbmFibGVkLCBzZXRWaWRlb0VuYWJsZWRdID0gUmVhY3QxMDMudXNlU3RhdGUoaW5pdGlhbFVzZXJDaG9pY2VzLnZpZGVvRW5hYmxlZCk7XG4gIGNvbnN0IFthdWRpb0RldmljZUlkLCBzZXRBdWRpb0RldmljZUlkXSA9IFJlYWN0MTAzLnVzZVN0YXRlKFxuICAgIGluaXRpYWxVc2VyQ2hvaWNlcy5hdWRpb0RldmljZUlkXG4gICk7XG4gIGNvbnN0IFt2aWRlb0RldmljZUlkLCBzZXRWaWRlb0RldmljZUlkXSA9IFJlYWN0MTAzLnVzZVN0YXRlKFxuICAgIGluaXRpYWxVc2VyQ2hvaWNlcy52aWRlb0RldmljZUlkXG4gICk7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gUmVhY3QxMDMudXNlU3RhdGUoaW5pdGlhbFVzZXJDaG9pY2VzLnVzZXJuYW1lKTtcbiAgY29uc3QgW2UyZWUsIHNldEUyZWVdID0gUmVhY3QxMDMudXNlU3RhdGUoKF9hMiA9IGRlZmF1bHRzLmUyZWUpICE9IG51bGwgPyBfYTIgOiBERUZBVUxUX1VTRVJfQ0hPSUNFUy5lMmVlKTtcbiAgY29uc3QgW3NoYXJlZFBhc3NwaHJhc2UsIHNldFNoYXJlZFBhc3NwaHJhc2VdID0gUmVhY3QxMDMudXNlU3RhdGUoXG4gICAgKF9iMiA9IGRlZmF1bHRzLnNoYXJlZFBhc3NwaHJhc2UpICE9IG51bGwgPyBfYjIgOiBERUZBVUxUX1VTRVJfQ0hPSUNFUy5zaGFyZWRQYXNzcGhyYXNlXG4gICk7XG4gIFJlYWN0MTAzLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZUF1ZGlvSW5wdXRFbmFibGVkKGF1ZGlvRW5hYmxlZCk7XG4gIH0sIFthdWRpb0VuYWJsZWQsIHNhdmVBdWRpb0lucHV0RW5hYmxlZF0pO1xuICBSZWFjdDEwMy51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNhdmVWaWRlb0lucHV0RW5hYmxlZCh2aWRlb0VuYWJsZWQpO1xuICB9LCBbdmlkZW9FbmFibGVkLCBzYXZlVmlkZW9JbnB1dEVuYWJsZWRdKTtcbiAgUmVhY3QxMDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzYXZlQXVkaW9JbnB1dERldmljZUlkKGF1ZGlvRGV2aWNlSWQpO1xuICB9LCBbYXVkaW9EZXZpY2VJZCwgc2F2ZUF1ZGlvSW5wdXREZXZpY2VJZF0pO1xuICBSZWFjdDEwMy51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNhdmVWaWRlb0lucHV0RGV2aWNlSWQodmlkZW9EZXZpY2VJZCk7XG4gIH0sIFt2aWRlb0RldmljZUlkLCBzYXZlVmlkZW9JbnB1dERldmljZUlkXSk7XG4gIFJlYWN0MTAzLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2F2ZVVzZXJuYW1lKHVzZXJuYW1lKTtcbiAgfSwgW3VzZXJuYW1lLCBzYXZlVXNlcm5hbWVdKTtcbiAgY29uc3QgdHJhY2tzID0gdXNlUHJldmlld1RyYWNrcyhcbiAgICB7XG4gICAgICBhdWRpbzogYXVkaW9FbmFibGVkID8geyBkZXZpY2VJZDogaW5pdGlhbFVzZXJDaG9pY2VzLmF1ZGlvRGV2aWNlSWQgfSA6IGZhbHNlLFxuICAgICAgdmlkZW86IHZpZGVvRW5hYmxlZCA/IHsgZGV2aWNlSWQ6IGluaXRpYWxVc2VyQ2hvaWNlcy52aWRlb0RldmljZUlkIH0gOiBmYWxzZVxuICAgIH0sXG4gICAgb25FcnJvclxuICApO1xuICBjb25zdCB2aWRlb0VsID0gUmVhY3QxMDMudXNlUmVmKG51bGwpO1xuICBjb25zdCB2aWRlb1RyYWNrID0gUmVhY3QxMDMudXNlTWVtbyhcbiAgICAoKSA9PiB0cmFja3MgPT0gbnVsbCA/IHZvaWQgMCA6IHRyYWNrcy5maWx0ZXIoKHRyYWNrKSA9PiB0cmFjay5raW5kID09PSBUcmFjazkuS2luZC5WaWRlbylbMF0sXG4gICAgW3RyYWNrc11cbiAgKTtcbiAgY29uc3QgZmFjaW5nTW9kZSA9IFJlYWN0MTAzLnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICh2aWRlb1RyYWNrKSB7XG4gICAgICBjb25zdCB7IGZhY2luZ01vZGU6IGZhY2luZ01vZGUyIH0gPSBmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2syKHZpZGVvVHJhY2spO1xuICAgICAgcmV0dXJuIGZhY2luZ01vZGUyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIjtcbiAgICB9XG4gIH0sIFt2aWRlb1RyYWNrXSk7XG4gIGNvbnN0IGF1ZGlvVHJhY2sgPSBSZWFjdDEwMy51c2VNZW1vKFxuICAgICgpID0+IHRyYWNrcyA9PSBudWxsID8gdm9pZCAwIDogdHJhY2tzLmZpbHRlcigodHJhY2spID0+IHRyYWNrLmtpbmQgPT09IFRyYWNrOS5LaW5kLkF1ZGlvKVswXSxcbiAgICBbdHJhY2tzXVxuICApO1xuICBSZWFjdDEwMy51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2aWRlb0VsLmN1cnJlbnQgJiYgdmlkZW9UcmFjaykge1xuICAgICAgdmlkZW9UcmFjay51bm11dGUoKTtcbiAgICAgIHZpZGVvVHJhY2suYXR0YWNoKHZpZGVvRWwuY3VycmVudCk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB2aWRlb1RyYWNrID09IG51bGwgPyB2b2lkIDAgOiB2aWRlb1RyYWNrLmRldGFjaCgpO1xuICAgIH07XG4gIH0sIFt2aWRlb1RyYWNrXSk7XG4gIGNvbnN0IFtpc1ZhbGlkLCBzZXRJc1ZhbGlkXSA9IFJlYWN0MTAzLnVzZVN0YXRlKCk7XG4gIGNvbnN0IGhhbmRsZVZhbGlkYXRpb24gPSBSZWFjdDEwMy51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9uVmFsaWRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gb25WYWxpZGF0ZSh2YWx1ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy51c2VybmFtZSAhPT0gXCJcIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtvblZhbGlkYXRlXVxuICApO1xuICBSZWFjdDEwMy51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG5ld1VzZXJDaG9pY2VzID0ge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICB2aWRlb0VuYWJsZWQsXG4gICAgICB2aWRlb0RldmljZUlkLFxuICAgICAgYXVkaW9FbmFibGVkLFxuICAgICAgYXVkaW9EZXZpY2VJZCxcbiAgICAgIGUyZWUsXG4gICAgICBzaGFyZWRQYXNzcGhyYXNlXG4gICAgfTtcbiAgICBzZXRVc2VyQ2hvaWNlcyhuZXdVc2VyQ2hvaWNlcyk7XG4gICAgc2V0SXNWYWxpZChoYW5kbGVWYWxpZGF0aW9uKG5ld1VzZXJDaG9pY2VzKSk7XG4gIH0sIFtcbiAgICB1c2VybmFtZSxcbiAgICB2aWRlb0VuYWJsZWQsXG4gICAgaGFuZGxlVmFsaWRhdGlvbixcbiAgICBhdWRpb0VuYWJsZWQsXG4gICAgYXVkaW9EZXZpY2VJZCxcbiAgICB2aWRlb0RldmljZUlkLFxuICAgIHNoYXJlZFBhc3NwaHJhc2UsXG4gICAgZTJlZVxuICBdKTtcbiAgZnVuY3Rpb24gaGFuZGxlU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoaGFuZGxlVmFsaWRhdGlvbih1c2VyQ2hvaWNlcykpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25TdWJtaXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvblN1Ym1pdCh1c2VyQ2hvaWNlcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZzEyLndhcm4oXCJWYWxpZGF0aW9uIGZhaWxlZCB3aXRoOiBcIiwgdXNlckNob2ljZXMpO1xuICAgIH1cbiAgfVxuICB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7IGNsYXNzTmFtZTogXCJsay1wcmVqb2luXCIgfSwgaHRtbFByb3BzKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstdmlkZW8tY29udGFpbmVyXCIgfSwgdmlkZW9UcmFjayAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcInZpZGVvXCIsIHsgcmVmOiB2aWRlb0VsLCB3aWR0aDogXCIxMjgwXCIsIGhlaWdodDogXCI3MjBcIiwgXCJkYXRhLWxrLWZhY2luZy1tb2RlXCI6IGZhY2luZ01vZGUgfSksICghdmlkZW9UcmFjayB8fCAhdmlkZW9FbmFibGVkKSAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1jYW1lcmEtb2ZmLW5vdGVcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudFBsYWNlaG9sZGVyX2RlZmF1bHQsIG51bGwpKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWJ1dHRvbi1ncm91cC1jb250YWluZXJcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1idXR0b24tZ3JvdXAgYXVkaW9cIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcbiAgICBUcmFja1RvZ2dsZSxcbiAgICB7XG4gICAgICBpbml0aWFsU3RhdGU6IGF1ZGlvRW5hYmxlZCxcbiAgICAgIHNvdXJjZTogVHJhY2s5LlNvdXJjZS5NaWNyb3Bob25lLFxuICAgICAgb25DaGFuZ2U6IChlbmFibGVkKSA9PiBzZXRBdWRpb0VuYWJsZWQoZW5hYmxlZClcbiAgICB9LFxuICAgIG1pY0xhYmVsXG4gICksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWJ1dHRvbi1ncm91cC1tZW51XCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXG4gICAgTWVkaWFEZXZpY2VNZW51LFxuICAgIHtcbiAgICAgIGluaXRpYWxTZWxlY3Rpb246IGF1ZGlvRGV2aWNlSWQsXG4gICAgICBraW5kOiBcImF1ZGlvaW5wdXRcIixcbiAgICAgIGRpc2FibGVkOiAhYXVkaW9UcmFjayxcbiAgICAgIHRyYWNrczogeyBhdWRpb2lucHV0OiBhdWRpb1RyYWNrIH0sXG4gICAgICBvbkFjdGl2ZURldmljZUNoYW5nZTogKF8sIGlkKSA9PiBzZXRBdWRpb0RldmljZUlkKGlkKVxuICAgIH1cbiAgKSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1idXR0b24tZ3JvdXAgdmlkZW9cIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcbiAgICBUcmFja1RvZ2dsZSxcbiAgICB7XG4gICAgICBpbml0aWFsU3RhdGU6IHZpZGVvRW5hYmxlZCxcbiAgICAgIHNvdXJjZTogVHJhY2s5LlNvdXJjZS5DYW1lcmEsXG4gICAgICBvbkNoYW5nZTogKGVuYWJsZWQpID0+IHNldFZpZGVvRW5hYmxlZChlbmFibGVkKVxuICAgIH0sXG4gICAgY2FtTGFiZWxcbiAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstYnV0dG9uLWdyb3VwLW1lbnVcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcbiAgICBNZWRpYURldmljZU1lbnUsXG4gICAge1xuICAgICAgaW5pdGlhbFNlbGVjdGlvbjogdmlkZW9EZXZpY2VJZCxcbiAgICAgIGtpbmQ6IFwidmlkZW9pbnB1dFwiLFxuICAgICAgZGlzYWJsZWQ6ICF2aWRlb1RyYWNrLFxuICAgICAgdHJhY2tzOiB7IHZpZGVvaW5wdXQ6IHZpZGVvVHJhY2sgfSxcbiAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlOiAoXywgaWQpID0+IHNldFZpZGVvRGV2aWNlSWQoaWQpXG4gICAgfVxuICApKSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgeyBjbGFzc05hbWU6IFwibGstdXNlcm5hbWUtY29udGFpbmVyXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXG4gICAgXCJpbnB1dFwiLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJsay1mb3JtLWNvbnRyb2xcIixcbiAgICAgIGlkOiBcInVzZXJuYW1lXCIsXG4gICAgICBuYW1lOiBcInVzZXJuYW1lXCIsXG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIGRlZmF1bHRWYWx1ZTogdXNlcm5hbWUsXG4gICAgICBwbGFjZWhvbGRlcjogdXNlckxhYmVsLFxuICAgICAgb25DaGFuZ2U6IChpbnB1dEVsKSA9PiBzZXRVc2VybmFtZShpbnB1dEVsLnRhcmdldC52YWx1ZSksXG4gICAgICBhdXRvQ29tcGxldGU6IFwib2ZmXCJcbiAgICB9XG4gICksIHNob3dFMkVFT3B0aW9ucyAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlOiB7IGRpc3BsYXk6IFwiZmxleFwiLCBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLCBnYXA6IFwiMXJlbVwiIH0gfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiBcImZsZXhcIiwgZmxleERpcmVjdGlvbjogXCJyb3dcIiwgZ2FwOiBcIjFyZW1cIiB9IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFxuICAgIFwiaW5wdXRcIixcbiAgICB7XG4gICAgICBpZDogXCJ1c2UtZTJlZVwiLFxuICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgY2hlY2tlZDogZTJlZSxcbiAgICAgIG9uQ2hhbmdlOiAoZXYpID0+IHNldEUyZWUoZXYudGFyZ2V0LmNoZWNrZWQpXG4gICAgfVxuICApLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHsgaHRtbEZvcjogXCJ1c2UtZTJlZVwiIH0sIFwiRW5hYmxlIGVuZC10by1lbmQgZW5jcnlwdGlvblwiKSksIGUyZWUgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiBcImZsZXhcIiwgZmxleERpcmVjdGlvbjogXCJyb3dcIiwgZ2FwOiBcIjFyZW1cIiB9IH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwgeyBodG1sRm9yOiBcInBhc3NwaHJhc2VcIiB9LCBcIlBhc3NwaHJhc2VcIiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFxuICAgIFwiaW5wdXRcIixcbiAgICB7XG4gICAgICBpZDogXCJwYXNzcGhyYXNlXCIsXG4gICAgICB0eXBlOiBcInBhc3N3b3JkXCIsXG4gICAgICB2YWx1ZTogc2hhcmVkUGFzc3BocmFzZSxcbiAgICAgIG9uQ2hhbmdlOiAoZXYpID0+IHNldFNoYXJlZFBhc3NwaHJhc2UoZXYudGFyZ2V0LnZhbHVlKVxuICAgIH1cbiAgKSkpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcbiAgICBcImJ1dHRvblwiLFxuICAgIHtcbiAgICAgIGNsYXNzTmFtZTogXCJsay1idXR0b24gbGstam9pbi1idXR0b25cIixcbiAgICAgIHR5cGU6IFwic3VibWl0XCIsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVTdWJtaXQsXG4gICAgICBkaXNhYmxlZDogIWlzVmFsaWRcbiAgICB9LFxuICAgIGpvaW5MYWJlbFxuICApKSwgZGVidWcgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoUmVhY3QxMDMuRnJhZ21lbnQsIG51bGwsIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIsIG51bGwsIFwiVXNlciBDaG9pY2VzOlwiKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7IGNsYXNzTmFtZTogXCJsay1saXN0XCIsIHN0eWxlOiB7IG92ZXJmbG93OiBcImhpZGRlblwiLCBtYXhXaWR0aDogXCIxNXJlbVwiIH0gfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBudWxsLCBcIlVzZXJuYW1lOiBcIiwgYCR7dXNlckNob2ljZXMudXNlcm5hbWV9YCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwibGlcIiwgbnVsbCwgXCJWaWRlbyBFbmFibGVkOiBcIiwgYCR7dXNlckNob2ljZXMudmlkZW9FbmFibGVkfWApLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDMuY3JlYXRlRWxlbWVudChcImxpXCIsIG51bGwsIFwiQXVkaW8gRW5hYmxlZDogXCIsIGAke3VzZXJDaG9pY2VzLmF1ZGlvRW5hYmxlZH1gKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTAzLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCBudWxsLCBcIlZpZGVvIERldmljZTogXCIsIGAke3VzZXJDaG9pY2VzLnZpZGVvRGV2aWNlSWR9YCksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwMy5jcmVhdGVFbGVtZW50KFwibGlcIiwgbnVsbCwgXCJBdWRpbyBEZXZpY2U6IFwiLCBgJHt1c2VyQ2hvaWNlcy5hdWRpb0RldmljZUlkfWApKSkpO1xufVxuXG4vLyBzcmMvcHJlZmFicy9WaWRlb0NvbmZlcmVuY2UudHN4XG5pbXBvcnQgeyBpc0VxdWFsVHJhY2tSZWYsIGlzVHJhY2tSZWZlcmVuY2UgYXMgaXNUcmFja1JlZmVyZW5jZTQsIGlzV2ViLCBsb2cgYXMgbG9nMTMgfSBmcm9tIFwiQGxpdmVraXQvY29tcG9uZW50cy1jb3JlXCI7XG5pbXBvcnQgeyBSb29tRXZlbnQgYXMgUm9vbUV2ZW50MywgVHJhY2sgYXMgVHJhY2sxMSB9IGZyb20gXCJsaXZla2l0LWNsaWVudFwiO1xuaW1wb3J0ICogYXMgUmVhY3QxMDYgZnJvbSBcInJlYWN0XCI7XG5cbi8vIHNyYy9wcmVmYWJzL0NvbnRyb2xCYXIudHN4XG5pbXBvcnQgeyBUcmFjayBhcyBUcmFjazEwIH0gZnJvbSBcImxpdmVraXQtY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdDEwNSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHN1cHBvcnRzU2NyZWVuU2hhcmluZyB9IGZyb20gXCJAbGl2ZWtpdC9jb21wb25lbnRzLWNvcmVcIjtcblxuLy8gc3JjL2NvbXBvbmVudHMvY29udHJvbHMvU3RhcnRNZWRpYUJ1dHRvbi50c3hcbmltcG9ydCAqIGFzIFJlYWN0MTA0IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gU3RhcnRNZWRpYUJ1dHRvbihfYSkge1xuICB2YXIgX2IgPSBfYSwgeyBsYWJlbCB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXCJsYWJlbFwiXSk7XG4gIGNvbnN0IHJvb20gPSB1c2VSb29tQ29udGV4dCgpO1xuICBjb25zdCB7IG1lcmdlZFByb3BzOiBhdWRpb1Byb3BzLCBjYW5QbGF5QXVkaW8gfSA9IHVzZVN0YXJ0QXVkaW8oeyByb29tLCBwcm9wcyB9KTtcbiAgY29uc3QgeyBtZXJnZWRQcm9wcywgY2FuUGxheVZpZGVvIH0gPSB1c2VTdGFydFZpZGVvKHsgcm9vbSwgcHJvcHM6IGF1ZGlvUHJvcHMgfSk7XG4gIGNvbnN0IF9hMiA9IG1lcmdlZFByb3BzLCB7IHN0eWxlIH0gPSBfYTIsIHJlc3RQcm9wcyA9IF9fb2JqUmVzdChfYTIsIFtcInN0eWxlXCJdKTtcbiAgc3R5bGUuZGlzcGxheSA9IGNhblBsYXlBdWRpbyAmJiBjYW5QbGF5VmlkZW8gPyBcIm5vbmVcIiA6IFwiYmxvY2tcIjtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIF9fc3ByZWFkVmFsdWVzKHsgc3R5bGUgfSwgcmVzdFByb3BzKSwgbGFiZWwgIT0gbnVsbCA/IGxhYmVsIDogYFN0YXJ0ICR7IWNhblBsYXlBdWRpbyA/IFwiQXVkaW9cIiA6IFwiVmlkZW9cIn1gKTtcbn1cblxuLy8gc3JjL3ByZWZhYnMvQ29udHJvbEJhci50c3hcbmZ1bmN0aW9uIENvbnRyb2xCYXIoX2EpIHtcbiAgdmFyIF9iID0gX2EsIHtcbiAgICB2YXJpYXRpb24sXG4gICAgY29udHJvbHMsXG4gICAgc2F2ZVVzZXJDaG9pY2VzOiBzYXZlVXNlckNob2ljZXMyID0gdHJ1ZVxuICB9ID0gX2IsIHByb3BzID0gX19vYmpSZXN0KF9iLCBbXG4gICAgXCJ2YXJpYXRpb25cIixcbiAgICBcImNvbnRyb2xzXCIsXG4gICAgXCJzYXZlVXNlckNob2ljZXNcIlxuICBdKTtcbiAgdmFyIF9hMiwgX2IyLCBfYywgX2QsIF9lO1xuICBjb25zdCBbaXNDaGF0T3Blbiwgc2V0SXNDaGF0T3Blbl0gPSBSZWFjdDEwNS51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGxheW91dENvbnRleHQgPSB1c2VNYXliZUxheW91dENvbnRleHQoKTtcbiAgUmVhY3QxMDUudXNlRWZmZWN0KCgpID0+IHtcbiAgICB2YXIgX2EzLCBfYjM7XG4gICAgaWYgKCgoX2EzID0gbGF5b3V0Q29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogbGF5b3V0Q29udGV4dC53aWRnZXQuc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYTMuc2hvd0NoYXQpICE9PSB2b2lkIDApIHtcbiAgICAgIHNldElzQ2hhdE9wZW4oKF9iMyA9IGxheW91dENvbnRleHQgPT0gbnVsbCA/IHZvaWQgMCA6IGxheW91dENvbnRleHQud2lkZ2V0LnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2IzLnNob3dDaGF0KTtcbiAgICB9XG4gIH0sIFsoX2EyID0gbGF5b3V0Q29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogbGF5b3V0Q29udGV4dC53aWRnZXQuc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYTIuc2hvd0NoYXRdKTtcbiAgY29uc3QgaXNUb29MaXR0bGVTcGFjZSA9IHVzZU1lZGlhUXVlcnkoYChtYXgtd2lkdGg6ICR7aXNDaGF0T3BlbiA/IDFlMyA6IDc2MH1weClgKTtcbiAgY29uc3QgZGVmYXVsdFZhcmlhdGlvbiA9IGlzVG9vTGl0dGxlU3BhY2UgPyBcIm1pbmltYWxcIiA6IFwidmVyYm9zZVwiO1xuICB2YXJpYXRpb24gIT0gbnVsbCA/IHZhcmlhdGlvbiA6IHZhcmlhdGlvbiA9IGRlZmF1bHRWYXJpYXRpb247XG4gIGNvbnN0IHZpc2libGVDb250cm9scyA9IF9fc3ByZWFkVmFsdWVzKHsgbGVhdmU6IHRydWUgfSwgY29udHJvbHMpO1xuICBjb25zdCBsb2NhbFBlcm1pc3Npb25zID0gdXNlTG9jYWxQYXJ0aWNpcGFudFBlcm1pc3Npb25zKCk7XG4gIGlmICghbG9jYWxQZXJtaXNzaW9ucykge1xuICAgIHZpc2libGVDb250cm9scy5jYW1lcmEgPSBmYWxzZTtcbiAgICB2aXNpYmxlQ29udHJvbHMuY2hhdCA9IGZhbHNlO1xuICAgIHZpc2libGVDb250cm9scy5taWNyb3Bob25lID0gZmFsc2U7XG4gICAgdmlzaWJsZUNvbnRyb2xzLnNjcmVlblNoYXJlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgKF9iMiA9IHZpc2libGVDb250cm9scy5jYW1lcmEpICE9IG51bGwgPyBfYjIgOiB2aXNpYmxlQ29udHJvbHMuY2FtZXJhID0gbG9jYWxQZXJtaXNzaW9ucy5jYW5QdWJsaXNoO1xuICAgIChfYyA9IHZpc2libGVDb250cm9scy5taWNyb3Bob25lKSAhPSBudWxsID8gX2MgOiB2aXNpYmxlQ29udHJvbHMubWljcm9waG9uZSA9IGxvY2FsUGVybWlzc2lvbnMuY2FuUHVibGlzaDtcbiAgICAoX2QgPSB2aXNpYmxlQ29udHJvbHMuc2NyZWVuU2hhcmUpICE9IG51bGwgPyBfZCA6IHZpc2libGVDb250cm9scy5zY3JlZW5TaGFyZSA9IGxvY2FsUGVybWlzc2lvbnMuY2FuUHVibGlzaDtcbiAgICAoX2UgPSB2aXNpYmxlQ29udHJvbHMuY2hhdCkgIT0gbnVsbCA/IF9lIDogdmlzaWJsZUNvbnRyb2xzLmNoYXQgPSBsb2NhbFBlcm1pc3Npb25zLmNhblB1Ymxpc2hEYXRhICYmIChjb250cm9scyA9PSBudWxsID8gdm9pZCAwIDogY29udHJvbHMuY2hhdCk7XG4gIH1cbiAgY29uc3Qgc2hvd0ljb24gPSBSZWFjdDEwNS51c2VNZW1vKFxuICAgICgpID0+IHZhcmlhdGlvbiA9PT0gXCJtaW5pbWFsXCIgfHwgdmFyaWF0aW9uID09PSBcInZlcmJvc2VcIixcbiAgICBbdmFyaWF0aW9uXVxuICApO1xuICBjb25zdCBzaG93VGV4dCA9IFJlYWN0MTA1LnVzZU1lbW8oXG4gICAgKCkgPT4gdmFyaWF0aW9uID09PSBcInRleHRPbmx5XCIgfHwgdmFyaWF0aW9uID09PSBcInZlcmJvc2VcIixcbiAgICBbdmFyaWF0aW9uXVxuICApO1xuICBjb25zdCBicm93c2VyU3VwcG9ydHNTY3JlZW5TaGFyaW5nID0gc3VwcG9ydHNTY3JlZW5TaGFyaW5nKCk7XG4gIGNvbnN0IFtpc1NjcmVlblNoYXJlRW5hYmxlZCwgc2V0SXNTY3JlZW5TaGFyZUVuYWJsZWRdID0gUmVhY3QxMDUudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBvblNjcmVlblNoYXJlQ2hhbmdlID0gUmVhY3QxMDUudXNlQ2FsbGJhY2soXG4gICAgKGVuYWJsZWQpID0+IHtcbiAgICAgIHNldElzU2NyZWVuU2hhcmVFbmFibGVkKGVuYWJsZWQpO1xuICAgIH0sXG4gICAgW3NldElzU2NyZWVuU2hhcmVFbmFibGVkXVxuICApO1xuICBjb25zdCBodG1sUHJvcHMgPSBtZXJnZVByb3BzMih7IGNsYXNzTmFtZTogXCJsay1jb250cm9sLWJhclwiIH0sIHByb3BzKTtcbiAgY29uc3Qge1xuICAgIHNhdmVBdWRpb0lucHV0RW5hYmxlZCxcbiAgICBzYXZlVmlkZW9JbnB1dEVuYWJsZWQsXG4gICAgc2F2ZUF1ZGlvSW5wdXREZXZpY2VJZCxcbiAgICBzYXZlVmlkZW9JbnB1dERldmljZUlkXG4gIH0gPSB1c2VQZXJzaXN0ZW50VXNlckNob2ljZXMoeyBwcmV2ZW50U2F2ZTogIXNhdmVVc2VyQ2hvaWNlczIgfSk7XG4gIGNvbnN0IG1pY3JvcGhvbmVPbkNoYW5nZSA9IFJlYWN0MTA1LnVzZUNhbGxiYWNrKFxuICAgIChlbmFibGVkLCBpc1VzZXJJbml0aWF0ZWQpID0+IGlzVXNlckluaXRpYXRlZCA/IHNhdmVBdWRpb0lucHV0RW5hYmxlZChlbmFibGVkKSA6IG51bGwsXG4gICAgW3NhdmVBdWRpb0lucHV0RW5hYmxlZF1cbiAgKTtcbiAgY29uc3QgY2FtZXJhT25DaGFuZ2UgPSBSZWFjdDEwNS51c2VDYWxsYmFjayhcbiAgICAoZW5hYmxlZCwgaXNVc2VySW5pdGlhdGVkKSA9PiBpc1VzZXJJbml0aWF0ZWQgPyBzYXZlVmlkZW9JbnB1dEVuYWJsZWQoZW5hYmxlZCkgOiBudWxsLFxuICAgIFtzYXZlVmlkZW9JbnB1dEVuYWJsZWRdXG4gICk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDUuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7fSwgaHRtbFByb3BzKSwgdmlzaWJsZUNvbnRyb2xzLm1pY3JvcGhvbmUgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstYnV0dG9uLWdyb3VwXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoXG4gICAgVHJhY2tUb2dnbGUsXG4gICAge1xuICAgICAgc291cmNlOiBUcmFjazEwLlNvdXJjZS5NaWNyb3Bob25lLFxuICAgICAgc2hvd0ljb24sXG4gICAgICBvbkNoYW5nZTogbWljcm9waG9uZU9uQ2hhbmdlXG4gICAgfSxcbiAgICBzaG93VGV4dCAmJiBcIk1pY3JvcGhvbmVcIlxuICApLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDUuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1idXR0b24tZ3JvdXAtbWVudVwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNS5jcmVhdGVFbGVtZW50KFxuICAgIE1lZGlhRGV2aWNlTWVudSxcbiAgICB7XG4gICAgICBraW5kOiBcImF1ZGlvaW5wdXRcIixcbiAgICAgIG9uQWN0aXZlRGV2aWNlQ2hhbmdlOiAoX2tpbmQsIGRldmljZUlkKSA9PiBzYXZlQXVkaW9JbnB1dERldmljZUlkKGRldmljZUlkICE9IG51bGwgPyBkZXZpY2VJZCA6IFwiXCIpXG4gICAgfVxuICApKSksIHZpc2libGVDb250cm9scy5jYW1lcmEgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwibGstYnV0dG9uLWdyb3VwXCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoVHJhY2tUb2dnbGUsIHsgc291cmNlOiBUcmFjazEwLlNvdXJjZS5DYW1lcmEsIHNob3dJY29uLCBvbkNoYW5nZTogY2FtZXJhT25DaGFuZ2UgfSwgc2hvd1RleHQgJiYgXCJDYW1lcmFcIiksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWJ1dHRvbi1ncm91cC1tZW51XCIgfSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoXG4gICAgTWVkaWFEZXZpY2VNZW51LFxuICAgIHtcbiAgICAgIGtpbmQ6IFwidmlkZW9pbnB1dFwiLFxuICAgICAgb25BY3RpdmVEZXZpY2VDaGFuZ2U6IChfa2luZCwgZGV2aWNlSWQpID0+IHNhdmVWaWRlb0lucHV0RGV2aWNlSWQoZGV2aWNlSWQgIT0gbnVsbCA/IGRldmljZUlkIDogXCJcIilcbiAgICB9XG4gICkpKSwgdmlzaWJsZUNvbnRyb2xzLnNjcmVlblNoYXJlICYmIGJyb3dzZXJTdXBwb3J0c1NjcmVlblNoYXJpbmcgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoXG4gICAgVHJhY2tUb2dnbGUsXG4gICAge1xuICAgICAgc291cmNlOiBUcmFjazEwLlNvdXJjZS5TY3JlZW5TaGFyZSxcbiAgICAgIGNhcHR1cmVPcHRpb25zOiB7IGF1ZGlvOiB0cnVlLCBzZWxmQnJvd3NlclN1cmZhY2U6IFwiaW5jbHVkZVwiIH0sXG4gICAgICBzaG93SWNvbixcbiAgICAgIG9uQ2hhbmdlOiBvblNjcmVlblNoYXJlQ2hhbmdlXG4gICAgfSxcbiAgICBzaG93VGV4dCAmJiAoaXNTY3JlZW5TaGFyZUVuYWJsZWQgPyBcIlN0b3Agc2NyZWVuIHNoYXJlXCIgOiBcIlNoYXJlIHNjcmVlblwiKVxuICApLCB2aXNpYmxlQ29udHJvbHMuY2hhdCAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDUuY3JlYXRlRWxlbWVudChDaGF0VG9nZ2xlLCBudWxsLCBzaG93SWNvbiAmJiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDUuY3JlYXRlRWxlbWVudChDaGF0SWNvbl9kZWZhdWx0LCBudWxsKSwgc2hvd1RleHQgJiYgXCJDaGF0XCIpLCB2aXNpYmxlQ29udHJvbHMubGVhdmUgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoRGlzY29ubmVjdEJ1dHRvbiwgbnVsbCwgc2hvd0ljb24gJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA1LmNyZWF0ZUVsZW1lbnQoTGVhdmVJY29uX2RlZmF1bHQsIG51bGwpLCBzaG93VGV4dCAmJiBcIkxlYXZlXCIpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDUuY3JlYXRlRWxlbWVudChTdGFydE1lZGlhQnV0dG9uLCBudWxsKSk7XG59XG5cbi8vIHNyYy9wcmVmYWJzL1ZpZGVvQ29uZmVyZW5jZS50c3hcbmZ1bmN0aW9uIFZpZGVvQ29uZmVyZW5jZShfYSkge1xuICB2YXIgX2IgPSBfYSwge1xuICAgIGNoYXRNZXNzYWdlRm9ybWF0dGVyLFxuICAgIGNoYXRNZXNzYWdlRGVjb2RlcixcbiAgICBjaGF0TWVzc2FnZUVuY29kZXJcbiAgfSA9IF9iLCBwcm9wcyA9IF9fb2JqUmVzdChfYiwgW1xuICAgIFwiY2hhdE1lc3NhZ2VGb3JtYXR0ZXJcIixcbiAgICBcImNoYXRNZXNzYWdlRGVjb2RlclwiLFxuICAgIFwiY2hhdE1lc3NhZ2VFbmNvZGVyXCJcbiAgXSk7XG4gIHZhciBfYTIsIF9iMjtcbiAgY29uc3QgW3dpZGdldFN0YXRlLCBzZXRXaWRnZXRTdGF0ZV0gPSBSZWFjdDEwNi51c2VTdGF0ZSh7XG4gICAgc2hvd0NoYXQ6IGZhbHNlLFxuICAgIHVucmVhZE1lc3NhZ2VzOiAwXG4gIH0pO1xuICBjb25zdCBsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrID0gUmVhY3QxMDYudXNlUmVmKG51bGwpO1xuICBjb25zdCB0cmFja3MgPSB1c2VUcmFja3MoXG4gICAgW1xuICAgICAgeyBzb3VyY2U6IFRyYWNrMTEuU291cmNlLkNhbWVyYSwgd2l0aFBsYWNlaG9sZGVyOiB0cnVlIH0sXG4gICAgICB7IHNvdXJjZTogVHJhY2sxMS5Tb3VyY2UuU2NyZWVuU2hhcmUsIHdpdGhQbGFjZWhvbGRlcjogZmFsc2UgfVxuICAgIF0sXG4gICAgeyB1cGRhdGVPbmx5T246IFtSb29tRXZlbnQzLkFjdGl2ZVNwZWFrZXJzQ2hhbmdlZF0sIG9ubHlTdWJzY3JpYmVkOiBmYWxzZSB9XG4gICk7XG4gIGNvbnN0IHdpZGdldFVwZGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgIGxvZzEzLmRlYnVnKFwidXBkYXRpbmcgd2lkZ2V0IHN0YXRlXCIsIHN0YXRlKTtcbiAgICBzZXRXaWRnZXRTdGF0ZShzdGF0ZSk7XG4gIH07XG4gIGNvbnN0IGxheW91dENvbnRleHQgPSB1c2VDcmVhdGVMYXlvdXRDb250ZXh0KCk7XG4gIGNvbnN0IHNjcmVlblNoYXJlVHJhY2tzID0gdHJhY2tzLmZpbHRlcihpc1RyYWNrUmVmZXJlbmNlNCkuZmlsdGVyKCh0cmFjaykgPT4gdHJhY2sucHVibGljYXRpb24uc291cmNlID09PSBUcmFjazExLlNvdXJjZS5TY3JlZW5TaGFyZSk7XG4gIGNvbnN0IGZvY3VzVHJhY2sgPSAoX2EyID0gdXNlUGlubmVkVHJhY2tzKGxheW91dENvbnRleHQpKSA9PSBudWxsID8gdm9pZCAwIDogX2EyWzBdO1xuICBjb25zdCBjYXJvdXNlbFRyYWNrcyA9IHRyYWNrcy5maWx0ZXIoKHRyYWNrKSA9PiAhaXNFcXVhbFRyYWNrUmVmKHRyYWNrLCBmb2N1c1RyYWNrKSk7XG4gIFJlYWN0MTA2LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdmFyIF9hMywgX2IzLCBfYywgX2Q7XG4gICAgaWYgKHNjcmVlblNoYXJlVHJhY2tzLnNvbWUoKHRyYWNrKSA9PiB0cmFjay5wdWJsaWNhdGlvbi5pc1N1YnNjcmliZWQpICYmIGxhc3RBdXRvRm9jdXNlZFNjcmVlblNoYXJlVHJhY2suY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgbG9nMTMuZGVidWcoXCJBdXRvIHNldCBzY3JlZW4gc2hhcmUgZm9jdXM6XCIsIHsgbmV3U2NyZWVuU2hhcmVUcmFjazogc2NyZWVuU2hhcmVUcmFja3NbMF0gfSk7XG4gICAgICAoX2IzID0gKF9hMyA9IGxheW91dENvbnRleHQucGluKS5kaXNwYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMy5jYWxsKF9hMywgeyBtc2c6IFwic2V0X3BpblwiLCB0cmFja1JlZmVyZW5jZTogc2NyZWVuU2hhcmVUcmFja3NbMF0gfSk7XG4gICAgICBsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrLmN1cnJlbnQgPSBzY3JlZW5TaGFyZVRyYWNrc1swXTtcbiAgICB9IGVsc2UgaWYgKGxhc3RBdXRvRm9jdXNlZFNjcmVlblNoYXJlVHJhY2suY3VycmVudCAmJiAhc2NyZWVuU2hhcmVUcmFja3Muc29tZShcbiAgICAgICh0cmFjaykgPT4ge1xuICAgICAgICB2YXIgX2E0LCBfYjQ7XG4gICAgICAgIHJldHVybiB0cmFjay5wdWJsaWNhdGlvbi50cmFja1NpZCA9PT0gKChfYjQgPSAoX2E0ID0gbGFzdEF1dG9Gb2N1c2VkU2NyZWVuU2hhcmVUcmFjay5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2E0LnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2I0LnRyYWNrU2lkKTtcbiAgICAgIH1cbiAgICApKSB7XG4gICAgICBsb2cxMy5kZWJ1ZyhcIkF1dG8gY2xlYXJpbmcgc2NyZWVuIHNoYXJlIGZvY3VzLlwiKTtcbiAgICAgIChfZCA9IChfYyA9IGxheW91dENvbnRleHQucGluKS5kaXNwYXRjaCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHsgbXNnOiBcImNsZWFyX3BpblwiIH0pO1xuICAgICAgbGFzdEF1dG9Gb2N1c2VkU2NyZWVuU2hhcmVUcmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtcbiAgICBzY3JlZW5TaGFyZVRyYWNrcy5tYXAoKHJlZikgPT4gYCR7cmVmLnB1YmxpY2F0aW9uLnRyYWNrU2lkfV8ke3JlZi5wdWJsaWNhdGlvbi5pc1N1YnNjcmliZWR9YCkuam9pbigpLFxuICAgIChfYjIgPSBmb2N1c1RyYWNrID09IG51bGwgPyB2b2lkIDAgOiBmb2N1c1RyYWNrLnB1YmxpY2F0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLnRyYWNrU2lkXG4gIF0pO1xuICB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfX3NwcmVhZFZhbHVlcyh7IGNsYXNzTmFtZTogXCJsay12aWRlby1jb25mZXJlbmNlXCIgfSwgcHJvcHMpLCBpc1dlYigpICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KFxuICAgIExheW91dENvbnRleHRQcm92aWRlcixcbiAgICB7XG4gICAgICB2YWx1ZTogbGF5b3V0Q29udGV4dCxcbiAgICAgIG9uV2lkZ2V0Q2hhbmdlOiB3aWRnZXRVcGRhdGVcbiAgICB9LFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLXZpZGVvLWNvbmZlcmVuY2UtaW5uZXJcIiB9LCAhZm9jdXNUcmFjayA/IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWdyaWQtbGF5b3V0LXdyYXBwZXJcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChHcmlkTGF5b3V0LCB7IHRyYWNrcyB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudFRpbGUsIG51bGwpKSkgOiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJsay1mb2N1cy1sYXlvdXQtd3JhcHBlclwiIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KEZvY3VzTGF5b3V0Q29udGFpbmVyLCBudWxsLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChDYXJvdXNlbExheW91dCwgeyB0cmFja3M6IGNhcm91c2VsVHJhY2tzIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KFBhcnRpY2lwYW50VGlsZSwgbnVsbCkpLCBmb2N1c1RyYWNrICYmIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KEZvY3VzTGF5b3V0LCB7IHRyYWNrUmVmOiBmb2N1c1RyYWNrIH0pKSksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNi5jcmVhdGVFbGVtZW50KENvbnRyb2xCYXIsIHsgY29udHJvbHM6IHsgY2hhdDogdHJ1ZSB9IH0pKSxcbiAgICAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChcbiAgICAgIENoYXQsXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiB7IGRpc3BsYXk6IHdpZGdldFN0YXRlLnNob3dDaGF0ID8gXCJncmlkXCIgOiBcIm5vbmVcIiB9LFxuICAgICAgICBtZXNzYWdlRm9ybWF0dGVyOiBjaGF0TWVzc2FnZUZvcm1hdHRlcixcbiAgICAgICAgbWVzc2FnZUVuY29kZXI6IGNoYXRNZXNzYWdlRW5jb2RlcixcbiAgICAgICAgbWVzc2FnZURlY29kZXI6IGNoYXRNZXNzYWdlRGVjb2RlclxuICAgICAgfVxuICAgIClcbiAgKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTA2LmNyZWF0ZUVsZW1lbnQoUm9vbUF1ZGlvUmVuZGVyZXIsIG51bGwpLCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDYuY3JlYXRlRWxlbWVudChDb25uZWN0aW9uU3RhdGVUb2FzdCwgbnVsbCkpO1xufVxuXG4vLyBzcmMvcHJlZmFicy9BdWRpb0NvbmZlcmVuY2UudHN4XG5pbXBvcnQgKiBhcyBSZWFjdDEwNyBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFRyYWNrIGFzIFRyYWNrMTIgfSBmcm9tIFwibGl2ZWtpdC1jbGllbnRcIjtcbmZ1bmN0aW9uIEF1ZGlvQ29uZmVyZW5jZShfYSkge1xuICB2YXIgcHJvcHMgPSBfX29ialJlc3QoX2EsIFtdKTtcbiAgY29uc3QgW3dpZGdldFN0YXRlLCBzZXRXaWRnZXRTdGF0ZV0gPSBSZWFjdDEwNy51c2VTdGF0ZSh7XG4gICAgc2hvd0NoYXQ6IGZhbHNlLFxuICAgIHVucmVhZE1lc3NhZ2VzOiAwXG4gIH0pO1xuICBjb25zdCBhdWRpb1RyYWNrcyA9IHVzZVRyYWNrcyhbVHJhY2sxMi5Tb3VyY2UuTWljcm9waG9uZV0pO1xuICB1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzKCk7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDcuY3JlYXRlRWxlbWVudChMYXlvdXRDb250ZXh0UHJvdmlkZXIsIHsgb25XaWRnZXRDaGFuZ2U6IHNldFdpZGdldFN0YXRlIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNy5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fc3ByZWFkVmFsdWVzKHsgY2xhc3NOYW1lOiBcImxrLWF1ZGlvLWNvbmZlcmVuY2VcIiB9LCBwcm9wcyksIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDEwNy5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImxrLWF1ZGlvLWNvbmZlcmVuY2Utc3RhZ2VcIiB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDcuY3JlYXRlRWxlbWVudChUcmFja0xvb3AsIHsgdHJhY2tzOiBhdWRpb1RyYWNrcyB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QxMDcuY3JlYXRlRWxlbWVudChQYXJ0aWNpcGFudEF1ZGlvVGlsZSwgbnVsbCkpKSwgLyogQF9fUFVSRV9fICovIFJlYWN0MTA3LmNyZWF0ZUVsZW1lbnQoXG4gICAgQ29udHJvbEJhcixcbiAgICB7XG4gICAgICBjb250cm9sczogeyBtaWNyb3Bob25lOiB0cnVlLCBzY3JlZW5TaGFyZTogZmFsc2UsIGNhbWVyYTogZmFsc2UsIGNoYXQ6IHRydWUgfVxuICAgIH1cbiAgKSwgd2lkZ2V0U3RhdGUuc2hvd0NoYXQgJiYgLyogQF9fUFVSRV9fICovIFJlYWN0MTA3LmNyZWF0ZUVsZW1lbnQoQ2hhdCwgbnVsbCkpKTtcbn1cblxuLy8gc3JjL2luZGV4LnRzXG5pbXBvcnQgeyBzZXRMb2dMZXZlbCwgc2V0TG9nRXh0ZW5zaW9uLCBpc1RyYWNrUmVmZXJlbmNlIGFzIGlzVHJhY2tSZWZlcmVuY2U1IH0gZnJvbSBcIkBsaXZla2l0L2NvbXBvbmVudHMtY29yZVwiO1xuZXhwb3J0IHtcbiAgQXVkaW9Db25mZXJlbmNlLFxuICBBdWRpb1RyYWNrLFxuICBBdWRpb1Zpc3VhbGl6ZXIsXG4gIENhbWVyYURpc2FibGVkSWNvbl9kZWZhdWx0IGFzIENhbWVyYURpc2FibGVkSWNvbixcbiAgQ2FtZXJhSWNvbl9kZWZhdWx0IGFzIENhbWVyYUljb24sXG4gIENhcm91c2VsTGF5b3V0LFxuICBDYXJvdXNlbFZpZXcsXG4gIENoYXQsXG4gIENoYXRDbG9zZUljb25fZGVmYXVsdCBhcyBDaGF0Q2xvc2VJY29uLFxuICBDaGF0RW50cnksXG4gIENoYXRJY29uX2RlZmF1bHQgYXMgQ2hhdEljb24sXG4gIENoYXRUb2dnbGUsXG4gIENoZXZyb25fZGVmYXVsdCBhcyBDaGV2cm9uLFxuICBDbGVhclBpbkJ1dHRvbixcbiAgQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IsXG4gIENvbm5lY3Rpb25TdGF0ZTMgYXMgQ29ubmVjdGlvblN0YXRlLFxuICBDb25uZWN0aW9uU3RhdGVUb2FzdCxcbiAgQ29udHJvbEJhcixcbiAgRGlzY29ubmVjdEJ1dHRvbixcbiAgRm9jdXNMYXlvdXQsXG4gIEZvY3VzTGF5b3V0Q29udGFpbmVyLFxuICBGb2N1c1RvZ2dsZSxcbiAgRm9jdXNUb2dnbGVJY29uX2RlZmF1bHQgYXMgRm9jdXNUb2dnbGVJY29uLFxuICBHZWFySWNvbl9kZWZhdWx0IGFzIEdlYXJJY29uLFxuICBHcmlkTGF5b3V0LFxuICBMS0ZlYXR1cmVDb250ZXh0LFxuICBMYXlvdXRDb250ZXh0LFxuICBMYXlvdXRDb250ZXh0UHJvdmlkZXIsXG4gIExlYXZlSWNvbl9kZWZhdWx0IGFzIExlYXZlSWNvbixcbiAgTGl2ZUtpdFJvb20sXG4gIExvY2tMb2NrZWRJY29uX2RlZmF1bHQgYXMgTG9ja0xvY2tlZEljb24sXG4gIE1lZGlhRGV2aWNlTWVudSxcbiAgTWVkaWFEZXZpY2VTZWxlY3QsXG4gIE1pY0Rpc2FibGVkSWNvbl9kZWZhdWx0IGFzIE1pY0Rpc2FibGVkSWNvbixcbiAgTWljSWNvbl9kZWZhdWx0IGFzIE1pY0ljb24sXG4gIFBhcnRpY2lwYW50QXVkaW9UaWxlLFxuICBQYXJ0aWNpcGFudENvbnRleHQsXG4gIFBhcnRpY2lwYW50Q29udGV4dElmTmVlZGVkLFxuICBQYXJ0aWNpcGFudExvb3AsXG4gIFBhcnRpY2lwYW50TmFtZSxcbiAgUGFydGljaXBhbnRQbGFjZWhvbGRlcl9kZWZhdWx0IGFzIFBhcnRpY2lwYW50UGxhY2Vob2xkZXIsXG4gIFBhcnRpY2lwYW50VGlsZSxcbiAgUHJlSm9pbixcbiAgUXVhbGl0eUV4Y2VsbGVudEljb25fZGVmYXVsdCBhcyBRdWFsaXR5RXhjZWxsZW50SWNvbixcbiAgUXVhbGl0eUdvb2RJY29uX2RlZmF1bHQgYXMgUXVhbGl0eUdvb2RJY29uLFxuICBRdWFsaXR5UG9vckljb25fZGVmYXVsdCBhcyBRdWFsaXR5UG9vckljb24sXG4gIFF1YWxpdHlVbmtub3duSWNvbl9kZWZhdWx0IGFzIFF1YWxpdHlVbmtub3duSWNvbixcbiAgUm9vbUF1ZGlvUmVuZGVyZXIsXG4gIFJvb21Db250ZXh0LFxuICBSb29tTmFtZSxcbiAgU2NyZWVuU2hhcmVJY29uX2RlZmF1bHQgYXMgU2NyZWVuU2hhcmVJY29uLFxuICBTY3JlZW5TaGFyZVN0b3BJY29uX2RlZmF1bHQgYXMgU2NyZWVuU2hhcmVTdG9wSWNvbixcbiAgU3Bpbm5lckljb25fZGVmYXVsdCBhcyBTcGlubmVySWNvbixcbiAgU3RhcnRBdWRpbyxcbiAgVG9hc3QsXG4gIFRyYWNrQ29udGV4dCxcbiAgVHJhY2tMb29wLFxuICBUcmFja011dGVkSW5kaWNhdG9yLFxuICBUcmFja1JlZkNvbnRleHQsXG4gIFRyYWNrVG9nZ2xlLFxuICBVbmZvY3VzVG9nZ2xlSWNvbl9kZWZhdWx0IGFzIFVuZm9jdXNUb2dnbGVJY29uLFxuICBWaWRlb0NvbmZlcmVuY2UsXG4gIFZpZGVvVHJhY2ssXG4gIGZvcm1hdENoYXRNZXNzYWdlTGlua3MsXG4gIGlzVHJhY2tSZWZlcmVuY2U1IGFzIGlzVHJhY2tSZWZlcmVuY2UsXG4gIHNldExvZ0V4dGVuc2lvbixcbiAgc2V0TG9nTGV2ZWwsXG4gIHVzZUF1ZGlvUGxheWJhY2ssXG4gIHVzZUNoYXQsXG4gIHVzZUNoYXRUb2dnbGUsXG4gIHVzZUNsZWFyUGluQnV0dG9uLFxuICB1c2VDb25uZWN0aW9uUXVhbGl0eUluZGljYXRvcixcbiAgdXNlQ29ubmVjdGlvblN0YXRlLFxuICB1c2VDcmVhdGVMYXlvdXRDb250ZXh0LFxuICB1c2VEYXRhQ2hhbm5lbCxcbiAgdXNlRGlzY29ubmVjdEJ1dHRvbixcbiAgdXNlRW5zdXJlQ3JlYXRlTGF5b3V0Q29udGV4dCxcbiAgdXNlRW5zdXJlTGF5b3V0Q29udGV4dCxcbiAgdXNlRW5zdXJlUGFydGljaXBhbnQsXG4gIHVzZUVuc3VyZVJvb20sXG4gIHVzZUVuc3VyZVRyYWNrUmVmLFxuICB1c2VFbnN1cmVUcmFja1JlZmVyZW5jZSxcbiAgdXNlRmFjaW5nTW9kZSxcbiAgdXNlRmVhdHVyZUNvbnRleHQsXG4gIHVzZUZvY3VzVG9nZ2xlLFxuICB1c2VHcmlkTGF5b3V0LFxuICB1c2VJc0VuY3J5cHRlZCxcbiAgdXNlSXNNdXRlZCxcbiAgdXNlSXNTcGVha2luZyxcbiAgdXNlTGF5b3V0Q29udGV4dCxcbiAgdXNlTGl2ZUtpdFJvb20sXG4gIHVzZUxvY2FsUGFydGljaXBhbnQsXG4gIHVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucyxcbiAgdXNlTWF5YmVMYXlvdXRDb250ZXh0LFxuICB1c2VNYXliZVBhcnRpY2lwYW50Q29udGV4dCxcbiAgdXNlTWF5YmVSb29tQ29udGV4dCxcbiAgdXNlTWF5YmVUcmFja0NvbnRleHQsXG4gIHVzZU1heWJlVHJhY2tSZWZDb250ZXh0LFxuICB1c2VNZWRpYURldmljZVNlbGVjdCxcbiAgdXNlTWVkaWFEZXZpY2VzLFxuICB1c2VNZWRpYVRyYWNrLFxuICB1c2VNZWRpYVRyYWNrQnlOYW1lLFxuICB1c2VNdWx0aWJhbmRUcmFja1ZvbHVtZSxcbiAgdXNlUGFnaW5hdGlvbixcbiAgdXNlUGFydGljaXBhbnRDb250ZXh0LFxuICB1c2VQYXJ0aWNpcGFudEluZm8sXG4gIHVzZVBhcnRpY2lwYW50UGVybWlzc2lvbnMsXG4gIHVzZVBhcnRpY2lwYW50VGlsZSxcbiAgdXNlUGFydGljaXBhbnRzLFxuICB1c2VQZXJzaXN0ZW50VXNlckNob2ljZXMsXG4gIHVzZVBpbm5lZFRyYWNrcyxcbiAgdXNlUHJldmlld0RldmljZSxcbiAgdXNlUHJldmlld1RyYWNrcyxcbiAgdXNlUmVtb3RlUGFydGljaXBhbnQsXG4gIHVzZVJlbW90ZVBhcnRpY2lwYW50cyxcbiAgdXNlUm9vbUNvbnRleHQsXG4gIHVzZVJvb21JbmZvLFxuICB1c2VTb3J0ZWRQYXJ0aWNpcGFudHMsXG4gIHVzZVNwZWFraW5nUGFydGljaXBhbnRzLFxuICB1c2VTdGFydEF1ZGlvLFxuICB1c2VTdGFydFZpZGVvLFxuICB1c2VTd2lwZSxcbiAgdXNlVG9rZW4sXG4gIHVzZVRyYWNrLFxuICB1c2VUcmFja0J5TmFtZSxcbiAgdXNlVHJhY2tDb250ZXh0LFxuICB1c2VUcmFja011dGVkSW5kaWNhdG9yLFxuICB1c2VUcmFja1JlZkNvbnRleHQsXG4gIHVzZVRyYWNrVG9nZ2xlLFxuICB1c2VUcmFja1ZvbHVtZSxcbiAgdXNlVHJhY2tzLFxuICB1c2VWaXN1YWxTdGFibGVVcGRhdGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZQcm9wcyIsImRlZmluZVByb3BlcnRpZXMiLCJfX2dldE93blByb3BEZXNjcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfX2dldE93blByb3BTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX3Byb3BJc0VudW0iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19zcHJlYWRWYWx1ZXMiLCJhIiwiYiIsInByb3AiLCJjYWxsIiwiX19zcHJlYWRQcm9wcyIsIl9fb2JqUmVzdCIsInNvdXJjZSIsImV4Y2x1ZGUiLCJ0YXJnZXQiLCJpbmRleE9mIiwiX19hc3luYyIsIl9fdGhpcyIsIl9fYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInRocm93IiwieCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJSZWFjdDQ5IiwiUmVhY3Q5IiwiUmVhY3QiLCJ1c2VMYXRlc3QiLCJ1c2VSZXNpemVPYnNlcnZlciIsImNhbGxiYWNrIiwicmVzaXplT2JzZXJ2ZXIiLCJnZXRSZXNpemVPYnNlcnZlciIsInN0b3JlZENhbGxiYWNrIiwidXNlTGF5b3V0RWZmZWN0IiwiZGlkVW5zdWJzY3JpYmUiLCJ0YXJnZXRFbCIsImN1cnJlbnQiLCJjYiIsImVudHJ5Iiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwidGlja2luZyIsImFsbEVudHJpZXMiLCJjYWxsYmFja3MiLCJNYXAiLCJSZXNpemVPYnNlcnZlciIsImVudHJpZXMiLCJvYnMiLCJjb25jYXQiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0cmlnZ2VyZWQiLCJTZXQiLCJpIiwibGVuZ3RoIiwiaGFzIiwiYWRkIiwiY2JzIiwiZ2V0IiwiZm9yRWFjaCIsIl9hIiwib2JzZXJ2ZSIsInB1c2giLCJzZXQiLCJ1bm9ic2VydmUiLCJkZWxldGUiLCJjYkluZGV4Iiwic3BsaWNlIiwiX3Jlc2l6ZU9ic2VydmVyIiwidXNlU2l6ZSIsInNpemUiLCJzZXRTaXplIiwidXNlU3RhdGUiLCJ3aWR0aCIsImhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlc2l6ZUNhbGxiYWNrIiwidXNlQ2FsbGJhY2siLCJjb250ZW50UmVjdCIsIlJlYWN0MiIsInVzZU9ic2VydmFibGVTdGF0ZSIsIm9ic2VydmFibGUiLCJzdGFydFdpdGgiLCJzdGF0ZSIsInNldFN0YXRlIiwidXNlRWZmZWN0Iiwic3Vic2NyaXB0aW9uIiwiUmVhY3QzIiwidXNlTWVkaWFRdWVyeSIsInF1ZXJ5IiwiZ2V0TWF0Y2hlcyIsInF1ZXJ5MiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwic2V0TWF0Y2hlcyIsImhhbmRsZUNoYW5nZSIsImFkZExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJvb21BdWRpb1BsYXliYWNrQWxsb3dlZE9ic2VydmFibGUiLCJQSU5fREVGQVVMVF9TVEFURSIsIldJREdFVF9ERUZBVUxUX1NUQVRFIiwiUmVhY3Q0IiwiY2hhdFJlZHVjZXIiLCJhY3Rpb24iLCJtc2ciLCJzaG93Q2hhdCIsInVucmVhZE1lc3NhZ2VzIiwibmV3U3RhdGUiLCJjb3VudCIsInBpblJlZHVjZXIiLCJ0cmFja1JlZmVyZW5jZSIsIkxheW91dENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlTGF5b3V0Q29udGV4dCIsImxheW91dENvbnRleHQiLCJ1c2VDb250ZXh0IiwiRXJyb3IiLCJ1c2VFbnN1cmVMYXlvdXRDb250ZXh0IiwibGF5b3V0IiwidXNlTWF5YmVMYXlvdXRDb250ZXh0IiwidXNlQ3JlYXRlTGF5b3V0Q29udGV4dCIsInBpblN0YXRlIiwicGluRGlzcGF0Y2giLCJ1c2VSZWR1Y2VyIiwid2lkZ2V0U3RhdGUiLCJ3aWRnZXREaXNwYXRjaCIsInBpbiIsImRpc3BhdGNoIiwid2lkZ2V0IiwidXNlRW5zdXJlQ3JlYXRlTGF5b3V0Q29udGV4dCIsIlJlYWN0NiIsIlJlYWN0NSIsIlRyYWNrUmVmQ29udGV4dCIsIlRyYWNrQ29udGV4dCIsInVzZVRyYWNrQ29udGV4dCIsInVzZVRyYWNrUmVmQ29udGV4dCIsInVzZU1heWJlVHJhY2tDb250ZXh0IiwidXNlTWF5YmVUcmFja1JlZkNvbnRleHQiLCJ1c2VFbnN1cmVUcmFja1JlZmVyZW5jZSIsInRyYWNrIiwidXNlRW5zdXJlVHJhY2tSZWYiLCJ0cmFja1JlZiIsImNvbnRleHQiLCJyZWYiLCJQYXJ0aWNpcGFudENvbnRleHQiLCJ1c2VQYXJ0aWNpcGFudENvbnRleHQiLCJwYXJ0aWNpcGFudCIsInVzZU1heWJlUGFydGljaXBhbnRDb250ZXh0IiwidXNlRW5zdXJlUGFydGljaXBhbnQiLCJ0cmFja0NvbnRleHQiLCJwIiwiUmVhY3Q3IiwiUm9vbUNvbnRleHQiLCJ1c2VSb29tQ29udGV4dCIsImN0eCIsInVzZU1heWJlUm9vbUNvbnRleHQiLCJ1c2VFbnN1cmVSb29tIiwicm9vbSIsInIiLCJSZWFjdDgiLCJMS0ZlYXR1cmVDb250ZXh0IiwidXNlRmVhdHVyZUNvbnRleHQiLCJyZXF1aXJlMiIsInVzZUF1ZGlvUGxheWJhY2siLCJyb29tRW5zdXJlZCIsInN0YXJ0QXVkaW8iLCJ1c2VNZW1vIiwiY2FuUGxheUF1ZGlvIiwiY2FuUGxheWJhY2tBdWRpbyIsInNldHVwQ2xlYXJQaW5CdXR0b24iLCJSZWFjdDEwIiwiY2xzeCIsImNoYWluIiwiYXJncyIsIm1lcmdlUHJvcHMiLCJyZXN1bHQiLCJwcm9wcyIsImNoYXJDb2RlQXQiLCJ1c2VDbGVhclBpbkJ1dHRvbiIsImJ1dHRvblByb3BzIiwiY2xhc3NOYW1lIiwibWVyZ2VkUHJvcHMiLCJkaXNhYmxlZCIsIm9uQ2xpY2siLCJzZXR1cENvbm5lY3Rpb25RdWFsaXR5SW5kaWNhdG9yIiwiQ29ubmVjdGlvblF1YWxpdHkiLCJSZWFjdDExIiwidXNlQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IiLCJvcHRpb25zIiwiY29ubmVjdGlvblF1YWxpdHlPYnNlcnZlciIsInF1YWxpdHkiLCJVbmtub3duIiwiY29ubmVjdGlvblN0YXRlT2JzZXJ2ZXIiLCJSZWFjdDEyIiwidXNlQ29ubmVjdGlvblN0YXRlIiwiY29ubmVjdGlvblN0YXRlIiwic2V0dXBEYXRhTWVzc2FnZUhhbmRsZXIiLCJSZWFjdDEzIiwidXNlRGF0YUNoYW5uZWwiLCJ0b3BpY09yQ2FsbGJhY2siLCJvbk1lc3NhZ2UiLCJ0b3BpYyIsInNlbmQiLCJtZXNzYWdlT2JzZXJ2YWJsZSIsImlzU2VuZGluZ09ic2VydmFibGUiLCJtZXNzYWdlIiwiaXNTZW5kaW5nIiwic2V0dXBEaXNjb25uZWN0QnV0dG9uIiwiQ29ubmVjdGlvblN0YXRlIiwiUmVhY3QxNCIsInVzZURpc2Nvbm5lY3RCdXR0b24iLCJkaXNjb25uZWN0Iiwic3RvcFRyYWNrcyIsIkRpc2Nvbm5lY3RlZCIsIkxvY2FsVHJhY2tQdWJsaWNhdGlvbiIsImZhY2luZ01vZGVGcm9tTG9jYWxUcmFjayIsInVzZUZhY2luZ01vZGUiLCJwdWJsaWNhdGlvbiIsImxvY2FsVHJhY2siLCJmYWNpbmdNb2RlIiwic2V0dXBGb2N1c1RvZ2dsZSIsImlzVHJhY2tSZWZlcmVuY2VQaW5uZWQiLCJSZWFjdDE1IiwidXNlRm9jdXNUb2dnbGUiLCJ0cmFja1NvdXJjZSIsImluRm9jdXMiLCJnZXRUcmFjayIsImV2ZW50IiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJHUklEX0xBWU9VVFMiLCJzZWxlY3RHcmlkTGF5b3V0IiwiUmVhY3QxNiIsInVzZUdyaWRMYXlvdXQiLCJncmlkRWxlbWVudCIsInRyYWNrQ291bnQiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiY29sdW1ucyIsInRvU3RyaW5nIiwicm93cyIsImdldFRyYWNrUmVmZXJlbmNlSWQiLCJtdXRlZE9ic2VydmVyIiwiUmVhY3QxNyIsInVzZUlzTXV0ZWQiLCJzb3VyY2VPclRyYWNrUmVmIiwicGFzc2VkUGFydGljaXBhbnQiLCJpc011dGVkIiwic2V0SXNNdXRlZCIsImxpc3RlbmVyIiwiY3JlYXRlSXNTcGVha2luZ09ic2VydmVyIiwiUmVhY3QxOCIsInVzZUlzU3BlYWtpbmciLCJpc1NwZWFraW5nIiwibG9nIiwic2V0dXBMaXZlS2l0Um9vbSIsIlJvb20iLCJNZWRpYURldmljZUZhaWx1cmUiLCJSb29tRXZlbnQiLCJDb25uZWN0aW9uU3RhdGUyIiwiUmVhY3QxOSIsImRlZmF1bHRSb29tUHJvcHMiLCJjb25uZWN0IiwiYXVkaW8iLCJ2aWRlbyIsInVzZUxpdmVLaXRSb29tIiwidG9rZW4iLCJzZXJ2ZXJVcmwiLCJwYXNzZWRSb29tIiwiY29ubmVjdE9wdGlvbnMiLCJzY3JlZW4iLCJvbkNvbm5lY3RlZCIsIm9uRGlzY29ubmVjdGVkIiwib25FcnJvciIsIm9uTWVkaWFEZXZpY2VGYWlsdXJlIiwib25FbmNyeXB0aW9uRXJyb3IiLCJzaW11bGF0ZVBhcnRpY2lwYW50cyIsInJlc3QiLCJ3YXJuIiwic2V0Um9vbSIsImh0bWxQcm9wcyIsIm9uU2lnbmFsQ29ubmVjdGVkIiwibG9jYWxQIiwibG9jYWxQYXJ0aWNpcGFudCIsImRlYnVnIiwiYWxsIiwic2V0TWljcm9waG9uZUVuYWJsZWQiLCJzZXRDYW1lcmFFbmFibGVkIiwic2V0U2NyZWVuU2hhcmVFbmFibGVkIiwiY2F0Y2giLCJoYW5kbGVNZWRpYURldmljZUVycm9yIiwibWVkaWFEZXZpY2VGYWlsdXJlIiwiZ2V0RmFpbHVyZSIsImhhbmRsZUVuY3J5cHRpb25FcnJvciIsIm9uIiwiU2lnbmFsQ29ubmVjdGVkIiwiTWVkaWFEZXZpY2VzRXJyb3IiLCJFbmNyeXB0aW9uRXJyb3IiLCJvZmYiLCJwYXJ0aWNpcGFudHMiLCJwdWJsaXNoIiwidXNlUmVhbFRyYWNrcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25uZWN0aW9uU3RhdGVDaGFuZ2VMaXN0ZW5lciIsIkNvbm5lY3RlZCIsIkNvbm5lY3Rpb25TdGF0ZUNoYW5nZWQiLCJpbmZvIiwib2JzZXJ2ZVBhcnRpY2lwYW50TWVkaWEiLCJSZWFjdDIwIiwidXNlTG9jYWxQYXJ0aWNpcGFudCIsInNldExvY2FsUGFydGljaXBhbnQiLCJpc01pY3JvcGhvbmVFbmFibGVkIiwic2V0SXNNaWNyb3Bob25lRW5hYmxlZCIsImlzQ2FtZXJhRW5hYmxlZCIsInNldElzQ2FtZXJhRW5hYmxlZCIsImxhc3RNaWNyb3Bob25lRXJyb3IiLCJzZXRMYXN0TWljcm9waG9uZUVycm9yIiwibGFzdENhbWVyYUVycm9yIiwic2V0TGFzdENhbWVyYUVycm9yIiwiaXNTY3JlZW5TaGFyZUVuYWJsZWQiLCJzZXRJc1NjcmVlblNoYXJlRW5hYmxlZCIsIm1pY3JvcGhvbmVUcmFjayIsInNldE1pY3JvcGhvbmVUcmFjayIsImNhbWVyYVRyYWNrIiwic2V0Q2FtZXJhVHJhY2siLCJoYW5kbGVVcGRhdGUiLCJtZWRpYSIsInBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyIiwiUmVhY3QyMSIsInVzZUxvY2FsUGFydGljaXBhbnRQZXJtaXNzaW9ucyIsInBlcm1pc3Npb25PYnNlcnZlciIsInBlcm1pc3Npb25zIiwiY3JlYXRlTWVkaWFEZXZpY2VPYnNlcnZlciIsInNldHVwRGV2aWNlU2VsZWN0b3IiLCJsb2cyIiwiUmVhY3QyMiIsInVzZU1lZGlhRGV2aWNlU2VsZWN0Iiwia2luZCIsInJlcXVlc3RQZXJtaXNzaW9ucyIsInJvb21Db250ZXh0IiwiZGV2aWNlT2JzZXJ2ZXIiLCJkZXZpY2VzIiwiY3VycmVudERldmljZUlkIiwic2V0Q3VycmVudERldmljZUlkIiwiYWN0aXZlRGV2aWNlT2JzZXJ2YWJsZSIsInNldEFjdGl2ZU1lZGlhRGV2aWNlIiwiZGV2aWNlSWQiLCJhY3RpdmVEZXZpY2VJZCIsIlJlYWN0MjMiLCJjcmVhdGVNZWRpYURldmljZU9ic2VydmVyMiIsInVzZU1lZGlhRGV2aWNlcyIsImlzVHJhY2tSZWZlcmVuY2UiLCJzZXR1cE1lZGlhVHJhY2siLCJsb2c0IiwiaXNMb2NhbCIsImdldFRyYWNrQnlJZGVudGlmaWVyIiwiUmVhY3QyNSIsIlJlYWN0MjQiLCJsb2czIiwiaXNQcm9wIiwibWVyZ2VQcm9wczIiLCJmaWx0ZXIiLCJjbG9uZVNpbmdsZUNoaWxkIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsIm1hcCIsImNoaWxkIiwiaXNWYWxpZEVsZW1lbnQiLCJvbmx5IiwiY2xvbmVFbGVtZW50Iiwid2FybkFib3V0TWlzc2luZ1N0eWxlcyIsImVsIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ1c2VNZWRpYVRyYWNrQnlTb3VyY2VPck5hbWUiLCJvYnNlcnZlck9wdGlvbnMiLCJzZXRQdWJsaWNhdGlvbiIsInNldE11dGVkIiwiaXNTdWJzY3JpYmVkIiwic2V0U3Vic2NyaWJlZCIsInNldFRyYWNrIiwib3JpZW50YXRpb24iLCJzZXRPcmllbnRhdGlvbiIsInByZXZpb3VzRWxlbWVudCIsInVzZVJlZiIsInRyYWNrT2JzZXJ2ZXIiLCJzaWQiLCJpZGVudGl0eSIsInRyYWNrU2lkIiwicHVibGljYXRpb24yIiwiX2EyIiwiZGV0YWNoIiwiZWxlbWVudCIsImF0dGFjaCIsImRpbWVuc2lvbnMiLCJvcmllbnRhdGlvbl8iLCJlbGVtZW50UHJvcHMiLCJ1c2VNZWRpYVRyYWNrIiwidXNlTWVkaWFUcmFja0J5TmFtZSIsIm5hbWUiLCJSZWFjdDI3IiwibG9nNSIsInNvcnRUcmFja1JlZmVyZW5jZXMiLCJ1cGRhdGVQYWdlcyIsIlJlYWN0MjYiLCJ1c2VWaXN1YWxTdGFibGVVcGRhdGUiLCJ0cmFja1JlZmVyZW5jZXMiLCJtYXhJdGVtc09uUGFnZSIsImxhc3RUcmFja1JlZnMiLCJsYXN0TWF4SXRlbXNPblBhZ2UiLCJsYXlvdXRDaGFuZ2VkIiwic29ydGVkVHJhY2tSZWZzIiwiY3VzdG9tU29ydEZ1bmN0aW9uIiwidXBkYXRlZFRyYWNrUmVmcyIsImVycm9yIiwidXNlUGFnaW5hdGlvbiIsIml0ZW1QZXJQYWdlIiwiY3VycmVudFBhZ2UiLCJzZXRDdXJyZW50UGFnZSIsInRvdGFsUGFnZUNvdW50IiwiTWF0aCIsIm1heCIsImNlaWwiLCJsYXN0SXRlbUluZGV4IiwiZmlyc3RJdGVtSW5kZXgiLCJjaGFuZ2VQYWdlIiwiZGlyZWN0aW9uIiwiZ29Ub1BhZ2UiLCJudW0iLCJ1cGRhdGVkVHJhY2tSZWZlcmVuY2VzIiwidHJhY2tzT25QYWdlIiwic2xpY2UiLCJuZXh0UGFnZSIsInByZXZQYWdlIiwic2V0UGFnZSIsInRyYWNrcyIsInBhcnRpY2lwYW50SW5mb09ic2VydmVyIiwiUmVhY3QyOCIsInVzZVBhcnRpY2lwYW50SW5mbyIsImluZm9PYnNlcnZlciIsIm1ldGFkYXRhIiwiUmVhY3QyOSIsInBhcnRpY2lwYW50UGVybWlzc2lvbk9ic2VydmVyMiIsInVzZVBhcnRpY2lwYW50UGVybWlzc2lvbnMiLCJzZXR1cFBhcnRpY2lwYW50VGlsZSIsIlRyYWNrIiwiUmVhY3QzMCIsInVzZVBhcnRpY2lwYW50VGlsZSIsIm9uUGFydGljaXBhbnRDbGljayIsImRpc2FibGVTcGVha2luZ0luZGljYXRvciIsIm1heWJlVHJhY2tSZWYiLCJfZiIsIl9zb3VyY2UiLCJpc1ZpZGVvTXV0ZWQiLCJTb3VyY2UiLCJDYW1lcmEiLCJpc0F1ZGlvTXV0ZWQiLCJNaWNyb3Bob25lIiwiY29ubmVjdGVkUGFydGljaXBhbnRzT2JzZXJ2ZXIiLCJSZWFjdDMxIiwidXNlUmVtb3RlUGFydGljaXBhbnRzIiwic2V0UGFydGljaXBhbnRzIiwiYWRkaXRpb25hbFJvb21FdmVudHMiLCJ1cGRhdGVPbmx5T24iLCJ1c2VQYXJ0aWNpcGFudHMiLCJyZW1vdGVQYXJ0aWNpcGFudHMiLCJSZWFjdDMyIiwidXNlUGlubmVkVHJhY2tzIiwiY29ubmVjdGVkUGFydGljaXBhbnRPYnNlcnZlciIsIlJlYWN0MzMiLCJ1c2VSZW1vdGVQYXJ0aWNpcGFudCIsImFkZGl0aW9uYWxFdmVudHMiLCJnZXRQYXJ0aWNpcGFudEJ5SWRlbnRpdHkiLCJyb29tSW5mb09ic2VydmVyIiwiUmVhY3QzNCIsInVzZVJvb21JbmZvIiwic29ydFBhcnRpY2lwYW50cyIsIlJlYWN0MzYiLCJhY3RpdmVTcGVha2VyT2JzZXJ2ZXIiLCJSZWFjdDM1IiwidXNlU3BlYWtpbmdQYXJ0aWNpcGFudHMiLCJzcGVha2VyT2JzZXJ2ZXIiLCJhY3RpdmVTcGVha2VycyIsInVzZVNvcnRlZFBhcnRpY2lwYW50cyIsInNvcnRlZFBhcnRpY2lwYW50cyIsInNldFNvcnRlZFBhcnRpY2lwYW50cyIsInNldHVwU3RhcnRBdWRpbyIsIlJlYWN0MzciLCJ1c2VTdGFydEF1ZGlvIiwicm9vbUF1ZGlvUGxheWJhY2tBbGxvd2VkT2JzZXJ2YWJsZTIiLCJoYW5kbGVTdGFydEF1ZGlvUGxheWJhY2siLCJkaXNwbGF5Iiwic2V0dXBTdGFydFZpZGVvIiwiUmVhY3QzOCIsInVzZVN0YXJ0VmlkZW8iLCJyb29tVmlkZW9QbGF5YmFja0FsbG93ZWRPYnNlcnZhYmxlIiwiaGFuZGxlU3RhcnRWaWRlb1BsYXliYWNrIiwiY2FuUGxheVZpZGVvIiwiY2FuUGxheWJhY2tWaWRlbyIsIlJlYWN0MzkiLCJ1c2VTd2lwZSIsInRvdWNoU3RhcnQiLCJ0b3VjaEVuZCIsIm1pblN3aXBlRGlzdGFuY2UiLCJvblRvdWNoU3RhcnQiLCJ0YXJnZXRUb3VjaGVzIiwiY2xpZW50WCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsImRpc3RhbmNlIiwiaXNMZWZ0U3dpcGUiLCJpc1JpZ2h0U3dpcGUiLCJvbkxlZnRTd2lwZSIsIm9uUmlnaHRTd2lwZSIsImVsZW1lbnRDb3B5IiwicGFzc2l2ZSIsInNldHVwQ2hhdFRvZ2dsZSIsIlJlYWN0NDAiLCJ1c2VDaGF0VG9nZ2xlIiwidG9GaXhlZCIsImxvZzYiLCJSZWFjdDQxIiwidXNlVG9rZW4iLCJ0b2tlbkVuZHBvaW50Iiwicm9vbU5hbWUiLCJzZXRUb2tlbiIsInVzZXJJbmZvIiwidG9rZW5GZXRjaGVyIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwicmVzIiwiZmV0Y2giLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJhY2Nlc3NUb2tlbiIsImpzb24iLCJzZXR1cFRyYWNrTXV0ZWRJbmRpY2F0b3IiLCJnZXRUcmFja1JlZmVyZW5jZUlkMiIsIlJlYWN0NDIiLCJ1c2VUcmFja011dGVkSW5kaWNhdG9yIiwidHJhY2tSZWZPclNvdXJjZSIsIm1lZGlhTXV0ZWRPYnNlcnZlciIsInNldHVwTWVkaWFUb2dnbGUiLCJzZXR1cE1hbnVhbFRvZ2dsZSIsImxvZzciLCJSZWFjdDQzIiwidXNlVHJhY2tUb2dnbGUiLCJvbkNoYW5nZSIsImluaXRpYWxTdGF0ZSIsImNhcHR1cmVPcHRpb25zIiwidXNlckludGVyYWN0aW9uUmVmIiwidG9nZ2xlIiwicGVuZGluZ09ic2VydmVyIiwiZW5hYmxlZE9ic2VydmVyIiwicGVuZGluZyIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJuZXdQcm9wcyIsImNsaWNrSGFuZGxlciIsImV2dCIsIl9hMyIsImZpbmFsbHkiLCJpc1NvdXJjZXNXaXRoT3B0aW9ucyIsImlzU291cmNlV2l0T3B0aW9ucyIsImxvZzgiLCJ0cmFja1JlZmVyZW5jZXNPYnNlcnZhYmxlIiwiVHJhY2syIiwiUmVhY3Q0NCIsInVzZVRyYWNrcyIsInNvdXJjZXMiLCJTY3JlZW5TaGFyZSIsIlNjcmVlblNoYXJlQXVkaW8iLCJzZXRUcmFja1JlZmVyZW5jZXMiLCJzb3VyY2VzXyIsInMiLCJvbmx5U3Vic2NyaWJlZCIsInRyYWNrUmVmZXJlbmNlczIiLCJwYXJ0aWNpcGFudHMyIiwibWF5YmVUcmFja1JlZmVyZW5jZXMiLCJyZXF1aXJlUGxhY2Vob2xkZXIiLCJyZXF1aXJlZFBsYWNlaG9sZGVycyIsInRyYWNrUmVmZXJlbmNlc1dpdGhQbGFjZWhvbGRlcnMiLCJBcnJheSIsImZyb20iLCJzb3VyY2VzVG9BZGRQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyU291cmNlIiwiZmluZCIsInBsYWNlaG9sZGVyIiwiZGlmZmVyZW5jZSIsInNldEEiLCJzZXRCIiwiX2RpZmZlcmVuY2UiLCJlbGVtIiwicGxhY2Vob2xkZXJNYXAiLCJzb3VyY2VzVGhhdE5lZWRQbGFjZWhvbGRlciIsInNvdXJjZVdpdGhPcHRpb24iLCJ3aXRoUGxhY2Vob2xkZXIiLCJzb3VyY2VzT2ZTdWJzY3JpYmVkVHJhY2tzIiwiZ2V0VHJhY2tzIiwicHViIiwicGxhY2Vob2xkZXJOZWVkZWRGb3JUaGlzUGFydGljaXBhbnQiLCJ1c2VUcmFjayIsInVzZVRyYWNrQnlOYW1lIiwic2V0dXBDaGF0IiwiUmVhY3Q0NSIsInVzZUNoYXQiLCJzZXR1cCIsInNldFNldHVwIiwiY2hhdE1lc3NhZ2VzIiwic2V0dXBDaGF0UmV0dXJuIiwidXBkYXRlIiwibG9hZFVzZXJDaG9pY2VzIiwic2F2ZVVzZXJDaG9pY2VzIiwiUmVhY3Q0NiIsInVzZVBlcnNpc3RlbnRVc2VyQ2hvaWNlcyIsInVzZXJDaG9pY2VzIiwic2V0U2V0dGluZ3MiLCJkZWZhdWx0cyIsInByZXZlbnRMb2FkIiwic2F2ZUF1ZGlvSW5wdXRFbmFibGVkIiwicHJldiIsImF1ZGlvRW5hYmxlZCIsInNhdmVWaWRlb0lucHV0RW5hYmxlZCIsInZpZGVvRW5hYmxlZCIsInNhdmVBdWRpb0lucHV0RGV2aWNlSWQiLCJhdWRpb0RldmljZUlkIiwic2F2ZVZpZGVvSW5wdXREZXZpY2VJZCIsInZpZGVvRGV2aWNlSWQiLCJzYXZlVXNlcm5hbWUiLCJ1c2VybmFtZSIsInByZXZlbnRTYXZlIiwiUmVhY3Q0NyIsIkxvY2FsUGFydGljaXBhbnQiLCJlbmNyeXB0aW9uU3RhdHVzT2JzZXJ2YWJsZSIsInVzZUlzRW5jcnlwdGVkIiwiaXNFbmNyeXB0ZWQiLCJpc0UyRUVFbmFibGVkIiwiUmVhY3Q0OCIsIlRyYWNrMyIsImNyZWF0ZUF1ZGlvQW5hbHlzZXIiLCJpc1RyYWNrUmVmZXJlbmNlMiIsInVzZVRyYWNrVm9sdW1lIiwidHJhY2tPclRyYWNrUmVmZXJlbmNlIiwiZmZ0U2l6ZSIsInNtb290aGluZ1RpbWVDb25zdGFudCIsInZvbHVtZSIsInNldFZvbHVtZSIsIm1lZGlhU3RyZWFtIiwiY2xlYW51cCIsImFuYWx5c2VyIiwiYnVmZmVyTGVuZ3RoIiwiZnJlcXVlbmN5QmluQ291bnQiLCJkYXRhQXJyYXkiLCJVaW50OEFycmF5IiwidXBkYXRlVm9sdW1lIiwiZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEiLCJzdW0iLCJzcXJ0IiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJub3JtYWxpemVGcmVxdWVuY2llcyIsImZyZXF1ZW5jaWVzIiwibm9ybWFsaXplRGIiLCJtaW5EYiIsIm1heERiIiwiZGIiLCJtaW4iLCJJbmZpbml0eSIsIm11bHRpYmFuZERlZmF1bHRzIiwiYmFuZHMiLCJsb1Bhc3MiLCJoaVBhc3MiLCJ1cGRhdGVJbnRlcnZhbCIsImFuYWx5c2VyT3B0aW9ucyIsInVzZU11bHRpYmFuZFRyYWNrVm9sdW1lIiwiZnJlcXVlbmN5QmFuZHMiLCJzZXRGcmVxdWVuY3lCYW5kcyIsIm9wdHMiLCJGbG9hdDMyQXJyYXkiLCJnZXRGbG9hdEZyZXF1ZW5jeURhdGEiLCJub3JtYWxpemVkRnJlcXVlbmNpZXMiLCJjaHVua1NpemUiLCJjaHVua3MiLCJzdW1tZWRWb2x1bWVzIiwicmVkdWNlIiwiYWNjIiwidmFsIiwiQ2xlYXJQaW5CdXR0b24iLCJjcmVhdGVFbGVtZW50IiwiUmVhY3Q1MCIsIkNvbm5lY3Rpb25TdGF0ZTMiLCJSZWFjdDUxIiwiQ2hhdFRvZ2dsZSIsIlJlYWN0NTIiLCJEaXNjb25uZWN0QnV0dG9uIiwiUmVhY3Q3MiIsIlJlYWN0NTMiLCJTdmdDYW1lcmFEaXNhYmxlZEljb24iLCJ4bWxucyIsImZpbGwiLCJkIiwiQ2FtZXJhRGlzYWJsZWRJY29uX2RlZmF1bHQiLCJSZWFjdDU0IiwiU3ZnQ2FtZXJhSWNvbiIsIkNhbWVyYUljb25fZGVmYXVsdCIsIlJlYWN0NTUiLCJTdmdDaGF0Q2xvc2VJY29uIiwidmlld0JveCIsIkNoYXRDbG9zZUljb25fZGVmYXVsdCIsIlJlYWN0NTYiLCJTdmdDaGF0SWNvbiIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJDaGF0SWNvbl9kZWZhdWx0IiwiUmVhY3Q1NyIsIlN2Z0NoZXZyb24iLCJDaGV2cm9uX2RlZmF1bHQiLCJSZWFjdDU4IiwiU3ZnRm9jdXNUb2dnbGVJY29uIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3Ryb2tlV2lkdGgiLCJGb2N1c1RvZ2dsZUljb25fZGVmYXVsdCIsIlJlYWN0NTkiLCJTdmdHZWFySWNvbiIsIkdlYXJJY29uX2RlZmF1bHQiLCJSZWFjdDYwIiwiU3ZnTGVhdmVJY29uIiwiTGVhdmVJY29uX2RlZmF1bHQiLCJSZWFjdDYxIiwiU3ZnTG9ja0xvY2tlZEljb24iLCJMb2NrTG9ja2VkSWNvbl9kZWZhdWx0IiwiUmVhY3Q2MiIsIlN2Z01pY0Rpc2FibGVkSWNvbiIsIk1pY0Rpc2FibGVkSWNvbl9kZWZhdWx0IiwiUmVhY3Q2MyIsIlN2Z01pY0ljb24iLCJNaWNJY29uX2RlZmF1bHQiLCJSZWFjdDY0IiwiU3ZnUXVhbGl0eUV4Y2VsbGVudEljb24iLCJRdWFsaXR5RXhjZWxsZW50SWNvbl9kZWZhdWx0IiwiUmVhY3Q2NSIsIlN2Z1F1YWxpdHlHb29kSWNvbiIsIm9wYWNpdHkiLCJRdWFsaXR5R29vZEljb25fZGVmYXVsdCIsIlJlYWN0NjYiLCJTdmdRdWFsaXR5UG9vckljb24iLCJRdWFsaXR5UG9vckljb25fZGVmYXVsdCIsIlJlYWN0NjciLCJTdmdRdWFsaXR5VW5rbm93bkljb24iLCJRdWFsaXR5VW5rbm93bkljb25fZGVmYXVsdCIsIlJlYWN0NjgiLCJTdmdTY3JlZW5TaGFyZUljb24iLCJTY3JlZW5TaGFyZUljb25fZGVmYXVsdCIsIlJlYWN0NjkiLCJTdmdTY3JlZW5TaGFyZVN0b3BJY29uIiwiU2NyZWVuU2hhcmVTdG9wSWNvbl9kZWZhdWx0IiwiUmVhY3Q3MCIsIlN2Z1NwaW5uZXJJY29uIiwiU3Bpbm5lckljb25fZGVmYXVsdCIsIlJlYWN0NzEiLCJTdmdVbmZvY3VzVG9nZ2xlSWNvbiIsIlVuZm9jdXNUb2dnbGVJY29uX2RlZmF1bHQiLCJGb2N1c1RvZ2dsZSIsInRyYWNrUmVmRnJvbUNvbnRleHQiLCJDb25zdW1lciIsIlJlYWN0NzMiLCJSb29tRXZlbnQyIiwiTWVkaWFEZXZpY2VTZWxlY3QiLCJpbml0aWFsU2VsZWN0aW9uIiwib25BY3RpdmVEZXZpY2VDaGFuZ2UiLCJvbkRldmljZUxpc3RDaGFuZ2UiLCJvbkRldmljZVNlbGVjdEVycm9yIiwiZXhhY3RNYXRjaCIsImhhbmRsZUVycm9yIiwiZW1pdCIsImhhbmRsZUFjdGl2ZURldmljZUNoYW5nZSIsImV4YWN0IiwiaXNBY3RpdmUiLCJhY3RpdmVEZXZpY2VJZDIiLCJpbmRleCIsImRldmljZSIsImlkIiwicm9sZSIsImxhYmVsIiwiUmVhY3Q3NCIsIlN0YXJ0QXVkaW8iLCJSZWFjdDc2IiwiUmVhY3Q3NSIsIkNvbm5lY3Rpb25RdWFsaXR5MiIsIlRyYWNrNCIsImdldFNvdXJjZUljb24iLCJnZXRDb25uZWN0aW9uUXVhbGl0eUljb24iLCJFeGNlbGxlbnQiLCJHb29kIiwiUG9vciIsIlRyYWNrVG9nZ2xlIiwic2hvd0ljb24iLCJSZWFjdDg0IiwiUmVhY3Q4MyIsIlRyYWNrNSIsImlzVHJhY2tSZWZlcmVuY2UzIiwiaXNUcmFja1JlZmVyZW5jZVBpbm5lZDIiLCJSZWFjdDc3IiwiQ29ubmVjdGlvblF1YWxpdHlJbmRpY2F0b3IiLCJzZXR1cFBhcnRpY2lwYW50TmFtZSIsIlJlYWN0NzgiLCJQYXJ0aWNpcGFudE5hbWUiLCJSZWFjdDc5IiwiVHJhY2tNdXRlZEluZGljYXRvciIsInNob3ciLCJfYjIiLCJzaG93SW5kaWNhdG9yIiwiUmVhY3Q4MCIsIlN2Z1BhcnRpY2lwYW50UGxhY2Vob2xkZXIiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwiZmlsbE9wYWNpdHkiLCJQYXJ0aWNpcGFudFBsYWNlaG9sZGVyX2RlZmF1bHQiLCJSZW1vdGVUcmFja1B1YmxpY2F0aW9uIiwiUmVhY3Q4MSIsInVzZUhvb2tzIiwiVmlkZW9UcmFjayIsIm9uVHJhY2tDbGljayIsIm9uU3Vic2NyaXB0aW9uU3RhdHVzQ2hhbmdlZCIsIm1hbmFnZVN1YnNjcmlwdGlvbiIsIl9nIiwiX2giLCJfaSIsIl9qIiwiX25hbWUiLCJ0cmFja05hbWUiLCJfcHVibGljYXRpb24iLCJfcGFydGljaXBhbnQiLCJtZWRpYUVsIiwiaW50ZXJzZWN0aW9uRW50cnkiLCJ1c2VJbnRlcnNlY3Rpb25PYnNlcnZlciIsImRlYm91bmNlZEludGVyc2VjdGlvbkVudHJ5IiwidXNlRGVib3VuY2UiLCJpc0ludGVyc2VjdGluZyIsIm11dGVkIiwiUmVhY3Q4MiIsImxvZzkiLCJSZW1vdGVBdWRpb1RyYWNrIiwiUmVtb3RlVHJhY2tQdWJsaWNhdGlvbjIiLCJBdWRpb1RyYWNrIiwic2V0RW5hYmxlZCIsIlBhcnRpY2lwYW50Q29udGV4dElmTmVlZGVkIiwiaGFzQ29udGV4dCIsIlByb3ZpZGVyIiwiRnJhZ21lbnQiLCJUcmFja1JlZkNvbnRleHRJZk5lZWRlZCIsIlBhcnRpY2lwYW50VGlsZSIsIl9iMyIsImF1dG9NYW5hZ2VTdWJzY3JpcHRpb24iLCJhdXRvU3Vic2NyaXB0aW9uIiwiaGFuZGxlU3Vic2NyaWJlIiwic3Vic2NyaWJlZCIsInBvc2l0aW9uIiwibWFyZ2luUmlnaHQiLCJGb2N1c0xheW91dENvbnRhaW5lciIsIkZvY3VzTGF5b3V0IiwiUmVhY3Q4OCIsIlJlYWN0ODUiLCJnZXRUcmFja1JlZmVyZW5jZUlkMyIsIlRyYWNrTG9vcCIsIlJlYWN0ODYiLCJjcmVhdGVJbnRlcmFjdGluZ09ic2VydmFibGUiLCJQYWdpbmF0aW9uQ29udHJvbCIsInBhZ2VzQ29udGFpbmVyIiwiY29ubmVjdGVkRWxlbWVudCIsImludGVyYWN0aXZlIiwic2V0SW50ZXJhY3RpdmUiLCJSZWFjdDg3IiwiUGFnaW5hdGlvbkluZGljYXRvciIsImJ1YmJsZXMiLCJfIiwiR3JpZExheW91dCIsImdyaWRFbCIsImNyZWF0ZVJlZiIsInBhZ2luYXRpb24iLCJtYXhUaWxlcyIsImdldFNjcm9sbEJhcldpZHRoIiwiUmVhY3Q4OSIsIk1JTl9IRUlHSFQiLCJNSU5fV0lEVEgiLCJNSU5fVklTSUJMRV9USUxFUyIsIkFTUEVDVF9SQVRJTyIsIkFTUEVDVF9SQVRJT19JTlZFUlQiLCJDYXJvdXNlbFZpZXciLCJDYXJvdXNlbExheW91dCIsImFzaWRlRWwiLCJwcmV2VGlsZXMiLCJzZXRQcmV2VGlsZXMiLCJjYXJvdXNlbE9yaWVudGF0aW9uIiwidGlsZVNwYW4iLCJzY3JvbGxCYXJXaWR0aCIsInRpbGVzVGhhdEZpdCIsIm1heFZpc2libGVUaWxlcyIsInJvdW5kIiwiYWJzIiwic29ydGVkVGlsZXMiLCJkYXRhc2V0IiwibGtPcmllbnRhdGlvbiIsImxvZzEwIiwiUmVhY3Q5MCIsIkxheW91dENvbnRleHRQcm92aWRlciIsIm9uUGluQ2hhbmdlIiwib25XaWRnZXRDaGFuZ2UiLCJsYXlvdXRDb250ZXh0VmFsdWUiLCJSZWFjdDkxIiwiTGl2ZUtpdFJvb20iLCJmZWF0dXJlRmxhZ3MiLCJUcmFjazYiLCJSZWFjdDkyIiwiQXVkaW9WaXN1YWxpemVyIiwic3ZnV2lkdGgiLCJzdmdIZWlnaHQiLCJiYXJXaWR0aCIsImJhclNwYWNpbmciLCJ2b2xNdWx0aXBsaWVyIiwiYmFyQ291bnQiLCJ2b2x1bWVzIiwieSIsInRyYW5zZm9ybSIsInZvbCIsImlkeCIsIlJlYWN0OTMiLCJQYXJ0aWNpcGFudExvb3AiLCJnZXRUcmFja1JlZmVyZW5jZUlkNCIsImlzTG9jYWwyIiwiVHJhY2s3IiwiUmVhY3Q5NCIsIlJvb21BdWRpb1JlbmRlcmVyIiwiS2luZCIsIkF1ZGlvIiwiUmVhY3Q5NSIsIlJvb21OYW1lIiwiY2hpbGRyZW5Qb3NpdGlvbiIsImh0bWxBdHRyaWJ1dGVzIiwiUmVhY3Q5NiIsIlRvYXN0IiwiUmVhY3Q5NyIsIlRyYWNrOCIsIlBhcnRpY2lwYW50QXVkaW9UaWxlIiwiQ29ubmVjdGlvblN0YXRlNCIsIlJlYWN0OTgiLCJDb25uZWN0aW9uU3RhdGVUb2FzdCIsIm5vdGlmaWNhdGlvbiIsInNldE5vdGlmaWNhdGlvbiIsIlJlY29ubmVjdGluZyIsIkNvbm5lY3RpbmciLCJ0b2tlbml6ZSIsImNyZWF0ZURlZmF1bHRHcmFtbWFyIiwiUmVhY3Q5OSIsIkNoYXRFbnRyeSIsImhpZGVOYW1lIiwiaGlkZVRpbWVzdGFtcCIsIm1lc3NhZ2VGb3JtYXR0ZXIiLCJmb3JtYXR0ZWRNZXNzYWdlIiwiaGFzQmVlbkVkaXRlZCIsImVkaXRUaW1lc3RhbXAiLCJ0aW1lIiwiRGF0ZSIsInRpbWVzdGFtcCIsImxvY2FsZSIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwidGl0bGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ0aW1lU3R5bGUiLCJmb3JtYXRDaGF0TWVzc2FnZUxpbmtzIiwidG9rIiwiY29udGVudCIsImhyZWYiLCJ0eXBlIiwidGVzdCIsInJlbCIsIlJlYWN0MTAwIiwiQ2hhdCIsIm1lc3NhZ2VEZWNvZGVyIiwibWVzc2FnZUVuY29kZXIiLCJjaGFubmVsVG9waWMiLCJpbnB1dFJlZiIsInVsUmVmIiwiY2hhdE9wdGlvbnMiLCJsYXN0UmVhZE1zZ0F0IiwiaGFuZGxlU3VibWl0IiwicHJldmVudERlZmF1bHQiLCJ0cmltIiwiZm9jdXMiLCJzY3JvbGxUbyIsInRvcCIsInNjcm9sbEhlaWdodCIsInVucmVhZE1lc3NhZ2VDb3VudCIsImFsbE1zZyIsIm9uU3VibWl0IiwiY3JlYXRlTG9jYWxBdWRpb1RyYWNrIiwiY3JlYXRlTG9jYWxUcmFja3MiLCJjcmVhdGVMb2NhbFZpZGVvVHJhY2siLCJmYWNpbmdNb2RlRnJvbUxvY2FsVHJhY2syIiwiVHJhY2s5IiwiVmlkZW9QcmVzZXRzIiwiUmVhY3QxMDMiLCJjb21wdXRlTWVudVBvc2l0aW9uIiwid2FzQ2xpY2tPdXRzaWRlIiwiUmVhY3QxMDEiLCJsb2cxMSIsIk1lZGlhRGV2aWNlTWVudSIsImlzT3BlbiIsInNldElzT3BlbiIsInNldERldmljZXMiLCJ1cGRhdGVSZXF1aXJlZCIsInNldFVwZGF0ZVJlcXVpcmVkIiwia2luZDIiLCJidXR0b24iLCJ0b29sdGlwIiwiYXNzaWduIiwibGVmdCIsImhhbmRsZUNsaWNrT3V0c2lkZSIsInZpc2liaWxpdHkiLCJhdWRpb2lucHV0IiwidmlkZW9pbnB1dCIsImxvZzEyIiwiUmVhY3QxMDIiLCJ1c2VXYXJuQWJvdXRNaXNzaW5nU3R5bGVzIiwiREVGQVVMVF9VU0VSX0NIT0lDRVMiLCJlMmVlIiwic2hhcmVkUGFzc3BocmFzZSIsInVzZVByZXZpZXdUcmFja3MiLCJzZXRUcmFja3MiLCJ0cmFja1Byb21pc2UiLCJuZWVkc0NsZWFudXAiLCJ0cmFja3MyIiwidHIiLCJzdG9wIiwidXNlUHJldmlld0RldmljZSIsImRldmljZUVycm9yIiwic2V0RGV2aWNlRXJyb3IiLCJpc0NyZWF0aW5nVHJhY2siLCJzZXRJc0NyZWF0aW5nVHJhY2siLCJzZWxlY3RlZERldmljZSIsInNldFNlbGVjdGVkRGV2aWNlIiwic2V0TG9jYWxUcmFjayIsImxvY2FsRGV2aWNlSWQiLCJzZXRMb2NhbERldmljZUlkIiwiY3JlYXRlVHJhY2siLCJkZXZpY2VJZDIiLCJyZXNvbHV0aW9uIiwiaDcyMCIsIm5ld0RldmljZUlkIiwiZ2V0RGV2aWNlSWQiLCJwcmV2RGV2aWNlSWQiLCJzd2l0Y2hEZXZpY2UiLCJzZXREZXZpY2VJZCIsIm11dGUiLCJtZWRpYVN0cmVhbVRyYWNrIiwidW5tdXRlIiwiZGV2IiwiUHJlSm9pbiIsIm9uVmFsaWRhdGUiLCJqb2luTGFiZWwiLCJtaWNMYWJlbCIsImNhbUxhYmVsIiwidXNlckxhYmVsIiwic2hvd0UyRUVPcHRpb25zIiwicGVyc2lzdFVzZXJDaG9pY2VzIiwic2V0VXNlckNob2ljZXMiLCJwYXJ0aWFsRGVmYXVsdHMiLCJpbml0aWFsVXNlckNob2ljZXMiLCJzZXRBdWRpb0VuYWJsZWQiLCJzZXRWaWRlb0VuYWJsZWQiLCJzZXRBdWRpb0RldmljZUlkIiwic2V0VmlkZW9EZXZpY2VJZCIsInNldFVzZXJuYW1lIiwic2V0RTJlZSIsInNldFNoYXJlZFBhc3NwaHJhc2UiLCJ2aWRlb0VsIiwidmlkZW9UcmFjayIsIlZpZGVvIiwiZmFjaW5nTW9kZTIiLCJhdWRpb1RyYWNrIiwiaXNWYWxpZCIsInNldElzVmFsaWQiLCJoYW5kbGVWYWxpZGF0aW9uIiwidmFsdWVzIiwibmV3VXNlckNob2ljZXMiLCJkZWZhdWx0VmFsdWUiLCJpbnB1dEVsIiwiYXV0b0NvbXBsZXRlIiwiZmxleERpcmVjdGlvbiIsImdhcCIsImNoZWNrZWQiLCJldiIsImh0bWxGb3IiLCJvdmVyZmxvdyIsIm1heFdpZHRoIiwiaXNFcXVhbFRyYWNrUmVmIiwiaXNUcmFja1JlZmVyZW5jZTQiLCJpc1dlYiIsImxvZzEzIiwiUm9vbUV2ZW50MyIsIlRyYWNrMTEiLCJSZWFjdDEwNiIsIlRyYWNrMTAiLCJSZWFjdDEwNSIsInN1cHBvcnRzU2NyZWVuU2hhcmluZyIsIlJlYWN0MTA0IiwiU3RhcnRNZWRpYUJ1dHRvbiIsImF1ZGlvUHJvcHMiLCJyZXN0UHJvcHMiLCJDb250cm9sQmFyIiwidmFyaWF0aW9uIiwiY29udHJvbHMiLCJzYXZlVXNlckNob2ljZXMyIiwiaXNDaGF0T3BlbiIsInNldElzQ2hhdE9wZW4iLCJpc1Rvb0xpdHRsZVNwYWNlIiwiZGVmYXVsdFZhcmlhdGlvbiIsInZpc2libGVDb250cm9scyIsImxlYXZlIiwibG9jYWxQZXJtaXNzaW9ucyIsImNhbWVyYSIsImNoYXQiLCJtaWNyb3Bob25lIiwic2NyZWVuU2hhcmUiLCJjYW5QdWJsaXNoIiwiY2FuUHVibGlzaERhdGEiLCJzaG93VGV4dCIsImJyb3dzZXJTdXBwb3J0c1NjcmVlblNoYXJpbmciLCJvblNjcmVlblNoYXJlQ2hhbmdlIiwibWljcm9waG9uZU9uQ2hhbmdlIiwiaXNVc2VySW5pdGlhdGVkIiwiY2FtZXJhT25DaGFuZ2UiLCJfa2luZCIsInNlbGZCcm93c2VyU3VyZmFjZSIsIlZpZGVvQ29uZmVyZW5jZSIsImNoYXRNZXNzYWdlRm9ybWF0dGVyIiwiY2hhdE1lc3NhZ2VEZWNvZGVyIiwiY2hhdE1lc3NhZ2VFbmNvZGVyIiwic2V0V2lkZ2V0U3RhdGUiLCJsYXN0QXV0b0ZvY3VzZWRTY3JlZW5TaGFyZVRyYWNrIiwiQWN0aXZlU3BlYWtlcnNDaGFuZ2VkIiwid2lkZ2V0VXBkYXRlIiwic2NyZWVuU2hhcmVUcmFja3MiLCJmb2N1c1RyYWNrIiwiY2Fyb3VzZWxUcmFja3MiLCJzb21lIiwibmV3U2NyZWVuU2hhcmVUcmFjayIsIl9hNCIsIl9iNCIsImpvaW4iLCJSZWFjdDEwNyIsIlRyYWNrMTIiLCJBdWRpb0NvbmZlcmVuY2UiLCJhdWRpb1RyYWNrcyIsInNldExvZ0xldmVsIiwic2V0TG9nRXh0ZW5zaW9uIiwiaXNUcmFja1JlZmVyZW5jZTUiLCJDYW1lcmFEaXNhYmxlZEljb24iLCJDYW1lcmFJY29uIiwiQ2hhdENsb3NlSWNvbiIsIkNoYXRJY29uIiwiQ2hldnJvbiIsIkZvY3VzVG9nZ2xlSWNvbiIsIkdlYXJJY29uIiwiTGVhdmVJY29uIiwiTG9ja0xvY2tlZEljb24iLCJNaWNEaXNhYmxlZEljb24iLCJNaWNJY29uIiwiUGFydGljaXBhbnRQbGFjZWhvbGRlciIsIlF1YWxpdHlFeGNlbGxlbnRJY29uIiwiUXVhbGl0eUdvb2RJY29uIiwiUXVhbGl0eVBvb3JJY29uIiwiUXVhbGl0eVVua25vd25JY29uIiwiU2NyZWVuU2hhcmVJY29uIiwiU2NyZWVuU2hhcmVTdG9wSWNvbiIsIlNwaW5uZXJJY29uIiwiVW5mb2N1c1RvZ2dsZUljb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@livekit/components-react/dist/index.mjs\n',
      );

      /***/
    },
};
