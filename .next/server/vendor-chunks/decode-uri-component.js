"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/decode-uri-component";
exports.ids = ["vendor-chunks/decode-uri-component"];
exports.modules = {
  /***/ "(ssr)/../node_modules/decode-uri-component/index.js":
    /*!*****************************************************!*\
  !*** ../node_modules/decode-uri-component/index.js ***!
  \*****************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ decodeUriComponent)\n/* harmony export */ });\nconst token = "%[a-f0-9]{2}";\nconst singleMatcher = new RegExp("(" + token + ")|([^%]+?)", "gi");\nconst multiMatcher = new RegExp("(" + token + ")+", "gi");\nfunction decodeComponents(components, split) {\n    try {\n        // Try to decode the entire string first\n        return [\n            decodeURIComponent(components.join(""))\n        ];\n    } catch  {\n    // Do nothing\n    }\n    if (components.length === 1) {\n        return components;\n    }\n    split = split || 1;\n    // Split the array in 2 parts\n    const left = components.slice(0, split);\n    const right = components.slice(split);\n    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\nfunction decode(input) {\n    try {\n        return decodeURIComponent(input);\n    } catch  {\n        let tokens = input.match(singleMatcher) || [];\n        for(let i = 1; i < tokens.length; i++){\n            input = decodeComponents(tokens, i).join("");\n            tokens = input.match(singleMatcher) || [];\n        }\n        return input;\n    }\n}\nfunction customDecodeURIComponent(input) {\n    // Keep track of all the replacements and prefill the map with the `BOM`\n    const replaceMap = {\n        "%FE%FF": "��",\n        "%FF%FE": "��"\n    };\n    let match = multiMatcher.exec(input);\n    while(match){\n        try {\n            // Decode as big chunks as possible\n            replaceMap[match[0]] = decodeURIComponent(match[0]);\n        } catch  {\n            const result = decode(match[0]);\n            if (result !== match[0]) {\n                replaceMap[match[0]] = result;\n            }\n        }\n        match = multiMatcher.exec(input);\n    }\n    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n    replaceMap["%C2"] = "�";\n    const entries = Object.keys(replaceMap);\n    for (const key of entries){\n        // Replace all decoded components\n        input = input.replace(new RegExp(key, "g"), replaceMap[key]);\n    }\n    return input;\n}\nfunction decodeUriComponent(encodedURI) {\n    if (typeof encodedURI !== "string") {\n        throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");\n    }\n    try {\n        // Try the built in decoder first\n        return decodeURIComponent(encodedURI);\n    } catch  {\n        // Fallback to a more advanced decoder\n        return customDecodeURIComponent(encodedURI);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2RlY29kZS11cmktY29tcG9uZW50L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxRQUFRO0FBQ2QsTUFBTUMsZ0JBQWdCLElBQUlDLE9BQU8sTUFBTUYsUUFBUSxjQUFjO0FBQzdELE1BQU1HLGVBQWUsSUFBSUQsT0FBTyxNQUFNRixRQUFRLE1BQU07QUFFcEQsU0FBU0ksaUJBQWlCQyxVQUFVLEVBQUVDLEtBQUs7SUFDMUMsSUFBSTtRQUNILHdDQUF3QztRQUN4QyxPQUFPO1lBQUNDLG1CQUFtQkYsV0FBV0csSUFBSSxDQUFDO1NBQUs7SUFDakQsRUFBRSxPQUFNO0lBQ1AsYUFBYTtJQUNkO0lBRUEsSUFBSUgsV0FBV0ksTUFBTSxLQUFLLEdBQUc7UUFDNUIsT0FBT0o7SUFDUjtJQUVBQyxRQUFRQSxTQUFTO0lBRWpCLDZCQUE2QjtJQUM3QixNQUFNSSxPQUFPTCxXQUFXTSxLQUFLLENBQUMsR0FBR0w7SUFDakMsTUFBTU0sUUFBUVAsV0FBV00sS0FBSyxDQUFDTDtJQUUvQixPQUFPTyxNQUFNQyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLEVBQUUsRUFBRVosaUJBQWlCTSxPQUFPTixpQkFBaUJRO0FBQ2pGO0FBRUEsU0FBU0ssT0FBT0MsS0FBSztJQUNwQixJQUFJO1FBQ0gsT0FBT1gsbUJBQW1CVztJQUMzQixFQUFFLE9BQU07UUFDUCxJQUFJQyxTQUFTRCxNQUFNRSxLQUFLLENBQUNuQixrQkFBa0IsRUFBRTtRQUU3QyxJQUFLLElBQUlvQixJQUFJLEdBQUdBLElBQUlGLE9BQU9WLE1BQU0sRUFBRVksSUFBSztZQUN2Q0gsUUFBUWQsaUJBQWlCZSxRQUFRRSxHQUFHYixJQUFJLENBQUM7WUFFekNXLFNBQVNELE1BQU1FLEtBQUssQ0FBQ25CLGtCQUFrQixFQUFFO1FBQzFDO1FBRUEsT0FBT2lCO0lBQ1I7QUFDRDtBQUVBLFNBQVNJLHlCQUF5QkosS0FBSztJQUN0Qyx3RUFBd0U7SUFDeEUsTUFBTUssYUFBYTtRQUNsQixVQUFVO1FBQ1YsVUFBVTtJQUNYO0lBRUEsSUFBSUgsUUFBUWpCLGFBQWFxQixJQUFJLENBQUNOO0lBQzlCLE1BQU9FLE1BQU87UUFDYixJQUFJO1lBQ0gsbUNBQW1DO1lBQ25DRyxVQUFVLENBQUNILEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBR2IsbUJBQW1CYSxLQUFLLENBQUMsRUFBRTtRQUNuRCxFQUFFLE9BQU07WUFDUCxNQUFNSyxTQUFTUixPQUFPRyxLQUFLLENBQUMsRUFBRTtZQUU5QixJQUFJSyxXQUFXTCxLQUFLLENBQUMsRUFBRSxFQUFFO2dCQUN4QkcsVUFBVSxDQUFDSCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUdLO1lBQ3hCO1FBQ0Q7UUFFQUwsUUFBUWpCLGFBQWFxQixJQUFJLENBQUNOO0lBQzNCO0lBRUEseUdBQXlHO0lBQ3pHSyxVQUFVLENBQUMsTUFBTSxHQUFHO0lBRXBCLE1BQU1HLFVBQVVDLE9BQU9DLElBQUksQ0FBQ0w7SUFFNUIsS0FBSyxNQUFNTSxPQUFPSCxRQUFTO1FBQzFCLGlDQUFpQztRQUNqQ1IsUUFBUUEsTUFBTVksT0FBTyxDQUFDLElBQUk1QixPQUFPMkIsS0FBSyxNQUFNTixVQUFVLENBQUNNLElBQUk7SUFDNUQ7SUFFQSxPQUFPWDtBQUNSO0FBRWUsU0FBU2EsbUJBQW1CQyxVQUFVO0lBQ3BELElBQUksT0FBT0EsZUFBZSxVQUFVO1FBQ25DLE1BQU0sSUFBSUMsVUFBVSx3REFBd0QsT0FBT0QsYUFBYTtJQUNqRztJQUVBLElBQUk7UUFDSCxpQ0FBaUM7UUFDakMsT0FBT3pCLG1CQUFtQnlCO0lBQzNCLEVBQUUsT0FBTTtRQUNQLHNDQUFzQztRQUN0QyxPQUFPVix5QkFBeUJVO0lBQ2pDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvZGVjb2RlLXVyaS1jb21wb25lbnQvaW5kZXguanM/MDRjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0b2tlbiA9ICclW2EtZjAtOV17Mn0nO1xuY29uc3Qgc2luZ2xlTWF0Y2hlciA9IG5ldyBSZWdFeHAoJygnICsgdG9rZW4gKyAnKXwoW14lXSs/KScsICdnaScpO1xuY29uc3QgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBbZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbignJykpXTtcblx0fSBjYXRjaCB7XG5cdFx0Ly8gRG8gbm90aGluZ1xuXHR9XG5cblx0aWYgKGNvbXBvbmVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIGNvbXBvbmVudHM7XG5cdH1cblxuXHRzcGxpdCA9IHNwbGl0IHx8IDE7XG5cblx0Ly8gU3BsaXQgdGhlIGFycmF5IGluIDIgcGFydHNcblx0Y29uc3QgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQpO1xuXHRjb25zdCByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2gge1xuXHRcdGxldCB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKSB8fCBbXTtcblxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0Y29uc3QgcmVwbGFjZU1hcCA9IHtcblx0XHQnJUZFJUZGJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0XHQnJUZGJUZFJzogJ1xcdUZGRkRcXHVGRkZEJyxcblx0fTtcblxuXHRsZXQgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2gge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gZGVjb2RlKG1hdGNoWzBdKTtcblxuXHRcdFx0aWYgKHJlc3VsdCAhPT0gbWF0Y2hbMF0pIHtcblx0XHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdH1cblxuXHQvLyBBZGQgYCVDMmAgYXQgdGhlIGVuZCBvZiB0aGUgbWFwIHRvIG1ha2Ugc3VyZSBpdCBkb2VzIG5vdCByZXBsYWNlIHRoZSBjb21iaW5hdG9yIGJlZm9yZSBldmVyeXRoaW5nIGVsc2Vcblx0cmVwbGFjZU1hcFsnJUMyJ10gPSAnXFx1RkZGRCc7XG5cblx0Y29uc3QgZW50cmllcyA9IE9iamVjdC5rZXlzKHJlcGxhY2VNYXApO1xuXG5cdGZvciAoY29uc3Qga2V5IG9mIGVudHJpZXMpIHtcblx0XHQvLyBSZXBsYWNlIGFsbCBkZWNvZGVkIGNvbXBvbmVudHNcblx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnJyksIHJlcGxhY2VNYXBba2V5XSk7XG5cdH1cblxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlY29kZVVyaUNvbXBvbmVudChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHQvLyBUcnkgdGhlIGJ1aWx0IGluIGRlY29kZXIgZmlyc3Rcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVuY29kZWRVUkkpO1xuXHR9IGNhdGNoIHtcblx0XHQvLyBGYWxsYmFjayB0byBhIG1vcmUgYWR2YW5jZWQgZGVjb2RlclxuXHRcdHJldHVybiBjdXN0b21EZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH1cbn1cbiJdLCJuYW1lcyI6WyJ0b2tlbiIsInNpbmdsZU1hdGNoZXIiLCJSZWdFeHAiLCJtdWx0aU1hdGNoZXIiLCJkZWNvZGVDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInNwbGl0IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImxlbmd0aCIsImxlZnQiLCJzbGljZSIsInJpZ2h0IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjb25jYXQiLCJjYWxsIiwiZGVjb2RlIiwiaW5wdXQiLCJ0b2tlbnMiLCJtYXRjaCIsImkiLCJjdXN0b21EZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlTWFwIiwiZXhlYyIsInJlc3VsdCIsImVudHJpZXMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwicmVwbGFjZSIsImRlY29kZVVyaUNvbXBvbmVudCIsImVuY29kZWRVUkkiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/decode-uri-component/index.js\n',
      );

      /***/
    },
};
