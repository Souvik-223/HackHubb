"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {
  /***/ "(ssr)/../node_modules/uploadthing/dist/chunk-5KWT532U.mjs":
    /*!***********************************************************!*\
  !*** ../node_modules/uploadthing/dist/chunk-5KWT532U.mjs ***!
  \***********************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML)\n/* harmony export */ });\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = "UPLOAD_FAILED";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: "FORBIDDEN",\n    // 403 Forbidden\n    EntityTooSmall: "TOO_SMALL",\n    // 400 Bad Request\n    EntityTooLarge: "TOO_LARGE",\n    // 400 Bad Request\n    ExpiredToken: "FORBIDDEN",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: "TOO_MANY_FILES",\n    // 400 Bad Request\n    InternalError: "INTERNAL_SERVER_ERROR",\n    // 500 Internal Server Error\n    KeyTooLongError: "KEY_TOO_LONG",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: "TOO_LARGE"\n};\n //# sourceMappingURL=chunk-5KWT532U.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNUtXVDUzMlUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxrQ0FBa0M7QUFDbEMsSUFBSUEsd0JBQXdCLENBQUNDO0lBQzNCLE1BQU1DLFlBQVlELFNBQVNFLEtBQUssQ0FBQztJQUNqQyxNQUFNQyxlQUFlSCxTQUFTRSxLQUFLLENBQUM7SUFDcEMsTUFBTUUsT0FBT0gsYUFBYSxPQUFPLEtBQUssSUFBSUEsU0FBUyxDQUFDLEVBQUU7SUFDdEQsTUFBTUksVUFBVUYsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxZQUFZLENBQUMsRUFBRTtJQUMvRCxJQUFJLENBQUNDLFFBQVEsQ0FBQ0MsU0FDWixPQUFPO0lBQ1QsT0FBTztRQUFFRCxNQUFNRSx1QkFBdUIsQ0FBQ0YsS0FBSyxJQUFJRztRQUFvQkY7SUFBUTtBQUM5RTtBQUNBLElBQUlFLHFCQUFxQjtBQUN6QixJQUFJRCwwQkFBMEI7SUFDNUJFLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEJDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEJDLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEJDLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEJDLHFDQUFxQztJQUNyQyxrQkFBa0I7SUFDbEJDLGVBQWU7SUFDZiw0QkFBNEI7SUFDNUJDLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEJDLDBCQUEwQjtBQUU1QjtBQUlFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFja2h1YmIvLi4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNUtXVDUzMlUubWpzPzgzODYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL3MzLWVycm9yLXBhcnNlci50c1xudmFyIG1heWJlUGFyc2VSZXNwb25zZVhNTCA9IChtYXliZVhtbCkgPT4ge1xuICBjb25zdCBjb2RlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPENvZGU+KC4qPyk8XFwvQ29kZT4vcyk7XG4gIGNvbnN0IG1lc3NhZ2VNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88TWVzc2FnZT4oLio/KTxcXC9NZXNzYWdlPi9zKTtcbiAgY29uc3QgY29kZSA9IGNvZGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogY29kZU1hdGNoWzFdO1xuICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtZXNzYWdlTWF0Y2hbMV07XG4gIGlmICghY29kZSB8fCAhbWVzc2FnZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIHsgY29kZTogczNDb2RlVG9VcGxvYWRUaGluZ0NvZGVbY29kZV0gPz8gREVGQVVMVF9FUlJPUl9DT0RFLCBtZXNzYWdlIH07XG59O1xudmFyIERFRkFVTFRfRVJST1JfQ09ERSA9IFwiVVBMT0FEX0ZBSUxFRFwiO1xudmFyIHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlID0ge1xuICBBY2Nlc3NEZW5pZWQ6IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMyBGb3JiaWRkZW5cbiAgRW50aXR5VG9vU21hbGw6IFwiVE9PX1NNQUxMXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFbnRpdHlUb29MYXJnZTogXCJUT09fTEFSR0VcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEV4cGlyZWRUb2tlbjogXCJGT1JCSURERU5cIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEluY29ycmVjdE51bWJlck9mRmlsZXNJblBvc3RSZXF1ZXN0OiBcIlRPT19NQU5ZX0ZJTEVTXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbnRlcm5hbEVycm9yOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAvLyA1MDAgSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gIEtleVRvb0xvbmdFcnJvcjogXCJLRVlfVE9PX0xPTkdcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIE1heE1lc3NhZ2VMZW5ndGhFeGNlZWRlZDogXCJUT09fTEFSR0VcIlxuICAvLyA0MDAgQmFkIFJlcXVlc3Rcbn07XG5cbmV4cG9ydCB7XG4gIG1heWJlUGFyc2VSZXNwb25zZVhNTFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLTVLV1Q1MzJVLm1qcy5tYXAiXSwibmFtZXMiOlsibWF5YmVQYXJzZVJlc3BvbnNlWE1MIiwibWF5YmVYbWwiLCJjb2RlTWF0Y2giLCJtYXRjaCIsIm1lc3NhZ2VNYXRjaCIsImNvZGUiLCJtZXNzYWdlIiwiczNDb2RlVG9VcGxvYWRUaGluZ0NvZGUiLCJERUZBVUxUX0VSUk9SX0NPREUiLCJBY2Nlc3NEZW5pZWQiLCJFbnRpdHlUb29TbWFsbCIsIkVudGl0eVRvb0xhcmdlIiwiRXhwaXJlZFRva2VuIiwiSW5jb3JyZWN0TnVtYmVyT2ZGaWxlc0luUG9zdFJlcXVlc3QiLCJJbnRlcm5hbEVycm9yIiwiS2V5VG9vTG9uZ0Vycm9yIiwiTWF4TWVzc2FnZUxlbmd0aEV4Y2VlZGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/uploadthing/dist/chunk-5KWT532U.mjs\n',
      );

      /***/
    },

  /***/ "(ssr)/../node_modules/uploadthing/dist/chunk-T2XS27LC.mjs":
    /*!***********************************************************!*\
  !*** ../node_modules/uploadthing/dist/chunk-T2XS27LC.mjs ***!
  \***********************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x)=>typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {\n        get: (a, b)=>(typeof require !== "undefined" ? require : a)[b]\n    }) : x)(function(x) {\n    if (typeof require !== "undefined") return require.apply(this, arguments);\n    throw new Error(\'Dynamic require of "\' + x + \'" is not supported\');\n});\nvar __commonJS = (cb, mod)=>function __require2() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === "object" || typeof from === "function") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. "__esModule" has not been set), then set\n    // "default" to the CommonJS "module.exports" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n //# sourceMappingURL=chunk-T2XS27LC.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstVDJYUzI3TEMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUlBLFdBQVdDLE9BQU9DLE1BQU07QUFDNUIsSUFBSUMsWUFBWUYsT0FBT0csY0FBYztBQUNyQyxJQUFJQyxtQkFBbUJKLE9BQU9LLHdCQUF3QjtBQUN0RCxJQUFJQyxvQkFBb0JOLE9BQU9PLG1CQUFtQjtBQUNsRCxJQUFJQyxlQUFlUixPQUFPUyxjQUFjO0FBQ3hDLElBQUlDLGVBQWVWLE9BQU9XLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxZQUE0QixhQUFILEdBQUksRUFBQ0MsSUFBTSxPQUFPQyxZQUFZLGNBQWNBLFVBQVUsT0FBT0MsVUFBVSxjQUFjLElBQUlBLE1BQU1GLEdBQUc7UUFDN0hHLEtBQUssQ0FBQ0MsR0FBR0MsSUFBTSxDQUFDLE9BQU9KLFlBQVksY0FBY0EsVUFBVUcsQ0FBQUEsQ0FBRSxDQUFDQyxFQUFFO0lBQ2xFLEtBQUtMLENBQUFBLEVBQUcsU0FBU0EsQ0FBQztJQUNoQixJQUFJLE9BQU9DLFlBQVksYUFDckIsT0FBT0EsUUFBUUssS0FBSyxDQUFDLElBQUksRUFBRUM7SUFDN0IsTUFBTSxJQUFJQyxNQUFNLHlCQUF5QlIsSUFBSTtBQUMvQztBQUNBLElBQUlTLGFBQWEsQ0FBQ0MsSUFBSUMsTUFBUSxTQUFTQztRQUNyQyxPQUFPRCxPQUFPLENBQUMsR0FBR0QsRUFBRSxDQUFDbEIsa0JBQWtCa0IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUNDLE1BQU07WUFBRUUsU0FBUyxDQUFDO1FBQUUsR0FBR0EsT0FBTyxFQUFFRixNQUFNQSxJQUFJRSxPQUFPO0lBQ3BHO0FBQ0EsSUFBSUMsY0FBYyxDQUFDQyxJQUFJQyxNQUFNQyxRQUFRQztJQUNuQyxJQUFJRixRQUFRLE9BQU9BLFNBQVMsWUFBWSxPQUFPQSxTQUFTLFlBQVk7UUFDbEUsS0FBSyxJQUFJRyxPQUFPM0Isa0JBQWtCd0IsTUFDaEMsSUFBSSxDQUFDcEIsYUFBYXdCLElBQUksQ0FBQ0wsSUFBSUksUUFBUUEsUUFBUUYsUUFDekM3QixVQUFVMkIsSUFBSUksS0FBSztZQUFFaEIsS0FBSyxJQUFNYSxJQUFJLENBQUNHLElBQUk7WUFBRUUsWUFBWSxDQUFFSCxDQUFBQSxPQUFPNUIsaUJBQWlCMEIsTUFBTUcsSUFBRyxLQUFNRCxLQUFLRyxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPTjtBQUNUO0FBQ0EsSUFBSU8sVUFBVSxDQUFDWCxLQUFLWSxZQUFZQyxTQUFZQSxDQUFBQSxTQUFTYixPQUFPLE9BQU8xQixTQUFTUyxhQUFhaUIsUUFBUSxDQUFDLEdBQUdHLFlBQ25HLHNFQUFzRTtJQUN0RSxpRUFBaUU7SUFDakUsc0VBQXNFO0lBQ3RFLHFFQUFxRTtJQUNyRVMsY0FBYyxDQUFDWixPQUFPLENBQUNBLElBQUljLFVBQVUsR0FBR3JDLFVBQVVvQyxRQUFRLFdBQVc7UUFBRUUsT0FBT2Y7UUFBS1UsWUFBWTtJQUFLLEtBQUtHLFFBQ3pHYixJQUNGO0FBTUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNraHViYi8uLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanM/YTRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19jcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcmVxdWlyZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHgpID0+IHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBQcm94eSh4LCB7XG4gIGdldDogKGEsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiBhKVtiXVxufSkgOiB4KShmdW5jdGlvbih4KSB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicgKyB4ICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn0pO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlMigpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy8gSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTVxuICAvLyBmaWxlIHRoYXQgaGFzIGJlZW4gY29udmVydGVkIHRvIGEgQ29tbW9uSlMgZmlsZSB1c2luZyBhIEJhYmVsLVxuICAvLyBjb21wYXRpYmxlIHRyYW5zZm9ybSAoaS5lLiBcIl9fZXNNb2R1bGVcIiBoYXMgbm90IGJlZW4gc2V0KSwgdGhlbiBzZXRcbiAgLy8gXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LlxuICBpc05vZGVNb2RlIHx8ICFtb2QgfHwgIW1vZC5fX2VzTW9kdWxlID8gX19kZWZQcm9wKHRhcmdldCwgXCJkZWZhdWx0XCIsIHsgdmFsdWU6IG1vZCwgZW51bWVyYWJsZTogdHJ1ZSB9KSA6IHRhcmdldCxcbiAgbW9kXG4pKTtcblxuZXhwb3J0IHtcbiAgX19yZXF1aXJlLFxuICBfX2NvbW1vbkpTLFxuICBfX3RvRVNNXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstVDJYUzI3TEMubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZSIsIk9iamVjdCIsImNyZWF0ZSIsIl9fZGVmUHJvcCIsImRlZmluZVByb3BlcnR5IiwiX19nZXRPd25Qcm9wRGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZ2V0T3duUHJvcE5hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9fZ2V0UHJvdG9PZiIsImdldFByb3RvdHlwZU9mIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX3JlcXVpcmUiLCJ4IiwicmVxdWlyZSIsIlByb3h5IiwiZ2V0IiwiYSIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsIkVycm9yIiwiX19jb21tb25KUyIsImNiIiwibW9kIiwiX19yZXF1aXJlMiIsImV4cG9ydHMiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiZW51bWVyYWJsZSIsIl9fdG9FU00iLCJpc05vZGVNb2RlIiwidGFyZ2V0IiwiX19lc01vZHVsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\n',
      );

      /***/
    },

  /***/ "(ssr)/../node_modules/uploadthing/dist/client.mjs":
    /*!***************************************************!*\
  !*** ../node_modules/uploadthing/dist/client.mjs ***!
  \***************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ "(ssr)/../node_modules/uploadthing/dist/chunk-5KWT532U.mjs");\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ "(ssr)/../node_modules/uploadthing/dist/chunk-T2XS27LC.mjs");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ "(ssr)/../node_modules/@uploadthing/shared/dist/index.mjs");\n\n\n// src/client.ts\n\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nvar capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config)=>{\n    if (!config) return "";\n    const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n    const formattedTypes = allowedTypes.map((f)=>f === "blob" ? "file" : f);\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join("s, ")} and ${lastType}s`;\n    }\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nvar allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === "string") return styleField;\n    if (typeof styleField === "function") {\n        const result = styleField(args);\n        if (typeof result === "string") return result;\n    }\n    return "";\n};\nvar styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === "object") return styleField;\n    if (typeof styleField === "function") {\n        const result = styleField(args);\n        if (typeof result === "object") return result;\n    }\n    return {};\n};\nvar contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== "function") return contentField;\n    if (typeof contentField === "function") {\n        const result = contentField(arg);\n        return result;\n    }\n};\n// src/client.ts\nfunction fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {\n    return new Promise((res, rej)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(opts.method ?? "get", url);\n        opts.headers && Object.keys(opts.headers).forEach((h)=>opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? ""));\n        xhr.onload = (e)=>{\n            res(e.target);\n        };\n        xhr.onerror = rej;\n        if (xhr.upload && onProgress) xhr.upload.onprogress = onProgress;\n        if (xhr.upload && onUploadBegin) xhr.upload.onloadstart = onUploadBegin;\n        xhr.send(opts.body);\n    });\n}\nvar createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url ?? `${window.location.origin}/api/uploadthing`);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set("actionType", config.actionType);\n    queryParams.set("slug", config.slug);\n    url.search = queryParams.toString();\n    return url.toString();\n};\nvar DANGEROUS__uploadFiles = async (opts, config)=>{\n    const s3ConnectionRes = await fetch(createAPIRequestUrl({\n        url: config == null ? void 0 : config.url,\n        slug: String(opts.endpoint),\n        actionType: "upload"\n    }), {\n        method: "POST",\n        body: JSON.stringify({\n            files: opts.files.map((f)=>f.name),\n            input: opts.input\n        }),\n        // Express requires Content-Type to be explicitly set to parse body properly\n        headers: {\n            "Content-Type": "application/json"\n        }\n    }).then(async (res)=>{\n        if (!res.ok) {\n            const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n            throw error;\n        }\n        const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n        if (jsonOrError instanceof Error) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: "BAD_REQUEST",\n                message: jsonOrError.message,\n                cause: res\n            });\n        }\n        return jsonOrError;\n    });\n    if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: "BAD_REQUEST",\n            message: "No URL. How did you even get here?",\n            cause: s3ConnectionRes\n        });\n    }\n    const fileUploadPromises = s3ConnectionRes.map(async (presigned)=>{\n        const file = opts.files.find((f)=>f.name === presigned.name);\n        if (!file) {\n            console.error("No file found for presigned URL", presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: "NOT_FOUND",\n                message: "No file found for presigned URL",\n                cause: `Expected file with name ${presigned.name} but got \'${opts.files.join(",")}\'`\n            });\n        }\n        const { url, fields } = presigned.presignedUrl;\n        const formData = new FormData();\n        if (presigned.fileType === file.type.split("/")[0] || presigned.fileType === file.type) {\n            formData.append("Content-Type", file.type);\n        } else if (presigned.fileType === "blob") {\n            formData.append("Content-Type", "application/octet-stream");\n        } else if (presigned.fileType === "pdf") {\n            formData.append("Content-Type", "application/pdf");\n        }\n        Object.entries({\n            ...fields,\n            file\n        }).forEach(([key, value])=>{\n            formData.append(key, value);\n        });\n        const upload = await fetchWithProgress(url, {\n            method: "POST",\n            body: formData,\n            headers: new Headers({\n                Accept: "application/xml"\n            })\n        }, (progressEvent)=>{\n            var _a;\n            return (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {\n                file: file.name,\n                progress: progressEvent.loaded / progressEvent.total * 100\n            });\n        }, ()=>{\n            var _a;\n            (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, {\n                file: file.name\n            });\n        });\n        if (upload.status > 299 || upload.status < 200) {\n            await fetch(createAPIRequestUrl({\n                url: config == null ? void 0 : config.url,\n                slug: String(opts.endpoint),\n                actionType: "failure"\n            }), {\n                method: "POST",\n                body: JSON.stringify({\n                    fileKey: fields.key\n                })\n            });\n            const parsed = (0,_chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(upload.responseText);\n            if (parsed == null ? void 0 : parsed.message) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: parsed.code,\n                    message: parsed.message\n                });\n            } else {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                    code: "UPLOAD_FAILED",\n                    message: `Failed to upload file ${file.name} to S3`,\n                    cause: upload.responseText\n                });\n            }\n        }\n        const genUrl = "https://utfs.io/f/" + encodeURIComponent(fields.key);\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.pollForFileData)(presigned.key);\n        const ret = {\n            fileName: file.name,\n            name: file.name,\n            fileSize: file.size,\n            size: file.size,\n            fileKey: presigned.key,\n            key: presigned.key,\n            fileUrl: genUrl,\n            url: genUrl\n        };\n        return ret;\n    });\n    return Promise.all(fileUploadPromises);\n};\nvar genUploader = ()=>{\n    return DANGEROUS__uploadFiles;\n};\nvar classNames = (...classes)=>{\n    return classes.filter(Boolean).join(" ");\n};\nvar generateMimeTypes = (fileTypes)=>{\n    const accepted = fileTypes.map((type)=>{\n        if (type === "blob") return "blob";\n        if (type === "pdf") return "application/pdf";\n        if (type.includes("/")) return type;\n        else return `${type}/*`;\n    });\n    if (accepted.includes("blob")) {\n        return void 0;\n    }\n    return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    if (!mimeTypes) return void 0;\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\n //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/uploadthing/dist/client.mjs\n',
      );

      /***/
    },
};
